{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/Fragment在ViewPager中.png","path":"images/Fragment在ViewPager中.png","modified":0,"renderable":0},{"_id":"source/images/Fragement静态加载.png","path":"images/Fragement静态加载.png","modified":0,"renderable":0},{"_id":"source/images/Fragment的事件操作.png","path":"images/Fragment的事件操作.png","modified":0,"renderable":0},{"_id":"source/images/Fragment的动态加载.png","path":"images/Fragment的动态加载.png","modified":0,"renderable":0},{"_id":"source/images/进场动画时的设置流程.png","path":"images/进场动画时的设置流程.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/images/avator.jpg","path":"images/avator.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/images/Fragment的生命周期.png","path":"images/Fragment的生命周期.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1520173261647},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1520173261631},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1520173261639},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1520173261639},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1520173261655},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1520173261655},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1520173261655},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1520173261663},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1520173261655},{"_id":"themes/next/README.cn.md","hash":"87950c415dd162ff78e98b41f1148b85462103e2","modified":1520173261663},{"_id":"themes/next/README.md","hash":"927f82cfeb5969a89b815b5ec3a3f2881e3b1bb4","modified":1520173261663},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1520173261671},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1520173261856},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1520173261663},{"_id":"source/_posts/Android-Studio-上传代码到Maven仓库.md","hash":"737901512e7ad60bc635c98809798f6f4f59a003","modified":1534007115813},{"_id":"source/_posts/Android仿IOS打开应用进出场动画开发.md","hash":"6aa4f5150cedba7b92de722baffde2f0712154d4","modified":1564502673966},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1520173261671},{"_id":"source/_posts/Android性能优化.md","hash":"dc2a63b13da046ff048a9cd934f77d8ddc8ecbf6","modified":1530717907202},{"_id":"source/_posts/Electron笔记.md","hash":"98d8f46e989377082cd2048e04b930fe5b089ae7","modified":1530962009451},{"_id":"source/_posts/GitHub-Hexo搭建博客笔记.md","hash":"aa37539aefb82085e140c5e67b54589a54864421","modified":1530717907206},{"_id":"source/_posts/Fragment笔记.md","hash":"b8971f3b9e7e08185516d009ebe8b2a7886ad76b","modified":1523776124883},{"_id":"source/_posts/Git笔记.md","hash":"03f052338060a6e1b256fe04f43fee1ede682132","modified":1522674012963},{"_id":"source/_posts/Gradle-Groovy一览.md","hash":"4795f0f0b537faa33fb50d44e523a9283b2060d0","modified":1522159584241},{"_id":"source/_posts/Stetho使用技巧.md","hash":"7475864dcd7914dbc6e5571d2637ffd0a9c917f2","modified":1522159584244},{"_id":"source/_posts/TimeRecoder-写一个计算App性能耗时的工具类.md","hash":"92a5ddd60345bee732bdde943e06a4652a87c92d","modified":1522159584245},{"_id":"source/_posts/n个无序数求第k大的数.md","hash":"0298ea9ef854b49fae7cc7e028db63c69377a6e4","modified":1522159584246},{"_id":"source/_posts/python基础.md","hash":"0e243c4718c47a51f80ff0101feab7b0b51fd0ee","modified":1522159584247},{"_id":"source/tags/index.md","hash":"6ba74c145c84c31ebb8cba36d2bd4e3147d59802","modified":1520781808813},{"_id":"source/_posts/Gradle统一依赖.md","hash":"510386f8e33513e8e0f492fa6fc7dba293a426d1","modified":1522430045569},{"_id":"source/_posts/在-Windows-平台上打造出你的-Linux-开发环境.md","hash":"2a4df73b7ba01b7b9f0d568310f5dc6f1c68344b","modified":1522159584249},{"_id":"source/images/Fragment在ViewPager中.png","hash":"f67774a90e8ca6f5d91358758352fe93de285a95","modified":1523774760878},{"_id":"source/images/Fragement静态加载.png","hash":"8784a400180d9319ab3eb0dfa329ced4e4c7cdde","modified":1523773795037},{"_id":"source/images/Fragment的事件操作.png","hash":"c91bc8f3c40cb4b7a9be318e53b31a93f6532e47","modified":1523773965503},{"_id":"source/_posts/动态代理及原理思考.md","hash":"65a0658befafc5ef5391d973054d4273eb532b1a","modified":1522159584248},{"_id":"source/images/Fragment的动态加载.png","hash":"3ad5636855996ab2d6186adf515049c9edac73d1","modified":1523773810477},{"_id":"source/images/_1471512031023.png","hash":"3adba35344af77b3e89efa1112533973dbb36466","modified":1564502467454},{"_id":"source/images/进场动画时的设置流程.png","hash":"84cb7f72a67496b081ec08b09476b095798f01a0","modified":1564502334040},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1520173261639},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1520173261647},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1520173261647},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1520173261647},{"_id":"themes/next/_config.yml","hash":"1c41ab7377cc659d194d39379bd052ebd5e74e80","modified":1522159856457},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1520173261679},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1520173261679},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1520173261679},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1520173261679},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1520173261687},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1520173261687},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1520173261687},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1520173261695},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1520173261695},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1520173261687},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1520173261695},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1520173261703},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1520173261695},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1520173261703},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1520173261703},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1520173261703},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1520173261848},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1520173261711},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1520173261848},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1520173261848},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1520173261856},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1520173261856},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1520173261864},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1520173261864},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1520173261856},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1520173262264},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1520173261856},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1520173262264},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1520173262264},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520173262048},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1520173261711},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1520173261711},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1520173261731},{"_id":"themes/next/layout/_partials/footer.swig","hash":"393e4973b958f497978b838daaea7019787ae7b5","modified":1521990898482},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1520173261740},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1520173261748},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1520173261748},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1520173261748},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1520173261724},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1520173261721},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1521990240174},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1520173261728},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1520173261731},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1520173261730},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1520173261772},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1520173261772},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1520173261726},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1520173261832},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1520173261780},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1520173261832},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1520173261832},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1520173261832},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1520173261832},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1520173261864},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1520173261864},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1520173261864},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1520173261872},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1520173261872},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1520173261872},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1520173261872},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1520173261872},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1520173261872},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1520173261840},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1520173262048},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1520173262056},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1520173262048},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1520173262056},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1520173262056},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1520173261832},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1520173262056},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1520173262056},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1520173262064},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1520173262064},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1520173262064},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1520173262056},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1520173262072},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1520173262064},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1520173262072},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1520173262072},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1520173262072},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1520173262072},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1520173262064},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1520173262072},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520173261780},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520173261780},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520173261989},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520173261997},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520173261997},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520173262040},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520173262048},{"_id":"source/images/avator.jpg","hash":"7297b814ade099947ce42d07945b78daf54e8e7c","modified":1521638693900},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1520173261756},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1520173261740},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1520173261740},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1520173261756},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1520173261756},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1520173261756},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1520173261764},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1520173261772},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1520173261764},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1520173261780},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1520173261780},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1520173261788},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1520173261796},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1520173261796},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1520173261764},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1520173261788},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1520173261788},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1520173261796},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1520173261804},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1520173261804},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1520173261796},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1520173261812},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1520173261812},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1520173261804},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1520173261804},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1520173261820},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1520173261822},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1520173261827},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1520173261824},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1520173261830},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1520173261825},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1520173261828},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1520173261831},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1520173261840},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1520173261812},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1520173261989},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1520173261848},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1520173261997},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1520173261848},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1520173261989},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1520173261997},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1520173262040},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1520173262040},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1520173261848},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1520173262080},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1520173262080},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1520173262080},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1520173262080},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1520173262080},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1520173262088},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1520173262088},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1520173262088},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1520173262040},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1520173262088},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1520173262096},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1520173262129},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1520173262096},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1520173262163},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1520173262048},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1520173262125},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1520173262163},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1520173262171},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1520173262171},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1520173262131},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1520173262155},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1520173262155},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1520173262127},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1520173262155},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1520173262163},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1520173262112},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1520173262203},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1520173262203},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1520173262203},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1520173262203},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1520173262195},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1520173262203},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1520173262211},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1520173262211},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1520173262240},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1520173262155},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1520173262240},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1520173262211},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1520173262220},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1520173262221},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1520173262224},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1520173262223},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1520173262226},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1520173262227},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1520173262240},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1520173262228},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1520173262230},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1520173262231},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1520173262231},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1520173262231},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1520173262231},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1520173262231},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1520173262231},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1520173262248},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1520173262256},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1520173262256},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1520173262264},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1520173262256},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1520173262211},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1520173262195},{"_id":"source/images/Fragment的生命周期.png","hash":"6c200e9b68032e4a15fd1e5fd313731750f21e23","modified":1523773677288},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1520173261880},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1520173261880},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1520173261840},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1520173261840},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1520173261880},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1520173261888},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1520173261888},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1520173261912},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1520173261981},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1520173261948},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1520173261981},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1520173261981},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1520173261981},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1520173261989},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1520173261989},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1520173261981},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1520173262005},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1520173262013},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1520173262005},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1520173262014},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1520173262016},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1520173262018},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1520173262020},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1520173262025},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1520173262028},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1520173262030},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1520173262027},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1520173262005},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1520173262031},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1520173262032},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1520173262032},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1520173262032},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1520173262088},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1520173262032},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1520173262040},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1520173262040},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1520173262131},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1520173262131},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1520173262131},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1520173262112},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1520173262131},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1520173262131},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1520173262139},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1520173262147},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1520173262104},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1520173262147},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1520173262147},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1520173262112},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1520173262171},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1520173262171},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1520173262179},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1520173262163},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1520173262163},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1520173262248},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1520173262248},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1520173262112},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1520173262195},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1520173262256},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1520173262195},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1520173261888},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1520173261888},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1520173261888},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1520173261896},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1520173261896},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1520173261896},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1520173261896},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1520173261896},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1520173261904},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1520173261904},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1520173261904},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1520173261904},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1520173261912},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1520173261904},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1520173261912},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1520173261912},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1520173261912},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1520173261912},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1520173261921},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1520173261922},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1520173261924},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1520173261925},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1520173261927},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1520173261930},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1520173261928},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1520173261931},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1520173261932},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1520173261932},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1520173261932},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1520173261932},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1520173261932},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1520173261940},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1520173261940},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1520173261940},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1520173261940},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1520173261940},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1520173261940},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1520173261948},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1520173261948},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1520173261948},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1520173261948},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1520173261957},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1520173261958},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1520173261959},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1520173261961},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1520173261962},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1520173261965},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1520173261964},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1520173261965},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1520173261965},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1520173261973},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1520173261965},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1520173261965},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1520173261973},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1520173261973},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1520173261973},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1520173261973},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1520173261973},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1520173262024},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1520173262021},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1520173262032},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1520173262104},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1520173262096},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1520173262104},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1520173262139},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1520173262139},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1520173262104},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1520173262139},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1520173262147},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1520173262179},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1520173262187},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1520173262179},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1520173262139},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1520173262147},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1520173262104},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1520173262123},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1520173262248},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1520173262187},{"_id":"public/search.xml","hash":"7d9fd51a9e250ecd215537f8d963b795e47eed55","modified":1564502559594},{"_id":"public/tags/index.html","hash":"d3dfab3aaabec47c52748557c3283c7cba951805","modified":1564502561407},{"_id":"public/2018/07/07/Electron笔记/index.html","hash":"4f9ba3b7c7a3d6d838bbb5c0dd262bd7f40846aa","modified":1564502561414},{"_id":"public/2018/04/15/Android性能优化/index.html","hash":"04d4c63ea78d8f73dc35887676008d410c8c7ba7","modified":1564502561415},{"_id":"public/2018/07/04/Android-Studio-上传代码到Maven仓库/index.html","hash":"812990ac22c121e6b159ddccd76979c94e0faede","modified":1564502561416},{"_id":"public/2018/04/15/Fragment笔记/index.html","hash":"c3661b1cc6ec91a806103a54c04f330a2682e68a","modified":1564502561416},{"_id":"public/2018/03/23/Git笔记/index.html","hash":"e5e54b1c16388ac6fcaa12a8cd1e1440906ff38d","modified":1564502561416},{"_id":"public/2018/03/15/n个无序数求第k大的数/index.html","hash":"4659a17fa699d5db6886ea938d422d06c7021ce5","modified":1564502561416},{"_id":"public/2018/03/21/python基础/index.html","hash":"688c8f736be373e81d15fd46ac6f1c4e3ca2e96d","modified":1564502561416},{"_id":"public/2018/03/12/TimeRecoder-写一个计算App性能耗时的工具类/index.html","hash":"5a93f16a92cba5bec742e2a1f5f01abd627e52bf","modified":1564502561416},{"_id":"public/2018/03/11/动态代理及原理思考/index.html","hash":"0c0799acba6635bdf7771e69906d5ea31e18d33c","modified":1564502561417},{"_id":"public/2018/03/11/Gradle统一依赖/index.html","hash":"070a71e4f23b874bf1b7bc9307ba47adc393f2ed","modified":1564502561417},{"_id":"public/2018/03/10/Gradle-Groovy一览/index.html","hash":"3f087b2652f219500d05dfb87bd57ea8f856b158","modified":1564502561417},{"_id":"public/2018/03/04/在-Windows-平台上打造出你的-Linux-开发环境/index.html","hash":"751252b3286c6fa119a0cb667313ebc583eafeb9","modified":1564502561417},{"_id":"public/index.html","hash":"caedd751b3b6f4a344b1bc4e99b73aa9e421d90e","modified":1564502683505},{"_id":"public/2019/07/30/Android仿IOS打开应用进出场动画开发/index.html","hash":"94a30f56ea0a7e22034c4e28c5e40c6da6ff7826","modified":1564502683505},{"_id":"public/2018/03/04/Stetho使用技巧/index.html","hash":"2a4c5796c71f2766fb115d546d6e926266743574","modified":1564502561571},{"_id":"public/2018/03/04/GitHub-Hexo搭建博客笔记/index.html","hash":"448f8ea1763385da5f54137e03651a1f2848ec67","modified":1564502561572},{"_id":"public/page/2/index.html","hash":"610729708403519c0a43614b1304c0800c064a0d","modified":1564502683505},{"_id":"public/page/3/index.html","hash":"d5b1f79a6d3bd23ffd2ad76af8f41f00d900b904","modified":1564502683505},{"_id":"public/archives/2018/index.html","hash":"8a5f9543297b9e08e2a79b65a38080afd58f50bb","modified":1564502561572},{"_id":"public/archives/2018/page/2/index.html","hash":"14d88ed7cdba1169819652faf025494faf62574e","modified":1564502561573},{"_id":"public/archives/index.html","hash":"e2e21a662c513924357c80cb14b19819c77231a6","modified":1564502561573},{"_id":"public/archives/2018/03/index.html","hash":"27b22d30dec1cc67dfc4575ef0110b2f2c255928","modified":1564502561573},{"_id":"public/archives/page/2/index.html","hash":"537564749276fc6d569deda9d942a30df26a5ffc","modified":1564502561573},{"_id":"public/archives/2018/04/index.html","hash":"933057fe544978ea7b00ac097b2eccb01dfee61d","modified":1564502561573},{"_id":"public/archives/2018/07/index.html","hash":"3c713e6672d34908d2f8e868561d38704586d701","modified":1564502561573},{"_id":"public/tags/Android/index.html","hash":"350cf706db7890815a3d023ff35a19ee1de37b48","modified":1564502561573},{"_id":"public/tags/hexo/index.html","hash":"1479040a54906ad23357c61e2e7cd0ff78524c72","modified":1564502561573},{"_id":"public/tags/Gradle/index.html","hash":"d25913b3935d61df367563a2b1076e3b097e15a5","modified":1564502561573},{"_id":"public/tags/Git/index.html","hash":"a5717b1fdd8bb045561b429c3c48de512a95c576","modified":1564502561573},{"_id":"public/tags/算法/index.html","hash":"63edd704100e7cc781b33139a2fecbc7dbe41a37","modified":1564502561574},{"_id":"public/tags/Retrofit/index.html","hash":"bbcfa668b46da97e56d1992fd98d6be5148d38e4","modified":1564502561574},{"_id":"public/tags/python/index.html","hash":"fc1f930680b80aab86ef0c87cf0c815e29ba05cd","modified":1564502561574},{"_id":"public/tags/设计模式/index.html","hash":"b81f7c579b11530864b20e084b6c647e4256c9f3","modified":1564502561574},{"_id":"public/tags/windows/index.html","hash":"7831f4910d69055113c290b6ec28129bb04569fc","modified":1564502561574},{"_id":"public/archives/2019/07/index.html","hash":"9cb5489ddbfb97ed8cc33a43c7dd7129c34beedb","modified":1564502561585},{"_id":"public/archives/2019/index.html","hash":"4eda282c9f91edb77513248bd2d1c9477a839759","modified":1564502561585},{"_id":"public/images/Fragment在ViewPager中.png","hash":"f67774a90e8ca6f5d91358758352fe93de285a95","modified":1564502561586},{"_id":"public/images/Fragment的动态加载.png","hash":"3ad5636855996ab2d6186adf515049c9edac73d1","modified":1564502561586},{"_id":"public/images/Fragment的事件操作.png","hash":"c91bc8f3c40cb4b7a9be318e53b31a93f6532e47","modified":1564502561587},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1564502561587},{"_id":"public/images/Fragement静态加载.png","hash":"8784a400180d9319ab3eb0dfa329ced4e4c7cdde","modified":1564502561587},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1564502561587},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1564502561587},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1564502561588},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1564502561588},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1564502561588},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1564502561588},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1564502561588},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1564502561588},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1564502561588},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1564502561588},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1564502561588},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1564502561588},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1564502561588},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1564502561589},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1564502561589},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1564502561589},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1564502561589},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1564502561589},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1564502561589},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1564502561589},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1564502561589},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1564502561590},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1564502561590},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1564502561590},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1564502561590},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1564502561590},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1564502561590},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1564502561590},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1564502561590},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1564502561590},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1564502561590},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1564502561591},{"_id":"public/images/进场动画时的设置流程.png","hash":"84cb7f72a67496b081ec08b09476b095798f01a0","modified":1564502561591},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1564502562424},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1564502562435},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1564502562458},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1564502562458},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1564502562458},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1564502562458},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1564502562459},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1564502562459},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1564502562459},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1564502562459},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1564502562459},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1564502562460},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1564502562460},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1564502562460},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1564502562460},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1564502562460},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1564502562460},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1564502562461},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1564502562461},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1564502562461},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1564502562461},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1564502562461},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1564502562461},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1564502562461},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1564502562461},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1564502562461},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1564502562461},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1564502562461},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1564502562462},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1564502562462},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1564502562462},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1564502562462},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1564502562462},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1564502562462},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1564502562462},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1564502562462},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1564502562462},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1564502562463},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1564502562463},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1564502562463},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1564502562463},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1564502562463},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1564502562464},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1564502562464},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1564502562464},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1564502562464},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1564502562464},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1564502562464},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1564502562465},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1564502562465},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1564502562465},{"_id":"public/css/main.css","hash":"fcf09b25582922d356e48e48bc46834a4608fad4","modified":1564502562465},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1564502562465},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1564502562465},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1564502562465},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1564502562465},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1564502562466},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1564502562466},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1564502562466},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1564502562466},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1564502562466},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1564502562466},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1564502562466},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1564502562467},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1564502562467},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1564502562467},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1564502562467},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1564502562467},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1564502562467},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1564502562467},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1564502562467},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1564502562468},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1564502562468},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1564502562468},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1564502562469},{"_id":"public/images/avator.jpg","hash":"7297b814ade099947ce42d07945b78daf54e8e7c","modified":1564502562611},{"_id":"public/images/Fragment的生命周期.png","hash":"6c200e9b68032e4a15fd1e5fd313731750f21e23","modified":1564502562647},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1564502562648}],"Category":[],"Data":[],"Page":[{"title":"标签","date":"2018-03-11T15:19:37.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-03-11 23:19:37\ntype: \"tags\"\n---\n","updated":"2018-03-11T15:23:28.813Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjyq0fezh0001zwv76uerg94q","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android仿IOS打开应用进出场动画开发","date":"2019-07-30T15:48:15.000Z","_content":"\n> 3年前开发Rom时的一个任务，就是仿照IOS打开应用和退出应用的开发过程和思路，可能已经过时，现在拿出来看看以前的思路\n\n\n### 目标\n\n最终效果做到如下的形式: 点击Launcher上的icon，app从Icon的位置开始放大到全屏，观察发现Launcher也有从Icon位置放大的效果;退场时，app界面和Launcher同时缩小到Icon位置\n\n### 设置方法的选择:\n进出场动画和转场动画的本质是一样,都是从一个activity过渡到另一个activity的动画,所不同是进出场动画是在两个app之间的过渡，而且Launcher所在的activity是一个壁纸窗口，这是使用的时候需要注意的。\n    \n#### 三种方法\n- 设置theme中的 android:windowAnimationStyle\n这是最简单方便的方式，只需要我们配置几个动画的xml就ok了，缺点是由于是在主题的里面的静态资源，不能根据实际情况改变动画类型和和设置相关参数。诸多条件限制决定了这种方式不能达到目的。\n- overridePendingTransition方式\n这种方式可以让我们覆盖掉第一种方式设置的动画，优点是我们可以在代码里面动态改变它，但遗憾的是这个方法只受动画的xml文件形式，也无法接受设置动画的参数。\n- ActivityOptions方式\n这种方法是在startActivity的时候，通过ActivityOptions构造出一个Bundle参数，传递给WindowManager，用来覆盖默认的动画，这样就为我们定义转场动画提供了扩展空间。实际查看Launcher的源代码，原生也是这么做的。\n<!--more-->\n\n### 准备\n\n进出场动画的设置流程主要与AMS和WMS有关，主要参考以下博客:\n[android Application Component研究之Activity(二)](http://blog.csdn.net/windskier/article/details/7172710)\n [WindowManagerService动画分析](http://blog.csdn.net/guoqifa29/article/details/49273065) \n\n为了更好的分析动画的设置流程，需要打开WMS和AMS的日志开关\n通过`adb shell dumpsys window -d enable a`打开WMS的日志开关\n通过`adb shell dumpsys activity log a on`打开AMS的日志开关\n\n\n\n### 进场动画\n首先观察进场动画：点击APP的Icon后，整个界面从Icon位置放大，Icon放大到一定程度后可以隐约看到APP的界面，继续放大，app界面逐渐从透明到不透明，最终覆盖全屏。\n\nAndroid原生通过ActivityOptions提供了一个类似的转场动画makeScaleUpAnimation，它的使用如下:\n\n```java\nActivityOptions opts = ActivityOptions.makeScaleUpAnimation(v, left, top , width , height);\nstartActivity(intent, opts.toBundle());\n```\n\n其效果出来只有app放大，而Launcher没有动画效果，找遍资料可以发现android没有提供相关接口。\n\t查看makeScaleUpAnimation方法的源码:\n```java\npublic static ActivityOptions makeScaleUpAnimation(View source,\n        int startX, int startY, int width, int height) {\n    ActivityOptions opts = new ActivityOptions();\n    opts.mPackageName = source.getContext().getPackageName();\n    opts.mAnimationType = ANIM_SCALE_UP;\n    int[] pts = new int[2];\n    source.getLocationOnScreen(pts);\n    opts.mStartX = pts[0] + startX;\n    opts.mStartY = pts[1] + startY;\n    opts.mWidth = width;\n    opts.mHeight = height;\n    return opts;\n}\n```\n发现里面并没有构造一个`Animation`,只是设置了相关位置的相关参数，以及`ANIM_SCALE_UP`这个动画类型的标识，真正构造动画的方法在`com.android.server.wm.AppTransition`里面，这是一个协助`WindowManagerServervice`来设置转场动画的类。当真正需要执行动画时，会从`AppTransition`中加载或构造合适的动画，交由`WindowManagerServervice`来执行。\n\n`AppTransition`每次会加载两个动画，一个是打开(`enter`)动画，另一个是退出(`exit`)动画，从`Launcher`打开`Activity`，对`Activity`来说是`enter`，对`Launcher`就是`exit`，加载`ScaleUp`的动画都会调用AppTransition的`createScaleUpAnimationLocked`:\n\n```java\nprivate Animation createScaleUpAnimationLocked(int transit, boolean enter,int appWidth, int appHeight) {\n    Animation a = null;\n    if (enter) {\n\t    ...\n    }else{\n\t    ...\n    }\n    return a;\n}\n```\n这个方法有几个参数:\n- `transit`: 表示本次过渡动画的类型, 由于`Laucher`是壁纸窗口,所以此时`transit`的值为`TRANSIT_WALLPAPER_CLOSE`\n- `enter`:表示该窗口时进入还是退出,后来加载动画的时候调用两次`createScaleUpAnimationLocked`,两次就是这个参数值不同，一次为true，一次为false\n- `appWidth`, `appHeight`:顾名思义，为app最终的宽高\n\n`createScaleUpAnimationLocked`可以看到进入`enter=true`时的动画，其实就是两个动画的组合，一个放大动画`ScaleAnimation`，一个透明度变化动画(`AlphaAnimation`)，这就是App打开时的动画，而`enter=false`时，这时加载的应该是App打开时Launcher的动画，却只有透明度变化(`AlphaAnimation`)，仿照app放大的动画写一个launcher放大的动画即可:\n\n先看app放大的动画:\n```java\nif (enter) {\n       // Entering app zooms out from the center of the initial rect.\n       float scaleW = mNextAppTransitionStartWidth / (float) appWidth;\n       float scaleH = mNextAppTransitionStartHeight / (float) appHeight;\n       Animation scale = new ScaleAnimation(scaleW, 1, scaleH, 1,\n               computePivot(mNextAppTransitionStartX, scaleW),\n               computePivot(mNextAppTransitionStartY, scaleH));\n               //modify start\n       if(XOS_LANCHER_TRANSITION && transit == TRANSIT_WALLPAPER_CLOSE){\n           scale.setInterpolator(mDecelerateXLauncherInterpolator);\n       }else{\n           scale.setInterpolator(mDecelerateInterpolator);\n       }\n       //modify  end\n        Animation alpha = new AlphaAnimation(0, 1);\n       //modify start\n       if(XOS_LANCHER_TRANSITION && transit == TRANSIT_WALLPAPER_CLOSE){\n           alpha.setInterpolator(mThumbnailXLauncherFadeInInterpolator);\n       }else{\n           alpha.setInterpolator(mThumbnailFadeOutInterpolator);\n       }\n       // modify end\n       AnimationSet set = new AnimationSet(false);\n       set.addAnimation(scale);\n       set.addAnimation(alpha);\n       set.setDetachWallpaper(true);\n       a = set;\n}\n```\n这时我更换了原来的两个动画的`Interpolator`，其中`mDecelerateXLauncherInterpolator = new DecelerateInterpolator(2.5f)`，将放大动画速度的因子调大，以便使减速过程更明显\n\n```\nmThumbnailXLauncherFadeInInterpolator = new Interpolator() {\n      @Override\n      public float getInterpolation(float input) {\n      // Linear response for first fraction, then complete after that.\n          if (input < RECENTS_THUMBNAIL_XLAUNCHER_FADEOUT_FRACTION) {\n              float t = input / RECENTS_THUMBNAIL_XLAUNCHER_FADEOUT_FRACTION;\n              return mLinearOutSlowInInterpolator.getInterpolation(t);\n          }\n          return 1f;\n      }\n  };\n```\n`RECENTS_THUMBNAIL_XLAUNCHER_FADEOUT_FRACTION=0.15`，这样以便app界面能够更快的将背景的Launcher界面上的Icon图标完全覆盖，不至于出现Launcher界面放大时看出变得很大的Icon图标\n\n然后是Launcher的放大动画:\n```\nif(XOS_LANCHER_TRANSITION && transit == TRANSIT_WALLPAPER_CLOSE){\n     //enter app : animation for launcher exit\n     //mNextAppTransitionStartWidth,mNextAppTransitionStartHeight 是通过StartActivity传入的APP Icon的宽高，appWidth，appHeight是app全屏的时的大小\n     float scaleW = mNextAppTransitionStartWidth / (float) appWidth;\n     float scaleH = mNextAppTransitionStartHeight / (float) appHeight;\n     //因为对Launcher来说是从原来的大小放大，所以最终的大小是scaleW和scaleH的倒数\n     float sW = scaleW > 0.001 ? 1 / scaleW : 1000f;\n     float sH = scaleH > 0.001 ? 1 / scaleH : 1000f;\n     //第三和第四个参数是缩放点的中心位置，计算方法和app放大的位置相同，这样才能保证\n     Animation scale = new ScaleAnimation(1f, sW, 1f, sH,\n              computePivot(mNextAppTransitionStartX, scaleW),\n              computePivot(mNextAppTransitionStartY, scaleH));\n      scale.setInterpolator(mDecelerateInterpolator);\n      Animation alpha = new AlphaAnimation(1f, 0.0f);\n      alpha.setDuration(300);\n      alpha.setInterpolator(mThumbnailFadeOutInterpolator);\n      AnimationSet set = new AnimationSet(false);\n      set.addAnimation(scale);\n      set.addAnimation(alpha);\n      set.setDetachWallpaper(true);\n      a = set;\n}\n```\n\n经过这几步修改，进场动画基本完成\n总结:\n- `ActivityOptions.makeScaleUpAnimation`来实现需要的放大动画\n- 原来的`App`放大的动画需要调整`Interpolator`，即放大动画和透明度动画的变化速率\n- 加载Launcher动画时也需要调用`createScaleUpAnimationLocked`方法，只是传入的enter值为false\n- Launcher的动画缩放中心位置和App缩放动画是相同的，但是放大倍数是相反的\n\n### 退场动画\n\n进场动画可以通过`startActivity(intent, opts.toBundle());`传参数到`AppTransition`类中构造对应的方法，而退场时却没有对应的方法，这时候面临几个问题:\n -  怎么设置退场动画\n -  什么时候来设置退场动画\n - 退场动画的位置参数从哪里来\n\n这里看一下进场动画时的设置流程:\n![进场动画时的设置流程](../images/进场动画时的设置流程.png)\n\n可以看到是`ActivityStack`在执行`Resume`的流程时一步步将`ScaleUp`的相关参数设置到AppTranssion中去的。\n所以可以仿照这个流程在`WindowMamagerService`和`AppTransition`中添加一个`overridePendingAppTransitionScaleUp`方法:\n`WindowMamagerService`中添加:\n\n```java\npublic void overridePendingAppTransitionScaleDown(int startX, int startY, int startWidth,\n            int startHeight) {\n        synchronized(mWindowMap) {\n            mAppTransition.overridePendingAppTransitionScaleDown(startX, startY, startWidth,startHeight);\n        }\n    }\n```\nAppTransition中添加:\n```java\nvoid overridePendingAppTransitionScaleDown(int startX, int startY, int startWidth,\n                                                    int startHeight) {\n    if (isTransitionSet()) {\n        mNextAppTransitionType = NEXT_TRANSIT_TYPE_SCALE_DOWN;\n        mNextAppTransitionPackage = null;\n        mNextAppTransitionThumbnail = null;\n        mNextAppTransitionStartX = startX;\n        mNextAppTransitionStartY = startY;\n        mNextAppTransitionStartWidth = startWidth;\n        mNextAppTransitionStartHeight = startHeight;\n        postAnimationCallback();\n        mNextAppTransitionCallback = null;\n    }\n}\n```\n`NEXT_TRANSIT_TYPE_SCALE_DOWN`是我自定义的一个动画，用来表示退场的动画\nAppTransition类中添加:\n\n```java\n Animation loadAnimation(WindowManager.LayoutParams lp, int transit, boolean enter,\n            int appWidth, int appHeight, int orientation, Rect containingFrame, Rect contentInsets,\n            Rect appFrame, boolean isVoiceInteraction) {\n         ....\n            // add start\n        } else if(XOS_LANCHER_TRANSITION && transit == TRANSIT_WALLPAPER_OPEN\n                        && mNextAppTransitionType == NEXT_TRANSIT_TYPE_SCALE_DOWN){\n            a = createScaleDownAnimationLocked(transit, enter, appWidth, appHeight);if (DEBUG_APP_TRANSITIONS || DEBUG_ANIM) Slog.v(TAG,\n                    \"applyAnimation:\"\n                    + \" anim=\" + a + \" nextAppTransition=ANIM_SCALE_DOWN\"\n                    + \" transit=\" + appTransitionToString(transit) + \" isEntrance=\" + enter\n                    + \" Callers=\" + Debug.getCallers(3));\n        //add end\n        }\n        ....\n}\n...\nprivate Animation createScaleDownAnimationLocked(int transit, boolean enter,int appWidth, int appHeight) {\n     ....\n}\n```\n`loadAnimation`用来选择加载哪个动画，而`createScaleDownAnimationLocked`便是真正实现的地方了，也是最重要的地方，需要反复微调效果，放在最后说。\n\n怎么设置怎么设置退场动画解决了，但是什么时候来设置它呢？通过分析log发现，不管进场还是退场的时候其实都会执行一次`AcitivityStack`的`resumeTopActivityInnerLocked`，通过`ActivityRecord.applyOptionsLocked`来试图设置过场动画，只是`AcitivityOption`在用完一次后就置null了，以后无法再次使用，为达到目的，需要将进场时的`AcitivityOption`保存起来。\n这里不能将`AcitivityOptions`保存在`ActivityRecord`里面，因为一个`AcitivityRecord`会对应一个`Acitivity`，而我们打开`app`可能会打开多个`Activity`，退出的时候很有可能不是从进来的`Activity`退出的。这时候就需要将`ActivityOptions`保存在`Task`即`TaskRecord`中\n\n所以我思路是这样的:\n- 打开app的时候，判断前一个`Activity`是否是`Launcher`，表示是从`launcher`打开app，是的话将`AcitivityOptions`保存到当前app所在的`TaskRecord`\n- 退出app的时候，判断后一个`Activity`是否是`Launcher`，表示退出app，是的话将`AcitivityOptions`参数从前一个`TaskRecord`中取出来放入`Launcher`所在`ActivityRecord`，这样`ActivityRecord`就有参数来设置退场动画了\n\n但是在实际操作过程中遇到一个问题，如果将上述的操作放在`resumeTopActivityInnerLocked`中会在很多情况下这个方法是取不到前一个`ActivityRecord`的对象的，但这些操作又要放在`resumeTopActivityInnerLocked`之前。这里思考到在`Acitivity` resume之前，肯定会执行前一个`Activity`的`pause`操作，最后到找一个合适的保存参数的位置即`startPausingLocked`\n\n```java\nfinal boolean startPausingLocked(boolean userLeaving, boolean uiSleeping, boolean resuming,boolean dontWait) {\n\t\t...\n       //add start\n       final TaskRecord prevTask = prev != null ? prev.task : null;\n       final TaskRecord nextTask = next != null ? next.task : null;\n       if (DEBUG_STATES) Slog.v(TAG_STATES, \"Moving to PAUSING: \" + prev+\";next:\"+next+\";prevTask:\"+prevTask);\n       if(XOS_LANCHER_TRANSITION && prev != null && prev.isHomeActivity()){\n\t       //前一个activity是Launcher是，将ActivityOptions保存到下一个TaskRecord中\n        ActivityOptions opt = next != null ? next.pendingOptions : null;\n           if(opt != null && opt.getAnimationType() == ActivityOptions.ANIM_SCALE_UP && nextTask != null){\n               nextTask.updatePendingOptions(opt);\n               if(DEBUG_STATES){\n                   Slog.d(TAG_STATES,\"resumeTopActivityLocked updatePendingOptions to task:\"+opt);\n               }\n           }\n       }\n\t\tif(XOS_LANCHER_TRANSITION && ((next != null && next.isHomeActivity())||next == null)){\n           boolean maySkip = false;\n           if(next == null){\n               maySkip = PowerOffAlarmUtility.isAlarmBoot();\n           }\n           //会存在有些情况获取的下一个AcitivityRecord为null，这些问题nex都是为Launcher的\n            ActivityRecord homeRecord = next != null ? next : mStackSupervisor.getHomeActivity();\n           if(DEBUG_STATES){\n                   Slog.d(TAG_STATES,\"resumeTopActivityLocked maySkip:\"+maySkip+\"; homeRecord:\"+homeRecord);\n           }\n            if(!maySkip && homeRecord != null && prevTask != null && prevTask.mPendingOptions != null){\n               homeRecord.updateScaleOptions(prevTask.mPendingOptions);\n               if(DEBUG_STATES){\n                   Slog.d(TAG_STATES,\"resumeTopActivityLocked updatePendingOptions restore from task:\"+prevTask.mPendingOptions);\n               }\n           }\n       }\n       //add end\n       ...\n}\n```\n这样我们都顺利的记住了进入App和退出App时的位置信息\n\n接下来看`AppTransition.createScaleDownAnimationLocked`方法，它是退场动画的构造。与`createScaleUpAnimationLocked`所构造的动画是相反的。不过会有几个问题：\n\n* 退场动画需要一个合适的减速过程才能达到理想的效果\n\n经过反复试验，最终采用以(0.1,0),(0.1,1)为控制点的三阶贝塞尔曲线\n![Alt text](../images/_1471512031023.png)\n\n* 放慢速度会发现，在退场动画时app界面会在Launcher界面下面，这样会感觉Icon图标变得很巨大，而没有给人App界面缩小，最后变成Icon的错觉\n\n这个需要调试动画时App界面和Launcher界面的Z轴的层次，所以App动画需要设置`set.setZAdjustment(Animation.ZORDER_TOP);`,而Launcher的动画需要设置:`set.setZAdjustment(Animation.ZORDER_NORMAL);`\n\n* 缩放时`Launcher`宽高缩放需要等比，不然会变形，但App的缩放注定又不是等比的，这样会导致App界面消失时由于比`Icon`而残影严重。最后通过单独调节Y轴方向上的缩放速率来减轻残影。\n\n* 最后还有一个关键点，那就是app界面缩小时透明度的变化，它关系到在退场过程中能否给人感觉平滑过渡到Icon图标\n下面是调节透明度变化的Interpolator\n```\nfinal Interpolator xInterploator = new DecelerateInterpolator(3f);\nmThumbnailXLauncherFadeOutInterpolator = new Interpolator() {\n     @Override\n     public float getInterpolation(float input) {\n         // Linear response for first fraction, then complete after that.\n         if(input <= 0.10){//动画开始一段时间app界面保持完全透明\n             return 0f;\n         }\n         if (input <= 0.95f) {\n             float t = (input - 0.10f)/ 0.85f;\n             return xInterploator.getInterpolation(t);//透明度变化经历一个减速过程\n         }\n         return 1f;\n     }\n };\n```\n\n\n最终`createScaleDownAnimationLocked`方法如下:\n\n```java\nprivate Animation createScaleDownAnimationLocked(int transit, boolean enter,\n                                               int appWidth, int appHeight) {\n    //modify  lancher_transition start\n    int startWidth = mNextAppTransitionStartWidth ;\n    int startHeight = mNextAppTransitionStartHeight ;\n    int startX = mNextAppTransitionStartX ;\n    int startY = mNextAppTransitionStartY ;\n    if(startWidth == mAppIconSize){//需要对icon的大小进行一定的修正\n        int inset = 5 ;\n        startWidth = startWidth - inset * 2;\n        startHeight = startWidth;\n        startX = startX + inset;\n        startY = startY + inset;\n    }\n    //modify end\n    Animation a = null;\n    if (!enter) {\n        // Exit app zooms out from the center of Launcher icon rect.\n        //modify lancher_transition start\n        float scaleW = startWidth / (float) appWidth;\n        float scaleH = startHeight / (float) appHeight;\n        Animation scale = new ScaleAnimation(1, scaleW, 1, 1,\n                computePivot(startX, scaleW),\n                computePivot(startY, scaleH));\n        scale.setInterpolator(mFastOutSlowInInterpolator);\n        Animation scale2 = new ScaleAnimation(1, 1, 1, scaleH,\n                computePivot(startX, scaleW),\n                computePivot(startY, scaleH));\n        scale2.setInterpolator(mScaleDownYDecelerateInterpolator);\n        //modify lancher_transition start\n\n        Animation alpha = new AlphaAnimation(1, 0);\n        alpha.setInterpolator(mThumbnailXLauncherFadeOutInterpolator);\n        AnimationSet set = new AnimationSet(false);\n        set.addAnimation(scale);\n        set.addAnimation(scale2);\n        set.addAnimation(alpha);\n        set.setDetachWallpaper(true);\n        set.setZAdjustment(Animation.ZORDER_TOP);\n        a = set;\n    }else{\n\t    float scaleW = startWidth / (float) appWidth;\n        float scaleH = startHeight / (float) appHeight;\n        float sW = scaleW > 0.001 ? 1 / scaleW : 1000f;\n        float sH = scaleH > 0.001 ? 1 / scaleH : 1000f;\n        if(startWidth == startHeight){\n            sW = Math.min(sW,sH);\n            sH = sW;//保存Laucher是等比缩放\n        }\n\t    Animation scale = new ScaleAnimation(sW, 1f, sH, 1f,\n                   computePivot(startX, scaleW),\n                   computePivot(startY, scaleH));\n         scale.setInterpolator(mFastOutSlowInInterpolator);\n\n         Animation alpha = new AlphaAnimation(0.0f, 1f);\n         alpha.setInterpolator(mThumbnailFadeOutInterpolator);\n         AnimationSet set = new AnimationSet(false);\n\t     set.addAnimation(scale);\n          set.addAnimation(alpha);\n          set.setDetachWallpaper(true);\n          set.setZAdjustment(Animation.ZORDER_NORMAL);\n          //modify lancher_transition end\n          a = set;\n     }\n     long duration = 380L;\n    //modify lancher_transition start\n    a.setDuration(duration);\n    a.setFillAfter(true);\n    a.setInterpolator(mDecelerateInterpolator);\n    a.initialize(appWidth, appHeight, appWidth, appHeight);\n    return a;\n }\n```\n\n### 不足之处\n\n主要表现在退场时不够完美\n- 退场时app界面的残影仍然存在，在Icon图标不为方形时明显\n- 由于只app退出时只能回到进场时点击的位置，所以当Launcher上的app图标改变了，然后从任务列表进入app界面，再退出是无法缩放到正确的位置的。","source":"_posts/Android仿IOS打开应用进出场动画开发.md","raw":"---\ntitle: Android仿IOS打开应用进出场动画开发\ndate: 2019-07-30 23:48:15\ntags: Android\n---\n\n> 3年前开发Rom时的一个任务，就是仿照IOS打开应用和退出应用的开发过程和思路，可能已经过时，现在拿出来看看以前的思路\n\n\n### 目标\n\n最终效果做到如下的形式: 点击Launcher上的icon，app从Icon的位置开始放大到全屏，观察发现Launcher也有从Icon位置放大的效果;退场时，app界面和Launcher同时缩小到Icon位置\n\n### 设置方法的选择:\n进出场动画和转场动画的本质是一样,都是从一个activity过渡到另一个activity的动画,所不同是进出场动画是在两个app之间的过渡，而且Launcher所在的activity是一个壁纸窗口，这是使用的时候需要注意的。\n    \n#### 三种方法\n- 设置theme中的 android:windowAnimationStyle\n这是最简单方便的方式，只需要我们配置几个动画的xml就ok了，缺点是由于是在主题的里面的静态资源，不能根据实际情况改变动画类型和和设置相关参数。诸多条件限制决定了这种方式不能达到目的。\n- overridePendingTransition方式\n这种方式可以让我们覆盖掉第一种方式设置的动画，优点是我们可以在代码里面动态改变它，但遗憾的是这个方法只受动画的xml文件形式，也无法接受设置动画的参数。\n- ActivityOptions方式\n这种方法是在startActivity的时候，通过ActivityOptions构造出一个Bundle参数，传递给WindowManager，用来覆盖默认的动画，这样就为我们定义转场动画提供了扩展空间。实际查看Launcher的源代码，原生也是这么做的。\n<!--more-->\n\n### 准备\n\n进出场动画的设置流程主要与AMS和WMS有关，主要参考以下博客:\n[android Application Component研究之Activity(二)](http://blog.csdn.net/windskier/article/details/7172710)\n [WindowManagerService动画分析](http://blog.csdn.net/guoqifa29/article/details/49273065) \n\n为了更好的分析动画的设置流程，需要打开WMS和AMS的日志开关\n通过`adb shell dumpsys window -d enable a`打开WMS的日志开关\n通过`adb shell dumpsys activity log a on`打开AMS的日志开关\n\n\n\n### 进场动画\n首先观察进场动画：点击APP的Icon后，整个界面从Icon位置放大，Icon放大到一定程度后可以隐约看到APP的界面，继续放大，app界面逐渐从透明到不透明，最终覆盖全屏。\n\nAndroid原生通过ActivityOptions提供了一个类似的转场动画makeScaleUpAnimation，它的使用如下:\n\n```java\nActivityOptions opts = ActivityOptions.makeScaleUpAnimation(v, left, top , width , height);\nstartActivity(intent, opts.toBundle());\n```\n\n其效果出来只有app放大，而Launcher没有动画效果，找遍资料可以发现android没有提供相关接口。\n\t查看makeScaleUpAnimation方法的源码:\n```java\npublic static ActivityOptions makeScaleUpAnimation(View source,\n        int startX, int startY, int width, int height) {\n    ActivityOptions opts = new ActivityOptions();\n    opts.mPackageName = source.getContext().getPackageName();\n    opts.mAnimationType = ANIM_SCALE_UP;\n    int[] pts = new int[2];\n    source.getLocationOnScreen(pts);\n    opts.mStartX = pts[0] + startX;\n    opts.mStartY = pts[1] + startY;\n    opts.mWidth = width;\n    opts.mHeight = height;\n    return opts;\n}\n```\n发现里面并没有构造一个`Animation`,只是设置了相关位置的相关参数，以及`ANIM_SCALE_UP`这个动画类型的标识，真正构造动画的方法在`com.android.server.wm.AppTransition`里面，这是一个协助`WindowManagerServervice`来设置转场动画的类。当真正需要执行动画时，会从`AppTransition`中加载或构造合适的动画，交由`WindowManagerServervice`来执行。\n\n`AppTransition`每次会加载两个动画，一个是打开(`enter`)动画，另一个是退出(`exit`)动画，从`Launcher`打开`Activity`，对`Activity`来说是`enter`，对`Launcher`就是`exit`，加载`ScaleUp`的动画都会调用AppTransition的`createScaleUpAnimationLocked`:\n\n```java\nprivate Animation createScaleUpAnimationLocked(int transit, boolean enter,int appWidth, int appHeight) {\n    Animation a = null;\n    if (enter) {\n\t    ...\n    }else{\n\t    ...\n    }\n    return a;\n}\n```\n这个方法有几个参数:\n- `transit`: 表示本次过渡动画的类型, 由于`Laucher`是壁纸窗口,所以此时`transit`的值为`TRANSIT_WALLPAPER_CLOSE`\n- `enter`:表示该窗口时进入还是退出,后来加载动画的时候调用两次`createScaleUpAnimationLocked`,两次就是这个参数值不同，一次为true，一次为false\n- `appWidth`, `appHeight`:顾名思义，为app最终的宽高\n\n`createScaleUpAnimationLocked`可以看到进入`enter=true`时的动画，其实就是两个动画的组合，一个放大动画`ScaleAnimation`，一个透明度变化动画(`AlphaAnimation`)，这就是App打开时的动画，而`enter=false`时，这时加载的应该是App打开时Launcher的动画，却只有透明度变化(`AlphaAnimation`)，仿照app放大的动画写一个launcher放大的动画即可:\n\n先看app放大的动画:\n```java\nif (enter) {\n       // Entering app zooms out from the center of the initial rect.\n       float scaleW = mNextAppTransitionStartWidth / (float) appWidth;\n       float scaleH = mNextAppTransitionStartHeight / (float) appHeight;\n       Animation scale = new ScaleAnimation(scaleW, 1, scaleH, 1,\n               computePivot(mNextAppTransitionStartX, scaleW),\n               computePivot(mNextAppTransitionStartY, scaleH));\n               //modify start\n       if(XOS_LANCHER_TRANSITION && transit == TRANSIT_WALLPAPER_CLOSE){\n           scale.setInterpolator(mDecelerateXLauncherInterpolator);\n       }else{\n           scale.setInterpolator(mDecelerateInterpolator);\n       }\n       //modify  end\n        Animation alpha = new AlphaAnimation(0, 1);\n       //modify start\n       if(XOS_LANCHER_TRANSITION && transit == TRANSIT_WALLPAPER_CLOSE){\n           alpha.setInterpolator(mThumbnailXLauncherFadeInInterpolator);\n       }else{\n           alpha.setInterpolator(mThumbnailFadeOutInterpolator);\n       }\n       // modify end\n       AnimationSet set = new AnimationSet(false);\n       set.addAnimation(scale);\n       set.addAnimation(alpha);\n       set.setDetachWallpaper(true);\n       a = set;\n}\n```\n这时我更换了原来的两个动画的`Interpolator`，其中`mDecelerateXLauncherInterpolator = new DecelerateInterpolator(2.5f)`，将放大动画速度的因子调大，以便使减速过程更明显\n\n```\nmThumbnailXLauncherFadeInInterpolator = new Interpolator() {\n      @Override\n      public float getInterpolation(float input) {\n      // Linear response for first fraction, then complete after that.\n          if (input < RECENTS_THUMBNAIL_XLAUNCHER_FADEOUT_FRACTION) {\n              float t = input / RECENTS_THUMBNAIL_XLAUNCHER_FADEOUT_FRACTION;\n              return mLinearOutSlowInInterpolator.getInterpolation(t);\n          }\n          return 1f;\n      }\n  };\n```\n`RECENTS_THUMBNAIL_XLAUNCHER_FADEOUT_FRACTION=0.15`，这样以便app界面能够更快的将背景的Launcher界面上的Icon图标完全覆盖，不至于出现Launcher界面放大时看出变得很大的Icon图标\n\n然后是Launcher的放大动画:\n```\nif(XOS_LANCHER_TRANSITION && transit == TRANSIT_WALLPAPER_CLOSE){\n     //enter app : animation for launcher exit\n     //mNextAppTransitionStartWidth,mNextAppTransitionStartHeight 是通过StartActivity传入的APP Icon的宽高，appWidth，appHeight是app全屏的时的大小\n     float scaleW = mNextAppTransitionStartWidth / (float) appWidth;\n     float scaleH = mNextAppTransitionStartHeight / (float) appHeight;\n     //因为对Launcher来说是从原来的大小放大，所以最终的大小是scaleW和scaleH的倒数\n     float sW = scaleW > 0.001 ? 1 / scaleW : 1000f;\n     float sH = scaleH > 0.001 ? 1 / scaleH : 1000f;\n     //第三和第四个参数是缩放点的中心位置，计算方法和app放大的位置相同，这样才能保证\n     Animation scale = new ScaleAnimation(1f, sW, 1f, sH,\n              computePivot(mNextAppTransitionStartX, scaleW),\n              computePivot(mNextAppTransitionStartY, scaleH));\n      scale.setInterpolator(mDecelerateInterpolator);\n      Animation alpha = new AlphaAnimation(1f, 0.0f);\n      alpha.setDuration(300);\n      alpha.setInterpolator(mThumbnailFadeOutInterpolator);\n      AnimationSet set = new AnimationSet(false);\n      set.addAnimation(scale);\n      set.addAnimation(alpha);\n      set.setDetachWallpaper(true);\n      a = set;\n}\n```\n\n经过这几步修改，进场动画基本完成\n总结:\n- `ActivityOptions.makeScaleUpAnimation`来实现需要的放大动画\n- 原来的`App`放大的动画需要调整`Interpolator`，即放大动画和透明度动画的变化速率\n- 加载Launcher动画时也需要调用`createScaleUpAnimationLocked`方法，只是传入的enter值为false\n- Launcher的动画缩放中心位置和App缩放动画是相同的，但是放大倍数是相反的\n\n### 退场动画\n\n进场动画可以通过`startActivity(intent, opts.toBundle());`传参数到`AppTransition`类中构造对应的方法，而退场时却没有对应的方法，这时候面临几个问题:\n -  怎么设置退场动画\n -  什么时候来设置退场动画\n - 退场动画的位置参数从哪里来\n\n这里看一下进场动画时的设置流程:\n![进场动画时的设置流程](../images/进场动画时的设置流程.png)\n\n可以看到是`ActivityStack`在执行`Resume`的流程时一步步将`ScaleUp`的相关参数设置到AppTranssion中去的。\n所以可以仿照这个流程在`WindowMamagerService`和`AppTransition`中添加一个`overridePendingAppTransitionScaleUp`方法:\n`WindowMamagerService`中添加:\n\n```java\npublic void overridePendingAppTransitionScaleDown(int startX, int startY, int startWidth,\n            int startHeight) {\n        synchronized(mWindowMap) {\n            mAppTransition.overridePendingAppTransitionScaleDown(startX, startY, startWidth,startHeight);\n        }\n    }\n```\nAppTransition中添加:\n```java\nvoid overridePendingAppTransitionScaleDown(int startX, int startY, int startWidth,\n                                                    int startHeight) {\n    if (isTransitionSet()) {\n        mNextAppTransitionType = NEXT_TRANSIT_TYPE_SCALE_DOWN;\n        mNextAppTransitionPackage = null;\n        mNextAppTransitionThumbnail = null;\n        mNextAppTransitionStartX = startX;\n        mNextAppTransitionStartY = startY;\n        mNextAppTransitionStartWidth = startWidth;\n        mNextAppTransitionStartHeight = startHeight;\n        postAnimationCallback();\n        mNextAppTransitionCallback = null;\n    }\n}\n```\n`NEXT_TRANSIT_TYPE_SCALE_DOWN`是我自定义的一个动画，用来表示退场的动画\nAppTransition类中添加:\n\n```java\n Animation loadAnimation(WindowManager.LayoutParams lp, int transit, boolean enter,\n            int appWidth, int appHeight, int orientation, Rect containingFrame, Rect contentInsets,\n            Rect appFrame, boolean isVoiceInteraction) {\n         ....\n            // add start\n        } else if(XOS_LANCHER_TRANSITION && transit == TRANSIT_WALLPAPER_OPEN\n                        && mNextAppTransitionType == NEXT_TRANSIT_TYPE_SCALE_DOWN){\n            a = createScaleDownAnimationLocked(transit, enter, appWidth, appHeight);if (DEBUG_APP_TRANSITIONS || DEBUG_ANIM) Slog.v(TAG,\n                    \"applyAnimation:\"\n                    + \" anim=\" + a + \" nextAppTransition=ANIM_SCALE_DOWN\"\n                    + \" transit=\" + appTransitionToString(transit) + \" isEntrance=\" + enter\n                    + \" Callers=\" + Debug.getCallers(3));\n        //add end\n        }\n        ....\n}\n...\nprivate Animation createScaleDownAnimationLocked(int transit, boolean enter,int appWidth, int appHeight) {\n     ....\n}\n```\n`loadAnimation`用来选择加载哪个动画，而`createScaleDownAnimationLocked`便是真正实现的地方了，也是最重要的地方，需要反复微调效果，放在最后说。\n\n怎么设置怎么设置退场动画解决了，但是什么时候来设置它呢？通过分析log发现，不管进场还是退场的时候其实都会执行一次`AcitivityStack`的`resumeTopActivityInnerLocked`，通过`ActivityRecord.applyOptionsLocked`来试图设置过场动画，只是`AcitivityOption`在用完一次后就置null了，以后无法再次使用，为达到目的，需要将进场时的`AcitivityOption`保存起来。\n这里不能将`AcitivityOptions`保存在`ActivityRecord`里面，因为一个`AcitivityRecord`会对应一个`Acitivity`，而我们打开`app`可能会打开多个`Activity`，退出的时候很有可能不是从进来的`Activity`退出的。这时候就需要将`ActivityOptions`保存在`Task`即`TaskRecord`中\n\n所以我思路是这样的:\n- 打开app的时候，判断前一个`Activity`是否是`Launcher`，表示是从`launcher`打开app，是的话将`AcitivityOptions`保存到当前app所在的`TaskRecord`\n- 退出app的时候，判断后一个`Activity`是否是`Launcher`，表示退出app，是的话将`AcitivityOptions`参数从前一个`TaskRecord`中取出来放入`Launcher`所在`ActivityRecord`，这样`ActivityRecord`就有参数来设置退场动画了\n\n但是在实际操作过程中遇到一个问题，如果将上述的操作放在`resumeTopActivityInnerLocked`中会在很多情况下这个方法是取不到前一个`ActivityRecord`的对象的，但这些操作又要放在`resumeTopActivityInnerLocked`之前。这里思考到在`Acitivity` resume之前，肯定会执行前一个`Activity`的`pause`操作，最后到找一个合适的保存参数的位置即`startPausingLocked`\n\n```java\nfinal boolean startPausingLocked(boolean userLeaving, boolean uiSleeping, boolean resuming,boolean dontWait) {\n\t\t...\n       //add start\n       final TaskRecord prevTask = prev != null ? prev.task : null;\n       final TaskRecord nextTask = next != null ? next.task : null;\n       if (DEBUG_STATES) Slog.v(TAG_STATES, \"Moving to PAUSING: \" + prev+\";next:\"+next+\";prevTask:\"+prevTask);\n       if(XOS_LANCHER_TRANSITION && prev != null && prev.isHomeActivity()){\n\t       //前一个activity是Launcher是，将ActivityOptions保存到下一个TaskRecord中\n        ActivityOptions opt = next != null ? next.pendingOptions : null;\n           if(opt != null && opt.getAnimationType() == ActivityOptions.ANIM_SCALE_UP && nextTask != null){\n               nextTask.updatePendingOptions(opt);\n               if(DEBUG_STATES){\n                   Slog.d(TAG_STATES,\"resumeTopActivityLocked updatePendingOptions to task:\"+opt);\n               }\n           }\n       }\n\t\tif(XOS_LANCHER_TRANSITION && ((next != null && next.isHomeActivity())||next == null)){\n           boolean maySkip = false;\n           if(next == null){\n               maySkip = PowerOffAlarmUtility.isAlarmBoot();\n           }\n           //会存在有些情况获取的下一个AcitivityRecord为null，这些问题nex都是为Launcher的\n            ActivityRecord homeRecord = next != null ? next : mStackSupervisor.getHomeActivity();\n           if(DEBUG_STATES){\n                   Slog.d(TAG_STATES,\"resumeTopActivityLocked maySkip:\"+maySkip+\"; homeRecord:\"+homeRecord);\n           }\n            if(!maySkip && homeRecord != null && prevTask != null && prevTask.mPendingOptions != null){\n               homeRecord.updateScaleOptions(prevTask.mPendingOptions);\n               if(DEBUG_STATES){\n                   Slog.d(TAG_STATES,\"resumeTopActivityLocked updatePendingOptions restore from task:\"+prevTask.mPendingOptions);\n               }\n           }\n       }\n       //add end\n       ...\n}\n```\n这样我们都顺利的记住了进入App和退出App时的位置信息\n\n接下来看`AppTransition.createScaleDownAnimationLocked`方法，它是退场动画的构造。与`createScaleUpAnimationLocked`所构造的动画是相反的。不过会有几个问题：\n\n* 退场动画需要一个合适的减速过程才能达到理想的效果\n\n经过反复试验，最终采用以(0.1,0),(0.1,1)为控制点的三阶贝塞尔曲线\n![Alt text](../images/_1471512031023.png)\n\n* 放慢速度会发现，在退场动画时app界面会在Launcher界面下面，这样会感觉Icon图标变得很巨大，而没有给人App界面缩小，最后变成Icon的错觉\n\n这个需要调试动画时App界面和Launcher界面的Z轴的层次，所以App动画需要设置`set.setZAdjustment(Animation.ZORDER_TOP);`,而Launcher的动画需要设置:`set.setZAdjustment(Animation.ZORDER_NORMAL);`\n\n* 缩放时`Launcher`宽高缩放需要等比，不然会变形，但App的缩放注定又不是等比的，这样会导致App界面消失时由于比`Icon`而残影严重。最后通过单独调节Y轴方向上的缩放速率来减轻残影。\n\n* 最后还有一个关键点，那就是app界面缩小时透明度的变化，它关系到在退场过程中能否给人感觉平滑过渡到Icon图标\n下面是调节透明度变化的Interpolator\n```\nfinal Interpolator xInterploator = new DecelerateInterpolator(3f);\nmThumbnailXLauncherFadeOutInterpolator = new Interpolator() {\n     @Override\n     public float getInterpolation(float input) {\n         // Linear response for first fraction, then complete after that.\n         if(input <= 0.10){//动画开始一段时间app界面保持完全透明\n             return 0f;\n         }\n         if (input <= 0.95f) {\n             float t = (input - 0.10f)/ 0.85f;\n             return xInterploator.getInterpolation(t);//透明度变化经历一个减速过程\n         }\n         return 1f;\n     }\n };\n```\n\n\n最终`createScaleDownAnimationLocked`方法如下:\n\n```java\nprivate Animation createScaleDownAnimationLocked(int transit, boolean enter,\n                                               int appWidth, int appHeight) {\n    //modify  lancher_transition start\n    int startWidth = mNextAppTransitionStartWidth ;\n    int startHeight = mNextAppTransitionStartHeight ;\n    int startX = mNextAppTransitionStartX ;\n    int startY = mNextAppTransitionStartY ;\n    if(startWidth == mAppIconSize){//需要对icon的大小进行一定的修正\n        int inset = 5 ;\n        startWidth = startWidth - inset * 2;\n        startHeight = startWidth;\n        startX = startX + inset;\n        startY = startY + inset;\n    }\n    //modify end\n    Animation a = null;\n    if (!enter) {\n        // Exit app zooms out from the center of Launcher icon rect.\n        //modify lancher_transition start\n        float scaleW = startWidth / (float) appWidth;\n        float scaleH = startHeight / (float) appHeight;\n        Animation scale = new ScaleAnimation(1, scaleW, 1, 1,\n                computePivot(startX, scaleW),\n                computePivot(startY, scaleH));\n        scale.setInterpolator(mFastOutSlowInInterpolator);\n        Animation scale2 = new ScaleAnimation(1, 1, 1, scaleH,\n                computePivot(startX, scaleW),\n                computePivot(startY, scaleH));\n        scale2.setInterpolator(mScaleDownYDecelerateInterpolator);\n        //modify lancher_transition start\n\n        Animation alpha = new AlphaAnimation(1, 0);\n        alpha.setInterpolator(mThumbnailXLauncherFadeOutInterpolator);\n        AnimationSet set = new AnimationSet(false);\n        set.addAnimation(scale);\n        set.addAnimation(scale2);\n        set.addAnimation(alpha);\n        set.setDetachWallpaper(true);\n        set.setZAdjustment(Animation.ZORDER_TOP);\n        a = set;\n    }else{\n\t    float scaleW = startWidth / (float) appWidth;\n        float scaleH = startHeight / (float) appHeight;\n        float sW = scaleW > 0.001 ? 1 / scaleW : 1000f;\n        float sH = scaleH > 0.001 ? 1 / scaleH : 1000f;\n        if(startWidth == startHeight){\n            sW = Math.min(sW,sH);\n            sH = sW;//保存Laucher是等比缩放\n        }\n\t    Animation scale = new ScaleAnimation(sW, 1f, sH, 1f,\n                   computePivot(startX, scaleW),\n                   computePivot(startY, scaleH));\n         scale.setInterpolator(mFastOutSlowInInterpolator);\n\n         Animation alpha = new AlphaAnimation(0.0f, 1f);\n         alpha.setInterpolator(mThumbnailFadeOutInterpolator);\n         AnimationSet set = new AnimationSet(false);\n\t     set.addAnimation(scale);\n          set.addAnimation(alpha);\n          set.setDetachWallpaper(true);\n          set.setZAdjustment(Animation.ZORDER_NORMAL);\n          //modify lancher_transition end\n          a = set;\n     }\n     long duration = 380L;\n    //modify lancher_transition start\n    a.setDuration(duration);\n    a.setFillAfter(true);\n    a.setInterpolator(mDecelerateInterpolator);\n    a.initialize(appWidth, appHeight, appWidth, appHeight);\n    return a;\n }\n```\n\n### 不足之处\n\n主要表现在退场时不够完美\n- 退场时app界面的残影仍然存在，在Icon图标不为方形时明显\n- 由于只app退出时只能回到进场时点击的位置，所以当Launcher上的app图标改变了，然后从任务列表进入app界面，再退出是无法缩放到正确的位置的。","slug":"Android仿IOS打开应用进出场动画开发","published":1,"updated":"2019-07-30T16:04:33.966Z","_id":"cjyq0fez80000zwv7gq6l5d12","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>3年前开发Rom时的一个任务，就是仿照IOS打开应用和退出应用的开发过程和思路，可能已经过时，现在拿出来看看以前的思路</p>\n</blockquote>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>最终效果做到如下的形式: 点击Launcher上的icon，app从Icon的位置开始放大到全屏，观察发现Launcher也有从Icon位置放大的效果;退场时，app界面和Launcher同时缩小到Icon位置</p>\n<h3 id=\"设置方法的选择\"><a href=\"#设置方法的选择\" class=\"headerlink\" title=\"设置方法的选择:\"></a>设置方法的选择:</h3><p>进出场动画和转场动画的本质是一样,都是从一个activity过渡到另一个activity的动画,所不同是进出场动画是在两个app之间的过渡，而且Launcher所在的activity是一个壁纸窗口，这是使用的时候需要注意的。</p>\n<h4 id=\"三种方法\"><a href=\"#三种方法\" class=\"headerlink\" title=\"三种方法\"></a>三种方法</h4><ul>\n<li>设置theme中的 android:windowAnimationStyle<br>这是最简单方便的方式，只需要我们配置几个动画的xml就ok了，缺点是由于是在主题的里面的静态资源，不能根据实际情况改变动画类型和和设置相关参数。诸多条件限制决定了这种方式不能达到目的。</li>\n<li>overridePendingTransition方式<br>这种方式可以让我们覆盖掉第一种方式设置的动画，优点是我们可以在代码里面动态改变它，但遗憾的是这个方法只受动画的xml文件形式，也无法接受设置动画的参数。</li>\n<li>ActivityOptions方式<br>这种方法是在startActivity的时候，通过ActivityOptions构造出一个Bundle参数，传递给WindowManager，用来覆盖默认的动画，这样就为我们定义转场动画提供了扩展空间。实际查看Launcher的源代码，原生也是这么做的。<a id=\"more\"></a>\n</li>\n</ul>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>进出场动画的设置流程主要与AMS和WMS有关，主要参考以下博客:<br><a href=\"http://blog.csdn.net/windskier/article/details/7172710\" target=\"_blank\" rel=\"noopener\">android Application Component研究之Activity(二)</a><br> <a href=\"http://blog.csdn.net/guoqifa29/article/details/49273065\" target=\"_blank\" rel=\"noopener\">WindowManagerService动画分析</a> </p>\n<p>为了更好的分析动画的设置流程，需要打开WMS和AMS的日志开关<br>通过<code>adb shell dumpsys window -d enable a</code>打开WMS的日志开关<br>通过<code>adb shell dumpsys activity log a on</code>打开AMS的日志开关</p>\n<h3 id=\"进场动画\"><a href=\"#进场动画\" class=\"headerlink\" title=\"进场动画\"></a>进场动画</h3><p>首先观察进场动画：点击APP的Icon后，整个界面从Icon位置放大，Icon放大到一定程度后可以隐约看到APP的界面，继续放大，app界面逐渐从透明到不透明，最终覆盖全屏。</p>\n<p>Android原生通过ActivityOptions提供了一个类似的转场动画makeScaleUpAnimation，它的使用如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ActivityOptions opts = ActivityOptions.makeScaleUpAnimation(v, left, top , width , height);</span><br><span class=\"line\">startActivity(intent, opts.toBundle());</span><br></pre></td></tr></table></figure>\n<p>其效果出来只有app放大，而Launcher没有动画效果，找遍资料可以发现android没有提供相关接口。<br>    查看makeScaleUpAnimation方法的源码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ActivityOptions <span class=\"title\">makeScaleUpAnimation</span><span class=\"params\">(View source,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> startX, <span class=\"keyword\">int</span> startY, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">    ActivityOptions opts = <span class=\"keyword\">new</span> ActivityOptions();</span><br><span class=\"line\">    opts.mPackageName = source.getContext().getPackageName();</span><br><span class=\"line\">    opts.mAnimationType = ANIM_SCALE_UP;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] pts = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    source.getLocationOnScreen(pts);</span><br><span class=\"line\">    opts.mStartX = pts[<span class=\"number\">0</span>] + startX;</span><br><span class=\"line\">    opts.mStartY = pts[<span class=\"number\">1</span>] + startY;</span><br><span class=\"line\">    opts.mWidth = width;</span><br><span class=\"line\">    opts.mHeight = height;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> opts;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>发现里面并没有构造一个<code>Animation</code>,只是设置了相关位置的相关参数，以及<code>ANIM_SCALE_UP</code>这个动画类型的标识，真正构造动画的方法在<code>com.android.server.wm.AppTransition</code>里面，这是一个协助<code>WindowManagerServervice</code>来设置转场动画的类。当真正需要执行动画时，会从<code>AppTransition</code>中加载或构造合适的动画，交由<code>WindowManagerServervice</code>来执行。</p>\n<p><code>AppTransition</code>每次会加载两个动画，一个是打开(<code>enter</code>)动画，另一个是退出(<code>exit</code>)动画，从<code>Launcher</code>打开<code>Activity</code>，对<code>Activity</code>来说是<code>enter</code>，对<code>Launcher</code>就是<code>exit</code>，加载<code>ScaleUp</code>的动画都会调用AppTransition的<code>createScaleUpAnimationLocked</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Animation <span class=\"title\">createScaleUpAnimationLocked</span><span class=\"params\">(<span class=\"keyword\">int</span> transit, <span class=\"keyword\">boolean</span> enter,<span class=\"keyword\">int</span> appWidth, <span class=\"keyword\">int</span> appHeight)</span> </span>&#123;</span><br><span class=\"line\">    Animation a = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (enter) &#123;</span><br><span class=\"line\">\t    ...</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t    ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法有几个参数:</p>\n<ul>\n<li><code>transit</code>: 表示本次过渡动画的类型, 由于<code>Laucher</code>是壁纸窗口,所以此时<code>transit</code>的值为<code>TRANSIT_WALLPAPER_CLOSE</code></li>\n<li><code>enter</code>:表示该窗口时进入还是退出,后来加载动画的时候调用两次<code>createScaleUpAnimationLocked</code>,两次就是这个参数值不同，一次为true，一次为false</li>\n<li><code>appWidth</code>, <code>appHeight</code>:顾名思义，为app最终的宽高</li>\n</ul>\n<p><code>createScaleUpAnimationLocked</code>可以看到进入<code>enter=true</code>时的动画，其实就是两个动画的组合，一个放大动画<code>ScaleAnimation</code>，一个透明度变化动画(<code>AlphaAnimation</code>)，这就是App打开时的动画，而<code>enter=false</code>时，这时加载的应该是App打开时Launcher的动画，却只有透明度变化(<code>AlphaAnimation</code>)，仿照app放大的动画写一个launcher放大的动画即可:</p>\n<p>先看app放大的动画:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (enter) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// Entering app zooms out from the center of the initial rect.</span></span><br><span class=\"line\">       <span class=\"keyword\">float</span> scaleW = mNextAppTransitionStartWidth / (<span class=\"keyword\">float</span>) appWidth;</span><br><span class=\"line\">       <span class=\"keyword\">float</span> scaleH = mNextAppTransitionStartHeight / (<span class=\"keyword\">float</span>) appHeight;</span><br><span class=\"line\">       Animation scale = <span class=\"keyword\">new</span> ScaleAnimation(scaleW, <span class=\"number\">1</span>, scaleH, <span class=\"number\">1</span>,</span><br><span class=\"line\">               computePivot(mNextAppTransitionStartX, scaleW),</span><br><span class=\"line\">               computePivot(mNextAppTransitionStartY, scaleH));</span><br><span class=\"line\">               <span class=\"comment\">//modify start</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span>(XOS_LANCHER_TRANSITION &amp;&amp; transit == TRANSIT_WALLPAPER_CLOSE)&#123;</span><br><span class=\"line\">           scale.setInterpolator(mDecelerateXLauncherInterpolator);</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           scale.setInterpolator(mDecelerateInterpolator);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//modify  end</span></span><br><span class=\"line\">        Animation alpha = <span class=\"keyword\">new</span> AlphaAnimation(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"comment\">//modify start</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span>(XOS_LANCHER_TRANSITION &amp;&amp; transit == TRANSIT_WALLPAPER_CLOSE)&#123;</span><br><span class=\"line\">           alpha.setInterpolator(mThumbnailXLauncherFadeInInterpolator);</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           alpha.setInterpolator(mThumbnailFadeOutInterpolator);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">// modify end</span></span><br><span class=\"line\">       AnimationSet set = <span class=\"keyword\">new</span> AnimationSet(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">       set.addAnimation(scale);</span><br><span class=\"line\">       set.addAnimation(alpha);</span><br><span class=\"line\">       set.setDetachWallpaper(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">       a = set;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这时我更换了原来的两个动画的<code>Interpolator</code>，其中<code>mDecelerateXLauncherInterpolator = new DecelerateInterpolator(2.5f)</code>，将放大动画速度的因子调大，以便使减速过程更明显</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mThumbnailXLauncherFadeInInterpolator = new Interpolator() &#123;</span><br><span class=\"line\">      @Override</span><br><span class=\"line\">      public float getInterpolation(float input) &#123;</span><br><span class=\"line\">      // Linear response for first fraction, then complete after that.</span><br><span class=\"line\">          if (input &lt; RECENTS_THUMBNAIL_XLAUNCHER_FADEOUT_FRACTION) &#123;</span><br><span class=\"line\">              float t = input / RECENTS_THUMBNAIL_XLAUNCHER_FADEOUT_FRACTION;</span><br><span class=\"line\">              return mLinearOutSlowInInterpolator.getInterpolation(t);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          return 1f;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p><code>RECENTS_THUMBNAIL_XLAUNCHER_FADEOUT_FRACTION=0.15</code>，这样以便app界面能够更快的将背景的Launcher界面上的Icon图标完全覆盖，不至于出现Launcher界面放大时看出变得很大的Icon图标</p>\n<p>然后是Launcher的放大动画:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(XOS_LANCHER_TRANSITION &amp;&amp; transit == TRANSIT_WALLPAPER_CLOSE)&#123;</span><br><span class=\"line\">     //enter app : animation for launcher exit</span><br><span class=\"line\">     //mNextAppTransitionStartWidth,mNextAppTransitionStartHeight 是通过StartActivity传入的APP Icon的宽高，appWidth，appHeight是app全屏的时的大小</span><br><span class=\"line\">     float scaleW = mNextAppTransitionStartWidth / (float) appWidth;</span><br><span class=\"line\">     float scaleH = mNextAppTransitionStartHeight / (float) appHeight;</span><br><span class=\"line\">     //因为对Launcher来说是从原来的大小放大，所以最终的大小是scaleW和scaleH的倒数</span><br><span class=\"line\">     float sW = scaleW &gt; 0.001 ? 1 / scaleW : 1000f;</span><br><span class=\"line\">     float sH = scaleH &gt; 0.001 ? 1 / scaleH : 1000f;</span><br><span class=\"line\">     //第三和第四个参数是缩放点的中心位置，计算方法和app放大的位置相同，这样才能保证</span><br><span class=\"line\">     Animation scale = new ScaleAnimation(1f, sW, 1f, sH,</span><br><span class=\"line\">              computePivot(mNextAppTransitionStartX, scaleW),</span><br><span class=\"line\">              computePivot(mNextAppTransitionStartY, scaleH));</span><br><span class=\"line\">      scale.setInterpolator(mDecelerateInterpolator);</span><br><span class=\"line\">      Animation alpha = new AlphaAnimation(1f, 0.0f);</span><br><span class=\"line\">      alpha.setDuration(300);</span><br><span class=\"line\">      alpha.setInterpolator(mThumbnailFadeOutInterpolator);</span><br><span class=\"line\">      AnimationSet set = new AnimationSet(false);</span><br><span class=\"line\">      set.addAnimation(scale);</span><br><span class=\"line\">      set.addAnimation(alpha);</span><br><span class=\"line\">      set.setDetachWallpaper(true);</span><br><span class=\"line\">      a = set;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>经过这几步修改，进场动画基本完成<br>总结:</p>\n<ul>\n<li><code>ActivityOptions.makeScaleUpAnimation</code>来实现需要的放大动画</li>\n<li>原来的<code>App</code>放大的动画需要调整<code>Interpolator</code>，即放大动画和透明度动画的变化速率</li>\n<li>加载Launcher动画时也需要调用<code>createScaleUpAnimationLocked</code>方法，只是传入的enter值为false</li>\n<li>Launcher的动画缩放中心位置和App缩放动画是相同的，但是放大倍数是相反的</li>\n</ul>\n<h3 id=\"退场动画\"><a href=\"#退场动画\" class=\"headerlink\" title=\"退场动画\"></a>退场动画</h3><p>进场动画可以通过<code>startActivity(intent, opts.toBundle());</code>传参数到<code>AppTransition</code>类中构造对应的方法，而退场时却没有对应的方法，这时候面临几个问题:</p>\n<ul>\n<li>怎么设置退场动画</li>\n<li>什么时候来设置退场动画</li>\n<li>退场动画的位置参数从哪里来</li>\n</ul>\n<p>这里看一下进场动画时的设置流程:<br><img src=\"../images/进场动画时的设置流程.png\" alt=\"进场动画时的设置流程\"></p>\n<p>可以看到是<code>ActivityStack</code>在执行<code>Resume</code>的流程时一步步将<code>ScaleUp</code>的相关参数设置到AppTranssion中去的。<br>所以可以仿照这个流程在<code>WindowMamagerService</code>和<code>AppTransition</code>中添加一个<code>overridePendingAppTransitionScaleUp</code>方法:<br><code>WindowMamagerService</code>中添加:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">overridePendingAppTransitionScaleDown</span><span class=\"params\">(<span class=\"keyword\">int</span> startX, <span class=\"keyword\">int</span> startY, <span class=\"keyword\">int</span> startWidth,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">int</span> startHeight)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(mWindowMap) &#123;</span><br><span class=\"line\">            mAppTransition.overridePendingAppTransitionScaleDown(startX, startY, startWidth,startHeight);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>AppTransition中添加:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">overridePendingAppTransitionScaleDown</span><span class=\"params\">(<span class=\"keyword\">int</span> startX, <span class=\"keyword\">int</span> startY, <span class=\"keyword\">int</span> startWidth,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                    <span class=\"keyword\">int</span> startHeight)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isTransitionSet()) &#123;</span><br><span class=\"line\">        mNextAppTransitionType = NEXT_TRANSIT_TYPE_SCALE_DOWN;</span><br><span class=\"line\">        mNextAppTransitionPackage = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        mNextAppTransitionThumbnail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        mNextAppTransitionStartX = startX;</span><br><span class=\"line\">        mNextAppTransitionStartY = startY;</span><br><span class=\"line\">        mNextAppTransitionStartWidth = startWidth;</span><br><span class=\"line\">        mNextAppTransitionStartHeight = startHeight;</span><br><span class=\"line\">        postAnimationCallback();</span><br><span class=\"line\">        mNextAppTransitionCallback = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>NEXT_TRANSIT_TYPE_SCALE_DOWN</code>是我自定义的一个动画，用来表示退场的动画<br>AppTransition类中添加:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\">Animation <span class=\"title\">loadAnimation</span><span class=\"params\">(WindowManager.LayoutParams lp, <span class=\"keyword\">int</span> transit, <span class=\"keyword\">boolean</span> enter,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">int</span> appWidth, <span class=\"keyword\">int</span> appHeight, <span class=\"keyword\">int</span> orientation, Rect containingFrame, Rect contentInsets,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            Rect appFrame, <span class=\"keyword\">boolean</span> isVoiceInteraction)</span> </span>&#123;</span><br><span class=\"line\">         ....</span><br><span class=\"line\">            <span class=\"comment\">// add start</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(XOS_LANCHER_TRANSITION &amp;&amp; transit == TRANSIT_WALLPAPER_OPEN</span><br><span class=\"line\">                        &amp;&amp; mNextAppTransitionType == NEXT_TRANSIT_TYPE_SCALE_DOWN)&#123;</span><br><span class=\"line\">            a = createScaleDownAnimationLocked(transit, enter, appWidth, appHeight);<span class=\"keyword\">if</span> (DEBUG_APP_TRANSITIONS || DEBUG_ANIM) Slog.v(TAG,</span><br><span class=\"line\">                    <span class=\"string\">\"applyAnimation:\"</span></span><br><span class=\"line\">                    + <span class=\"string\">\" anim=\"</span> + a + <span class=\"string\">\" nextAppTransition=ANIM_SCALE_DOWN\"</span></span><br><span class=\"line\">                    + <span class=\"string\">\" transit=\"</span> + appTransitionToString(transit) + <span class=\"string\">\" isEntrance=\"</span> + enter</span><br><span class=\"line\">                    + <span class=\"string\">\" Callers=\"</span> + Debug.getCallers(<span class=\"number\">3</span>));</span><br><span class=\"line\">        <span class=\"comment\">//add end</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Animation <span class=\"title\">createScaleDownAnimationLocked</span><span class=\"params\">(<span class=\"keyword\">int</span> transit, <span class=\"keyword\">boolean</span> enter,<span class=\"keyword\">int</span> appWidth, <span class=\"keyword\">int</span> appHeight)</span> </span>&#123;</span><br><span class=\"line\">     ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>loadAnimation</code>用来选择加载哪个动画，而<code>createScaleDownAnimationLocked</code>便是真正实现的地方了，也是最重要的地方，需要反复微调效果，放在最后说。</p>\n<p>怎么设置怎么设置退场动画解决了，但是什么时候来设置它呢？通过分析log发现，不管进场还是退场的时候其实都会执行一次<code>AcitivityStack</code>的<code>resumeTopActivityInnerLocked</code>，通过<code>ActivityRecord.applyOptionsLocked</code>来试图设置过场动画，只是<code>AcitivityOption</code>在用完一次后就置null了，以后无法再次使用，为达到目的，需要将进场时的<code>AcitivityOption</code>保存起来。<br>这里不能将<code>AcitivityOptions</code>保存在<code>ActivityRecord</code>里面，因为一个<code>AcitivityRecord</code>会对应一个<code>Acitivity</code>，而我们打开<code>app</code>可能会打开多个<code>Activity</code>，退出的时候很有可能不是从进来的<code>Activity</code>退出的。这时候就需要将<code>ActivityOptions</code>保存在<code>Task</code>即<code>TaskRecord</code>中</p>\n<p>所以我思路是这样的:</p>\n<ul>\n<li>打开app的时候，判断前一个<code>Activity</code>是否是<code>Launcher</code>，表示是从<code>launcher</code>打开app，是的话将<code>AcitivityOptions</code>保存到当前app所在的<code>TaskRecord</code></li>\n<li>退出app的时候，判断后一个<code>Activity</code>是否是<code>Launcher</code>，表示退出app，是的话将<code>AcitivityOptions</code>参数从前一个<code>TaskRecord</code>中取出来放入<code>Launcher</code>所在<code>ActivityRecord</code>，这样<code>ActivityRecord</code>就有参数来设置退场动画了</li>\n</ul>\n<p>但是在实际操作过程中遇到一个问题，如果将上述的操作放在<code>resumeTopActivityInnerLocked</code>中会在很多情况下这个方法是取不到前一个<code>ActivityRecord</code>的对象的，但这些操作又要放在<code>resumeTopActivityInnerLocked</code>之前。这里思考到在<code>Acitivity</code> resume之前，肯定会执行前一个<code>Activity</code>的<code>pause</code>操作，最后到找一个合适的保存参数的位置即<code>startPausingLocked</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startPausingLocked</span><span class=\"params\">(<span class=\"keyword\">boolean</span> userLeaving, <span class=\"keyword\">boolean</span> uiSleeping, <span class=\"keyword\">boolean</span> resuming,<span class=\"keyword\">boolean</span> dontWait)</span> </span>&#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">       <span class=\"comment\">//add start</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> TaskRecord prevTask = prev != <span class=\"keyword\">null</span> ? prev.task : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> TaskRecord nextTask = next != <span class=\"keyword\">null</span> ? next.task : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (DEBUG_STATES) Slog.v(TAG_STATES, <span class=\"string\">\"Moving to PAUSING: \"</span> + prev+<span class=\"string\">\";next:\"</span>+next+<span class=\"string\">\";prevTask:\"</span>+prevTask);</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(XOS_LANCHER_TRANSITION &amp;&amp; prev != <span class=\"keyword\">null</span> &amp;&amp; prev.isHomeActivity())&#123;</span><br><span class=\"line\">\t       <span class=\"comment\">//前一个activity是Launcher是，将ActivityOptions保存到下一个TaskRecord中</span></span><br><span class=\"line\">        ActivityOptions opt = next != <span class=\"keyword\">null</span> ? next.pendingOptions : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(opt != <span class=\"keyword\">null</span> &amp;&amp; opt.getAnimationType() == ActivityOptions.ANIM_SCALE_UP &amp;&amp; nextTask != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">               nextTask.updatePendingOptions(opt);</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(DEBUG_STATES)&#123;</span><br><span class=\"line\">                   Slog.d(TAG_STATES,<span class=\"string\">\"resumeTopActivityLocked updatePendingOptions to task:\"</span>+opt);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(XOS_LANCHER_TRANSITION &amp;&amp; ((next != <span class=\"keyword\">null</span> &amp;&amp; next.isHomeActivity())||next == <span class=\"keyword\">null</span>))&#123;</span><br><span class=\"line\">           <span class=\"keyword\">boolean</span> maySkip = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">               maySkip = PowerOffAlarmUtility.isAlarmBoot();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"comment\">//会存在有些情况获取的下一个AcitivityRecord为null，这些问题nex都是为Launcher的</span></span><br><span class=\"line\">            ActivityRecord homeRecord = next != <span class=\"keyword\">null</span> ? next : mStackSupervisor.getHomeActivity();</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(DEBUG_STATES)&#123;</span><br><span class=\"line\">                   Slog.d(TAG_STATES,<span class=\"string\">\"resumeTopActivityLocked maySkip:\"</span>+maySkip+<span class=\"string\">\"; homeRecord:\"</span>+homeRecord);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!maySkip &amp;&amp; homeRecord != <span class=\"keyword\">null</span> &amp;&amp; prevTask != <span class=\"keyword\">null</span> &amp;&amp; prevTask.mPendingOptions != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">               homeRecord.updateScaleOptions(prevTask.mPendingOptions);</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(DEBUG_STATES)&#123;</span><br><span class=\"line\">                   Slog.d(TAG_STATES,<span class=\"string\">\"resumeTopActivityLocked updatePendingOptions restore from task:\"</span>+prevTask.mPendingOptions);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//add end</span></span><br><span class=\"line\">       ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们都顺利的记住了进入App和退出App时的位置信息</p>\n<p>接下来看<code>AppTransition.createScaleDownAnimationLocked</code>方法，它是退场动画的构造。与<code>createScaleUpAnimationLocked</code>所构造的动画是相反的。不过会有几个问题：</p>\n<ul>\n<li>退场动画需要一个合适的减速过程才能达到理想的效果</li>\n</ul>\n<p>经过反复试验，最终采用以(0.1,0),(0.1,1)为控制点的三阶贝塞尔曲线<br><img src=\"../images/_1471512031023.png\" alt=\"Alt text\"></p>\n<ul>\n<li>放慢速度会发现，在退场动画时app界面会在Launcher界面下面，这样会感觉Icon图标变得很巨大，而没有给人App界面缩小，最后变成Icon的错觉</li>\n</ul>\n<p>这个需要调试动画时App界面和Launcher界面的Z轴的层次，所以App动画需要设置<code>set.setZAdjustment(Animation.ZORDER_TOP);</code>,而Launcher的动画需要设置:<code>set.setZAdjustment(Animation.ZORDER_NORMAL);</code></p>\n<ul>\n<li><p>缩放时<code>Launcher</code>宽高缩放需要等比，不然会变形，但App的缩放注定又不是等比的，这样会导致App界面消失时由于比<code>Icon</code>而残影严重。最后通过单独调节Y轴方向上的缩放速率来减轻残影。</p>\n</li>\n<li><p>最后还有一个关键点，那就是app界面缩小时透明度的变化，它关系到在退场过程中能否给人感觉平滑过渡到Icon图标<br>下面是调节透明度变化的Interpolator</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final Interpolator xInterploator = new DecelerateInterpolator(3f);</span><br><span class=\"line\">mThumbnailXLauncherFadeOutInterpolator = new Interpolator() &#123;</span><br><span class=\"line\">     @Override</span><br><span class=\"line\">     public float getInterpolation(float input) &#123;</span><br><span class=\"line\">         // Linear response for first fraction, then complete after that.</span><br><span class=\"line\">         if(input &lt;= 0.10)&#123;//动画开始一段时间app界面保持完全透明</span><br><span class=\"line\">             return 0f;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         if (input &lt;= 0.95f) &#123;</span><br><span class=\"line\">             float t = (input - 0.10f)/ 0.85f;</span><br><span class=\"line\">             return xInterploator.getInterpolation(t);//透明度变化经历一个减速过程</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         return 1f;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>最终<code>createScaleDownAnimationLocked</code>方法如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Animation <span class=\"title\">createScaleDownAnimationLocked</span><span class=\"params\">(<span class=\"keyword\">int</span> transit, <span class=\"keyword\">boolean</span> enter,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                               <span class=\"keyword\">int</span> appWidth, <span class=\"keyword\">int</span> appHeight)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//modify  lancher_transition start</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> startWidth = mNextAppTransitionStartWidth ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> startHeight = mNextAppTransitionStartHeight ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> startX = mNextAppTransitionStartX ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> startY = mNextAppTransitionStartY ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(startWidth == mAppIconSize)&#123;<span class=\"comment\">//需要对icon的大小进行一定的修正</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> inset = <span class=\"number\">5</span> ;</span><br><span class=\"line\">        startWidth = startWidth - inset * <span class=\"number\">2</span>;</span><br><span class=\"line\">        startHeight = startWidth;</span><br><span class=\"line\">        startX = startX + inset;</span><br><span class=\"line\">        startY = startY + inset;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//modify end</span></span><br><span class=\"line\">    Animation a = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!enter) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Exit app zooms out from the center of Launcher icon rect.</span></span><br><span class=\"line\">        <span class=\"comment\">//modify lancher_transition start</span></span><br><span class=\"line\">        <span class=\"keyword\">float</span> scaleW = startWidth / (<span class=\"keyword\">float</span>) appWidth;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> scaleH = startHeight / (<span class=\"keyword\">float</span>) appHeight;</span><br><span class=\"line\">        Animation scale = <span class=\"keyword\">new</span> ScaleAnimation(<span class=\"number\">1</span>, scaleW, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                computePivot(startX, scaleW),</span><br><span class=\"line\">                computePivot(startY, scaleH));</span><br><span class=\"line\">        scale.setInterpolator(mFastOutSlowInInterpolator);</span><br><span class=\"line\">        Animation scale2 = <span class=\"keyword\">new</span> ScaleAnimation(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, scaleH,</span><br><span class=\"line\">                computePivot(startX, scaleW),</span><br><span class=\"line\">                computePivot(startY, scaleH));</span><br><span class=\"line\">        scale2.setInterpolator(mScaleDownYDecelerateInterpolator);</span><br><span class=\"line\">        <span class=\"comment\">//modify lancher_transition start</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Animation alpha = <span class=\"keyword\">new</span> AlphaAnimation(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        alpha.setInterpolator(mThumbnailXLauncherFadeOutInterpolator);</span><br><span class=\"line\">        AnimationSet set = <span class=\"keyword\">new</span> AnimationSet(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        set.addAnimation(scale);</span><br><span class=\"line\">        set.addAnimation(scale2);</span><br><span class=\"line\">        set.addAnimation(alpha);</span><br><span class=\"line\">        set.setDetachWallpaper(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        set.setZAdjustment(Animation.ZORDER_TOP);</span><br><span class=\"line\">        a = set;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">float</span> scaleW = startWidth / (<span class=\"keyword\">float</span>) appWidth;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> scaleH = startHeight / (<span class=\"keyword\">float</span>) appHeight;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> sW = scaleW &gt; <span class=\"number\">0.001</span> ? <span class=\"number\">1</span> / scaleW : <span class=\"number\">1000f</span>;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> sH = scaleH &gt; <span class=\"number\">0.001</span> ? <span class=\"number\">1</span> / scaleH : <span class=\"number\">1000f</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(startWidth == startHeight)&#123;</span><br><span class=\"line\">            sW = Math.min(sW,sH);</span><br><span class=\"line\">            sH = sW;<span class=\"comment\">//保存Laucher是等比缩放</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t    Animation scale = <span class=\"keyword\">new</span> ScaleAnimation(sW, <span class=\"number\">1f</span>, sH, <span class=\"number\">1f</span>,</span><br><span class=\"line\">                   computePivot(startX, scaleW),</span><br><span class=\"line\">                   computePivot(startY, scaleH));</span><br><span class=\"line\">         scale.setInterpolator(mFastOutSlowInInterpolator);</span><br><span class=\"line\"></span><br><span class=\"line\">         Animation alpha = <span class=\"keyword\">new</span> AlphaAnimation(<span class=\"number\">0.0f</span>, <span class=\"number\">1f</span>);</span><br><span class=\"line\">         alpha.setInterpolator(mThumbnailFadeOutInterpolator);</span><br><span class=\"line\">         AnimationSet set = <span class=\"keyword\">new</span> AnimationSet(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t     set.addAnimation(scale);</span><br><span class=\"line\">          set.addAnimation(alpha);</span><br><span class=\"line\">          set.setDetachWallpaper(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">          set.setZAdjustment(Animation.ZORDER_NORMAL);</span><br><span class=\"line\">          <span class=\"comment\">//modify lancher_transition end</span></span><br><span class=\"line\">          a = set;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">long</span> duration = <span class=\"number\">380L</span>;</span><br><span class=\"line\">    <span class=\"comment\">//modify lancher_transition start</span></span><br><span class=\"line\">    a.setDuration(duration);</span><br><span class=\"line\">    a.setFillAfter(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    a.setInterpolator(mDecelerateInterpolator);</span><br><span class=\"line\">    a.initialize(appWidth, appHeight, appWidth, appHeight);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"不足之处\"><a href=\"#不足之处\" class=\"headerlink\" title=\"不足之处\"></a>不足之处</h3><p>主要表现在退场时不够完美</p>\n<ul>\n<li>退场时app界面的残影仍然存在，在Icon图标不为方形时明显</li>\n<li>由于只app退出时只能回到进场时点击的位置，所以当Launcher上的app图标改变了，然后从任务列表进入app界面，再退出是无法缩放到正确的位置的。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>3年前开发Rom时的一个任务，就是仿照IOS打开应用和退出应用的开发过程和思路，可能已经过时，现在拿出来看看以前的思路</p>\n</blockquote>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>最终效果做到如下的形式: 点击Launcher上的icon，app从Icon的位置开始放大到全屏，观察发现Launcher也有从Icon位置放大的效果;退场时，app界面和Launcher同时缩小到Icon位置</p>\n<h3 id=\"设置方法的选择\"><a href=\"#设置方法的选择\" class=\"headerlink\" title=\"设置方法的选择:\"></a>设置方法的选择:</h3><p>进出场动画和转场动画的本质是一样,都是从一个activity过渡到另一个activity的动画,所不同是进出场动画是在两个app之间的过渡，而且Launcher所在的activity是一个壁纸窗口，这是使用的时候需要注意的。</p>\n<h4 id=\"三种方法\"><a href=\"#三种方法\" class=\"headerlink\" title=\"三种方法\"></a>三种方法</h4><ul>\n<li>设置theme中的 android:windowAnimationStyle<br>这是最简单方便的方式，只需要我们配置几个动画的xml就ok了，缺点是由于是在主题的里面的静态资源，不能根据实际情况改变动画类型和和设置相关参数。诸多条件限制决定了这种方式不能达到目的。</li>\n<li>overridePendingTransition方式<br>这种方式可以让我们覆盖掉第一种方式设置的动画，优点是我们可以在代码里面动态改变它，但遗憾的是这个方法只受动画的xml文件形式，也无法接受设置动画的参数。</li>\n<li>ActivityOptions方式<br>这种方法是在startActivity的时候，通过ActivityOptions构造出一个Bundle参数，传递给WindowManager，用来覆盖默认的动画，这样就为我们定义转场动画提供了扩展空间。实际查看Launcher的源代码，原生也是这么做的。","more":"</li>\n</ul>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>进出场动画的设置流程主要与AMS和WMS有关，主要参考以下博客:<br><a href=\"http://blog.csdn.net/windskier/article/details/7172710\" target=\"_blank\" rel=\"noopener\">android Application Component研究之Activity(二)</a><br> <a href=\"http://blog.csdn.net/guoqifa29/article/details/49273065\" target=\"_blank\" rel=\"noopener\">WindowManagerService动画分析</a> </p>\n<p>为了更好的分析动画的设置流程，需要打开WMS和AMS的日志开关<br>通过<code>adb shell dumpsys window -d enable a</code>打开WMS的日志开关<br>通过<code>adb shell dumpsys activity log a on</code>打开AMS的日志开关</p>\n<h3 id=\"进场动画\"><a href=\"#进场动画\" class=\"headerlink\" title=\"进场动画\"></a>进场动画</h3><p>首先观察进场动画：点击APP的Icon后，整个界面从Icon位置放大，Icon放大到一定程度后可以隐约看到APP的界面，继续放大，app界面逐渐从透明到不透明，最终覆盖全屏。</p>\n<p>Android原生通过ActivityOptions提供了一个类似的转场动画makeScaleUpAnimation，它的使用如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ActivityOptions opts = ActivityOptions.makeScaleUpAnimation(v, left, top , width , height);</span><br><span class=\"line\">startActivity(intent, opts.toBundle());</span><br></pre></td></tr></table></figure>\n<p>其效果出来只有app放大，而Launcher没有动画效果，找遍资料可以发现android没有提供相关接口。<br>    查看makeScaleUpAnimation方法的源码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ActivityOptions <span class=\"title\">makeScaleUpAnimation</span><span class=\"params\">(View source,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> startX, <span class=\"keyword\">int</span> startY, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">    ActivityOptions opts = <span class=\"keyword\">new</span> ActivityOptions();</span><br><span class=\"line\">    opts.mPackageName = source.getContext().getPackageName();</span><br><span class=\"line\">    opts.mAnimationType = ANIM_SCALE_UP;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] pts = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    source.getLocationOnScreen(pts);</span><br><span class=\"line\">    opts.mStartX = pts[<span class=\"number\">0</span>] + startX;</span><br><span class=\"line\">    opts.mStartY = pts[<span class=\"number\">1</span>] + startY;</span><br><span class=\"line\">    opts.mWidth = width;</span><br><span class=\"line\">    opts.mHeight = height;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> opts;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>发现里面并没有构造一个<code>Animation</code>,只是设置了相关位置的相关参数，以及<code>ANIM_SCALE_UP</code>这个动画类型的标识，真正构造动画的方法在<code>com.android.server.wm.AppTransition</code>里面，这是一个协助<code>WindowManagerServervice</code>来设置转场动画的类。当真正需要执行动画时，会从<code>AppTransition</code>中加载或构造合适的动画，交由<code>WindowManagerServervice</code>来执行。</p>\n<p><code>AppTransition</code>每次会加载两个动画，一个是打开(<code>enter</code>)动画，另一个是退出(<code>exit</code>)动画，从<code>Launcher</code>打开<code>Activity</code>，对<code>Activity</code>来说是<code>enter</code>，对<code>Launcher</code>就是<code>exit</code>，加载<code>ScaleUp</code>的动画都会调用AppTransition的<code>createScaleUpAnimationLocked</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Animation <span class=\"title\">createScaleUpAnimationLocked</span><span class=\"params\">(<span class=\"keyword\">int</span> transit, <span class=\"keyword\">boolean</span> enter,<span class=\"keyword\">int</span> appWidth, <span class=\"keyword\">int</span> appHeight)</span> </span>&#123;</span><br><span class=\"line\">    Animation a = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (enter) &#123;</span><br><span class=\"line\">\t    ...</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t    ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法有几个参数:</p>\n<ul>\n<li><code>transit</code>: 表示本次过渡动画的类型, 由于<code>Laucher</code>是壁纸窗口,所以此时<code>transit</code>的值为<code>TRANSIT_WALLPAPER_CLOSE</code></li>\n<li><code>enter</code>:表示该窗口时进入还是退出,后来加载动画的时候调用两次<code>createScaleUpAnimationLocked</code>,两次就是这个参数值不同，一次为true，一次为false</li>\n<li><code>appWidth</code>, <code>appHeight</code>:顾名思义，为app最终的宽高</li>\n</ul>\n<p><code>createScaleUpAnimationLocked</code>可以看到进入<code>enter=true</code>时的动画，其实就是两个动画的组合，一个放大动画<code>ScaleAnimation</code>，一个透明度变化动画(<code>AlphaAnimation</code>)，这就是App打开时的动画，而<code>enter=false</code>时，这时加载的应该是App打开时Launcher的动画，却只有透明度变化(<code>AlphaAnimation</code>)，仿照app放大的动画写一个launcher放大的动画即可:</p>\n<p>先看app放大的动画:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (enter) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// Entering app zooms out from the center of the initial rect.</span></span><br><span class=\"line\">       <span class=\"keyword\">float</span> scaleW = mNextAppTransitionStartWidth / (<span class=\"keyword\">float</span>) appWidth;</span><br><span class=\"line\">       <span class=\"keyword\">float</span> scaleH = mNextAppTransitionStartHeight / (<span class=\"keyword\">float</span>) appHeight;</span><br><span class=\"line\">       Animation scale = <span class=\"keyword\">new</span> ScaleAnimation(scaleW, <span class=\"number\">1</span>, scaleH, <span class=\"number\">1</span>,</span><br><span class=\"line\">               computePivot(mNextAppTransitionStartX, scaleW),</span><br><span class=\"line\">               computePivot(mNextAppTransitionStartY, scaleH));</span><br><span class=\"line\">               <span class=\"comment\">//modify start</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span>(XOS_LANCHER_TRANSITION &amp;&amp; transit == TRANSIT_WALLPAPER_CLOSE)&#123;</span><br><span class=\"line\">           scale.setInterpolator(mDecelerateXLauncherInterpolator);</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           scale.setInterpolator(mDecelerateInterpolator);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//modify  end</span></span><br><span class=\"line\">        Animation alpha = <span class=\"keyword\">new</span> AlphaAnimation(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"comment\">//modify start</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span>(XOS_LANCHER_TRANSITION &amp;&amp; transit == TRANSIT_WALLPAPER_CLOSE)&#123;</span><br><span class=\"line\">           alpha.setInterpolator(mThumbnailXLauncherFadeInInterpolator);</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">           alpha.setInterpolator(mThumbnailFadeOutInterpolator);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">// modify end</span></span><br><span class=\"line\">       AnimationSet set = <span class=\"keyword\">new</span> AnimationSet(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">       set.addAnimation(scale);</span><br><span class=\"line\">       set.addAnimation(alpha);</span><br><span class=\"line\">       set.setDetachWallpaper(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">       a = set;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这时我更换了原来的两个动画的<code>Interpolator</code>，其中<code>mDecelerateXLauncherInterpolator = new DecelerateInterpolator(2.5f)</code>，将放大动画速度的因子调大，以便使减速过程更明显</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mThumbnailXLauncherFadeInInterpolator = new Interpolator() &#123;</span><br><span class=\"line\">      @Override</span><br><span class=\"line\">      public float getInterpolation(float input) &#123;</span><br><span class=\"line\">      // Linear response for first fraction, then complete after that.</span><br><span class=\"line\">          if (input &lt; RECENTS_THUMBNAIL_XLAUNCHER_FADEOUT_FRACTION) &#123;</span><br><span class=\"line\">              float t = input / RECENTS_THUMBNAIL_XLAUNCHER_FADEOUT_FRACTION;</span><br><span class=\"line\">              return mLinearOutSlowInInterpolator.getInterpolation(t);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          return 1f;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p><code>RECENTS_THUMBNAIL_XLAUNCHER_FADEOUT_FRACTION=0.15</code>，这样以便app界面能够更快的将背景的Launcher界面上的Icon图标完全覆盖，不至于出现Launcher界面放大时看出变得很大的Icon图标</p>\n<p>然后是Launcher的放大动画:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(XOS_LANCHER_TRANSITION &amp;&amp; transit == TRANSIT_WALLPAPER_CLOSE)&#123;</span><br><span class=\"line\">     //enter app : animation for launcher exit</span><br><span class=\"line\">     //mNextAppTransitionStartWidth,mNextAppTransitionStartHeight 是通过StartActivity传入的APP Icon的宽高，appWidth，appHeight是app全屏的时的大小</span><br><span class=\"line\">     float scaleW = mNextAppTransitionStartWidth / (float) appWidth;</span><br><span class=\"line\">     float scaleH = mNextAppTransitionStartHeight / (float) appHeight;</span><br><span class=\"line\">     //因为对Launcher来说是从原来的大小放大，所以最终的大小是scaleW和scaleH的倒数</span><br><span class=\"line\">     float sW = scaleW &gt; 0.001 ? 1 / scaleW : 1000f;</span><br><span class=\"line\">     float sH = scaleH &gt; 0.001 ? 1 / scaleH : 1000f;</span><br><span class=\"line\">     //第三和第四个参数是缩放点的中心位置，计算方法和app放大的位置相同，这样才能保证</span><br><span class=\"line\">     Animation scale = new ScaleAnimation(1f, sW, 1f, sH,</span><br><span class=\"line\">              computePivot(mNextAppTransitionStartX, scaleW),</span><br><span class=\"line\">              computePivot(mNextAppTransitionStartY, scaleH));</span><br><span class=\"line\">      scale.setInterpolator(mDecelerateInterpolator);</span><br><span class=\"line\">      Animation alpha = new AlphaAnimation(1f, 0.0f);</span><br><span class=\"line\">      alpha.setDuration(300);</span><br><span class=\"line\">      alpha.setInterpolator(mThumbnailFadeOutInterpolator);</span><br><span class=\"line\">      AnimationSet set = new AnimationSet(false);</span><br><span class=\"line\">      set.addAnimation(scale);</span><br><span class=\"line\">      set.addAnimation(alpha);</span><br><span class=\"line\">      set.setDetachWallpaper(true);</span><br><span class=\"line\">      a = set;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>经过这几步修改，进场动画基本完成<br>总结:</p>\n<ul>\n<li><code>ActivityOptions.makeScaleUpAnimation</code>来实现需要的放大动画</li>\n<li>原来的<code>App</code>放大的动画需要调整<code>Interpolator</code>，即放大动画和透明度动画的变化速率</li>\n<li>加载Launcher动画时也需要调用<code>createScaleUpAnimationLocked</code>方法，只是传入的enter值为false</li>\n<li>Launcher的动画缩放中心位置和App缩放动画是相同的，但是放大倍数是相反的</li>\n</ul>\n<h3 id=\"退场动画\"><a href=\"#退场动画\" class=\"headerlink\" title=\"退场动画\"></a>退场动画</h3><p>进场动画可以通过<code>startActivity(intent, opts.toBundle());</code>传参数到<code>AppTransition</code>类中构造对应的方法，而退场时却没有对应的方法，这时候面临几个问题:</p>\n<ul>\n<li>怎么设置退场动画</li>\n<li>什么时候来设置退场动画</li>\n<li>退场动画的位置参数从哪里来</li>\n</ul>\n<p>这里看一下进场动画时的设置流程:<br><img src=\"../images/进场动画时的设置流程.png\" alt=\"进场动画时的设置流程\"></p>\n<p>可以看到是<code>ActivityStack</code>在执行<code>Resume</code>的流程时一步步将<code>ScaleUp</code>的相关参数设置到AppTranssion中去的。<br>所以可以仿照这个流程在<code>WindowMamagerService</code>和<code>AppTransition</code>中添加一个<code>overridePendingAppTransitionScaleUp</code>方法:<br><code>WindowMamagerService</code>中添加:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">overridePendingAppTransitionScaleDown</span><span class=\"params\">(<span class=\"keyword\">int</span> startX, <span class=\"keyword\">int</span> startY, <span class=\"keyword\">int</span> startWidth,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">int</span> startHeight)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(mWindowMap) &#123;</span><br><span class=\"line\">            mAppTransition.overridePendingAppTransitionScaleDown(startX, startY, startWidth,startHeight);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>AppTransition中添加:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">overridePendingAppTransitionScaleDown</span><span class=\"params\">(<span class=\"keyword\">int</span> startX, <span class=\"keyword\">int</span> startY, <span class=\"keyword\">int</span> startWidth,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                    <span class=\"keyword\">int</span> startHeight)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isTransitionSet()) &#123;</span><br><span class=\"line\">        mNextAppTransitionType = NEXT_TRANSIT_TYPE_SCALE_DOWN;</span><br><span class=\"line\">        mNextAppTransitionPackage = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        mNextAppTransitionThumbnail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        mNextAppTransitionStartX = startX;</span><br><span class=\"line\">        mNextAppTransitionStartY = startY;</span><br><span class=\"line\">        mNextAppTransitionStartWidth = startWidth;</span><br><span class=\"line\">        mNextAppTransitionStartHeight = startHeight;</span><br><span class=\"line\">        postAnimationCallback();</span><br><span class=\"line\">        mNextAppTransitionCallback = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>NEXT_TRANSIT_TYPE_SCALE_DOWN</code>是我自定义的一个动画，用来表示退场的动画<br>AppTransition类中添加:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\">Animation <span class=\"title\">loadAnimation</span><span class=\"params\">(WindowManager.LayoutParams lp, <span class=\"keyword\">int</span> transit, <span class=\"keyword\">boolean</span> enter,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">int</span> appWidth, <span class=\"keyword\">int</span> appHeight, <span class=\"keyword\">int</span> orientation, Rect containingFrame, Rect contentInsets,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            Rect appFrame, <span class=\"keyword\">boolean</span> isVoiceInteraction)</span> </span>&#123;</span><br><span class=\"line\">         ....</span><br><span class=\"line\">            <span class=\"comment\">// add start</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(XOS_LANCHER_TRANSITION &amp;&amp; transit == TRANSIT_WALLPAPER_OPEN</span><br><span class=\"line\">                        &amp;&amp; mNextAppTransitionType == NEXT_TRANSIT_TYPE_SCALE_DOWN)&#123;</span><br><span class=\"line\">            a = createScaleDownAnimationLocked(transit, enter, appWidth, appHeight);<span class=\"keyword\">if</span> (DEBUG_APP_TRANSITIONS || DEBUG_ANIM) Slog.v(TAG,</span><br><span class=\"line\">                    <span class=\"string\">\"applyAnimation:\"</span></span><br><span class=\"line\">                    + <span class=\"string\">\" anim=\"</span> + a + <span class=\"string\">\" nextAppTransition=ANIM_SCALE_DOWN\"</span></span><br><span class=\"line\">                    + <span class=\"string\">\" transit=\"</span> + appTransitionToString(transit) + <span class=\"string\">\" isEntrance=\"</span> + enter</span><br><span class=\"line\">                    + <span class=\"string\">\" Callers=\"</span> + Debug.getCallers(<span class=\"number\">3</span>));</span><br><span class=\"line\">        <span class=\"comment\">//add end</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Animation <span class=\"title\">createScaleDownAnimationLocked</span><span class=\"params\">(<span class=\"keyword\">int</span> transit, <span class=\"keyword\">boolean</span> enter,<span class=\"keyword\">int</span> appWidth, <span class=\"keyword\">int</span> appHeight)</span> </span>&#123;</span><br><span class=\"line\">     ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>loadAnimation</code>用来选择加载哪个动画，而<code>createScaleDownAnimationLocked</code>便是真正实现的地方了，也是最重要的地方，需要反复微调效果，放在最后说。</p>\n<p>怎么设置怎么设置退场动画解决了，但是什么时候来设置它呢？通过分析log发现，不管进场还是退场的时候其实都会执行一次<code>AcitivityStack</code>的<code>resumeTopActivityInnerLocked</code>，通过<code>ActivityRecord.applyOptionsLocked</code>来试图设置过场动画，只是<code>AcitivityOption</code>在用完一次后就置null了，以后无法再次使用，为达到目的，需要将进场时的<code>AcitivityOption</code>保存起来。<br>这里不能将<code>AcitivityOptions</code>保存在<code>ActivityRecord</code>里面，因为一个<code>AcitivityRecord</code>会对应一个<code>Acitivity</code>，而我们打开<code>app</code>可能会打开多个<code>Activity</code>，退出的时候很有可能不是从进来的<code>Activity</code>退出的。这时候就需要将<code>ActivityOptions</code>保存在<code>Task</code>即<code>TaskRecord</code>中</p>\n<p>所以我思路是这样的:</p>\n<ul>\n<li>打开app的时候，判断前一个<code>Activity</code>是否是<code>Launcher</code>，表示是从<code>launcher</code>打开app，是的话将<code>AcitivityOptions</code>保存到当前app所在的<code>TaskRecord</code></li>\n<li>退出app的时候，判断后一个<code>Activity</code>是否是<code>Launcher</code>，表示退出app，是的话将<code>AcitivityOptions</code>参数从前一个<code>TaskRecord</code>中取出来放入<code>Launcher</code>所在<code>ActivityRecord</code>，这样<code>ActivityRecord</code>就有参数来设置退场动画了</li>\n</ul>\n<p>但是在实际操作过程中遇到一个问题，如果将上述的操作放在<code>resumeTopActivityInnerLocked</code>中会在很多情况下这个方法是取不到前一个<code>ActivityRecord</code>的对象的，但这些操作又要放在<code>resumeTopActivityInnerLocked</code>之前。这里思考到在<code>Acitivity</code> resume之前，肯定会执行前一个<code>Activity</code>的<code>pause</code>操作，最后到找一个合适的保存参数的位置即<code>startPausingLocked</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startPausingLocked</span><span class=\"params\">(<span class=\"keyword\">boolean</span> userLeaving, <span class=\"keyword\">boolean</span> uiSleeping, <span class=\"keyword\">boolean</span> resuming,<span class=\"keyword\">boolean</span> dontWait)</span> </span>&#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">       <span class=\"comment\">//add start</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> TaskRecord prevTask = prev != <span class=\"keyword\">null</span> ? prev.task : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> TaskRecord nextTask = next != <span class=\"keyword\">null</span> ? next.task : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (DEBUG_STATES) Slog.v(TAG_STATES, <span class=\"string\">\"Moving to PAUSING: \"</span> + prev+<span class=\"string\">\";next:\"</span>+next+<span class=\"string\">\";prevTask:\"</span>+prevTask);</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(XOS_LANCHER_TRANSITION &amp;&amp; prev != <span class=\"keyword\">null</span> &amp;&amp; prev.isHomeActivity())&#123;</span><br><span class=\"line\">\t       <span class=\"comment\">//前一个activity是Launcher是，将ActivityOptions保存到下一个TaskRecord中</span></span><br><span class=\"line\">        ActivityOptions opt = next != <span class=\"keyword\">null</span> ? next.pendingOptions : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(opt != <span class=\"keyword\">null</span> &amp;&amp; opt.getAnimationType() == ActivityOptions.ANIM_SCALE_UP &amp;&amp; nextTask != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">               nextTask.updatePendingOptions(opt);</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(DEBUG_STATES)&#123;</span><br><span class=\"line\">                   Slog.d(TAG_STATES,<span class=\"string\">\"resumeTopActivityLocked updatePendingOptions to task:\"</span>+opt);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(XOS_LANCHER_TRANSITION &amp;&amp; ((next != <span class=\"keyword\">null</span> &amp;&amp; next.isHomeActivity())||next == <span class=\"keyword\">null</span>))&#123;</span><br><span class=\"line\">           <span class=\"keyword\">boolean</span> maySkip = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(next == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">               maySkip = PowerOffAlarmUtility.isAlarmBoot();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"comment\">//会存在有些情况获取的下一个AcitivityRecord为null，这些问题nex都是为Launcher的</span></span><br><span class=\"line\">            ActivityRecord homeRecord = next != <span class=\"keyword\">null</span> ? next : mStackSupervisor.getHomeActivity();</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(DEBUG_STATES)&#123;</span><br><span class=\"line\">                   Slog.d(TAG_STATES,<span class=\"string\">\"resumeTopActivityLocked maySkip:\"</span>+maySkip+<span class=\"string\">\"; homeRecord:\"</span>+homeRecord);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!maySkip &amp;&amp; homeRecord != <span class=\"keyword\">null</span> &amp;&amp; prevTask != <span class=\"keyword\">null</span> &amp;&amp; prevTask.mPendingOptions != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">               homeRecord.updateScaleOptions(prevTask.mPendingOptions);</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(DEBUG_STATES)&#123;</span><br><span class=\"line\">                   Slog.d(TAG_STATES,<span class=\"string\">\"resumeTopActivityLocked updatePendingOptions restore from task:\"</span>+prevTask.mPendingOptions);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//add end</span></span><br><span class=\"line\">       ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们都顺利的记住了进入App和退出App时的位置信息</p>\n<p>接下来看<code>AppTransition.createScaleDownAnimationLocked</code>方法，它是退场动画的构造。与<code>createScaleUpAnimationLocked</code>所构造的动画是相反的。不过会有几个问题：</p>\n<ul>\n<li>退场动画需要一个合适的减速过程才能达到理想的效果</li>\n</ul>\n<p>经过反复试验，最终采用以(0.1,0),(0.1,1)为控制点的三阶贝塞尔曲线<br><img src=\"../images/_1471512031023.png\" alt=\"Alt text\"></p>\n<ul>\n<li>放慢速度会发现，在退场动画时app界面会在Launcher界面下面，这样会感觉Icon图标变得很巨大，而没有给人App界面缩小，最后变成Icon的错觉</li>\n</ul>\n<p>这个需要调试动画时App界面和Launcher界面的Z轴的层次，所以App动画需要设置<code>set.setZAdjustment(Animation.ZORDER_TOP);</code>,而Launcher的动画需要设置:<code>set.setZAdjustment(Animation.ZORDER_NORMAL);</code></p>\n<ul>\n<li><p>缩放时<code>Launcher</code>宽高缩放需要等比，不然会变形，但App的缩放注定又不是等比的，这样会导致App界面消失时由于比<code>Icon</code>而残影严重。最后通过单独调节Y轴方向上的缩放速率来减轻残影。</p>\n</li>\n<li><p>最后还有一个关键点，那就是app界面缩小时透明度的变化，它关系到在退场过程中能否给人感觉平滑过渡到Icon图标<br>下面是调节透明度变化的Interpolator</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final Interpolator xInterploator = new DecelerateInterpolator(3f);</span><br><span class=\"line\">mThumbnailXLauncherFadeOutInterpolator = new Interpolator() &#123;</span><br><span class=\"line\">     @Override</span><br><span class=\"line\">     public float getInterpolation(float input) &#123;</span><br><span class=\"line\">         // Linear response for first fraction, then complete after that.</span><br><span class=\"line\">         if(input &lt;= 0.10)&#123;//动画开始一段时间app界面保持完全透明</span><br><span class=\"line\">             return 0f;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         if (input &lt;= 0.95f) &#123;</span><br><span class=\"line\">             float t = (input - 0.10f)/ 0.85f;</span><br><span class=\"line\">             return xInterploator.getInterpolation(t);//透明度变化经历一个减速过程</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         return 1f;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>最终<code>createScaleDownAnimationLocked</code>方法如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Animation <span class=\"title\">createScaleDownAnimationLocked</span><span class=\"params\">(<span class=\"keyword\">int</span> transit, <span class=\"keyword\">boolean</span> enter,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                               <span class=\"keyword\">int</span> appWidth, <span class=\"keyword\">int</span> appHeight)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//modify  lancher_transition start</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> startWidth = mNextAppTransitionStartWidth ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> startHeight = mNextAppTransitionStartHeight ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> startX = mNextAppTransitionStartX ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> startY = mNextAppTransitionStartY ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(startWidth == mAppIconSize)&#123;<span class=\"comment\">//需要对icon的大小进行一定的修正</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> inset = <span class=\"number\">5</span> ;</span><br><span class=\"line\">        startWidth = startWidth - inset * <span class=\"number\">2</span>;</span><br><span class=\"line\">        startHeight = startWidth;</span><br><span class=\"line\">        startX = startX + inset;</span><br><span class=\"line\">        startY = startY + inset;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//modify end</span></span><br><span class=\"line\">    Animation a = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!enter) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Exit app zooms out from the center of Launcher icon rect.</span></span><br><span class=\"line\">        <span class=\"comment\">//modify lancher_transition start</span></span><br><span class=\"line\">        <span class=\"keyword\">float</span> scaleW = startWidth / (<span class=\"keyword\">float</span>) appWidth;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> scaleH = startHeight / (<span class=\"keyword\">float</span>) appHeight;</span><br><span class=\"line\">        Animation scale = <span class=\"keyword\">new</span> ScaleAnimation(<span class=\"number\">1</span>, scaleW, <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                computePivot(startX, scaleW),</span><br><span class=\"line\">                computePivot(startY, scaleH));</span><br><span class=\"line\">        scale.setInterpolator(mFastOutSlowInInterpolator);</span><br><span class=\"line\">        Animation scale2 = <span class=\"keyword\">new</span> ScaleAnimation(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, scaleH,</span><br><span class=\"line\">                computePivot(startX, scaleW),</span><br><span class=\"line\">                computePivot(startY, scaleH));</span><br><span class=\"line\">        scale2.setInterpolator(mScaleDownYDecelerateInterpolator);</span><br><span class=\"line\">        <span class=\"comment\">//modify lancher_transition start</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Animation alpha = <span class=\"keyword\">new</span> AlphaAnimation(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        alpha.setInterpolator(mThumbnailXLauncherFadeOutInterpolator);</span><br><span class=\"line\">        AnimationSet set = <span class=\"keyword\">new</span> AnimationSet(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        set.addAnimation(scale);</span><br><span class=\"line\">        set.addAnimation(scale2);</span><br><span class=\"line\">        set.addAnimation(alpha);</span><br><span class=\"line\">        set.setDetachWallpaper(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        set.setZAdjustment(Animation.ZORDER_TOP);</span><br><span class=\"line\">        a = set;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">float</span> scaleW = startWidth / (<span class=\"keyword\">float</span>) appWidth;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> scaleH = startHeight / (<span class=\"keyword\">float</span>) appHeight;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> sW = scaleW &gt; <span class=\"number\">0.001</span> ? <span class=\"number\">1</span> / scaleW : <span class=\"number\">1000f</span>;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> sH = scaleH &gt; <span class=\"number\">0.001</span> ? <span class=\"number\">1</span> / scaleH : <span class=\"number\">1000f</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(startWidth == startHeight)&#123;</span><br><span class=\"line\">            sW = Math.min(sW,sH);</span><br><span class=\"line\">            sH = sW;<span class=\"comment\">//保存Laucher是等比缩放</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t    Animation scale = <span class=\"keyword\">new</span> ScaleAnimation(sW, <span class=\"number\">1f</span>, sH, <span class=\"number\">1f</span>,</span><br><span class=\"line\">                   computePivot(startX, scaleW),</span><br><span class=\"line\">                   computePivot(startY, scaleH));</span><br><span class=\"line\">         scale.setInterpolator(mFastOutSlowInInterpolator);</span><br><span class=\"line\"></span><br><span class=\"line\">         Animation alpha = <span class=\"keyword\">new</span> AlphaAnimation(<span class=\"number\">0.0f</span>, <span class=\"number\">1f</span>);</span><br><span class=\"line\">         alpha.setInterpolator(mThumbnailFadeOutInterpolator);</span><br><span class=\"line\">         AnimationSet set = <span class=\"keyword\">new</span> AnimationSet(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t     set.addAnimation(scale);</span><br><span class=\"line\">          set.addAnimation(alpha);</span><br><span class=\"line\">          set.setDetachWallpaper(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">          set.setZAdjustment(Animation.ZORDER_NORMAL);</span><br><span class=\"line\">          <span class=\"comment\">//modify lancher_transition end</span></span><br><span class=\"line\">          a = set;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">long</span> duration = <span class=\"number\">380L</span>;</span><br><span class=\"line\">    <span class=\"comment\">//modify lancher_transition start</span></span><br><span class=\"line\">    a.setDuration(duration);</span><br><span class=\"line\">    a.setFillAfter(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    a.setInterpolator(mDecelerateInterpolator);</span><br><span class=\"line\">    a.initialize(appWidth, appHeight, appWidth, appHeight);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"不足之处\"><a href=\"#不足之处\" class=\"headerlink\" title=\"不足之处\"></a>不足之处</h3><p>主要表现在退场时不够完美</p>\n<ul>\n<li>退场时app界面的残影仍然存在，在Icon图标不为方形时明显</li>\n<li>由于只app退出时只能回到进场时点击的位置，所以当Launcher上的app图标改变了，然后从任务列表进入app界面，再退出是无法缩放到正确的位置的。</li>\n</ul>"},{"title":"Android Studio 上传代码到Maven仓库","date":"2018-07-04T14:47:24.000Z","_content":"\n将自己的代码库上传到Maven一般有几个选择:\n1. 本地仓库\n2. 自己搭建的maven私有仓库, 如: Nexus\n3. 上传到Maven\n4. 上传到jcenter\n5. 上传到jitpack，这个上传很方便，比较推荐\n\n\n## 参考\n\n[Android Studio上传项目到Maven仓库](https://www.jianshu.com/p/57f8af15ef9c/)\n\n## 几点注意\n\n1. 上传library不能引用aar\n2. 配置了`publishNonDefault true`会引用上传时将Release和Debug的aar都上传到Maven，所以要么去除要么按照下面的方法配置\n3. 注意如果上传到snapshots测试仓库中，version必须以`-SNAPSHOT`结尾\n\n## Gradle上传配置\n\n```java\napply plugin: \"maven\"\n\ndef compileMode = 1\n\n//分别为正式仓库，测试仓库和本地仓库，\ndef releaseUrl = \"http://192.168.1.78:8090/nexus/content/repositories/releases\"\ndef snapshotsUrl = \"http://192.168.1.78:8090/nexus/content/repositories/snapshots/\"\ndef localUrl = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath\ndef uploadUrl = compileMode == 1 ? snapshotsUrl : compileMode == 2 ? localUrl : releaseUrl\n\nuploadArchives {\n    repositories {\n        mavenDeployer {\n            repository(url: uploadUrl) {\n                authentication(userName: NAME, password: PASSWORD) // maven授权信息\n            }\n\n            pom.version = VERSION\n            pom.artifactId = ARTIFACT_ID\n            pom.groupId = GROUP_ID   \n        }\n    }\n}\n```\n> 注意如果上传到snapshots测试仓库中，version必须以`-SNAPSHOT`结尾\n\n## 多flavor或多buildType配置\n\nmaven上传是默认不支持多flavor的，如果library配置了`publishNonDefault true`, **在执行`gradlew upload`时会将releas和debug的aar包都上传上去，导致在引用时无法找到aar**, 这点千万要注意, 需要修改gradle配置\n\n```java\nuploadArchives {\n    repositories {\n        mavenDeployer {\n            repository(url: uri(uploadUrl)){\n                //配置账号密码\n                authentication(userName: \"userName\", password: \"password\")\n            }\n            android.libraryVariants.all { variant ->\n                def isFlavor = !variant.flavorName.isEmpty()\n                def isRelease = variant.buildType.name == \"release\"\n\n                //只上传release的，如果没有多个flavor的去掉isFlavor的判断\n                if(isRelease && isFlavor){\n                    def _flavorName = \"${variant.flavorName}\"\n\n                    //此处需要再进行一次过滤，否则debug的会被上传上去\n                    addFilter(_flavorName) { artifact, file ->\n                        (artifact.attributes.classifier == \"${variant.flavorName}Release\")\n                    }\n                    pom(_flavorName).version = android.defaultConfig.versionName\n                    pom(_flavorName).groupId = \"ARTIFACT_ID\"\n                    pom(_flavorName).artifactId = \"GROUP_ID-${_flavorName}\"\n                }\n            }\n        }\n    }\n}\n```\n\n\n## 将源码，java doc等一并上传\n\n```java\n// 指定编码\ntasks.withType(JavaCompile) {\n    options.encoding = \"UTF-8\"\n}\n  \n// 打包源码\ntask sourcesJar(type: Jar) {\n    from android.sourceSets.main.java.srcDirs\n    classifier = 'sources'\n}\n  \ntask javadoc(type: Javadoc) {\n    failOnError  false\n    source = android.sourceSets.main.java.sourceFiles\n    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))\n    classpath += configurations.compile\n}\n  \n// 制作文档(Javadoc)\ntask javadocJar(type: Jar, dependsOn: javadoc) {\n    classifier = 'javadoc'\n    from javadoc.destinationDir\n}\n  \nartifacts {\n    archives sourcesJar\n    archives javadocJar\n}\n```\n\n## 上传jitpack\n\njitpack网址:https://jitpack.io/\n\n添加jitpack的仓库引用:\n\n```java\nmaven { url 'https://jitpack.io' }\n```","source":"_posts/Android-Studio-上传代码到Maven仓库.md","raw":"---\ntitle: Android Studio 上传代码到Maven仓库\ndate: 2018-07-04 22:47:24\ntags: [Gradle, Android]\n---\n\n将自己的代码库上传到Maven一般有几个选择:\n1. 本地仓库\n2. 自己搭建的maven私有仓库, 如: Nexus\n3. 上传到Maven\n4. 上传到jcenter\n5. 上传到jitpack，这个上传很方便，比较推荐\n\n\n## 参考\n\n[Android Studio上传项目到Maven仓库](https://www.jianshu.com/p/57f8af15ef9c/)\n\n## 几点注意\n\n1. 上传library不能引用aar\n2. 配置了`publishNonDefault true`会引用上传时将Release和Debug的aar都上传到Maven，所以要么去除要么按照下面的方法配置\n3. 注意如果上传到snapshots测试仓库中，version必须以`-SNAPSHOT`结尾\n\n## Gradle上传配置\n\n```java\napply plugin: \"maven\"\n\ndef compileMode = 1\n\n//分别为正式仓库，测试仓库和本地仓库，\ndef releaseUrl = \"http://192.168.1.78:8090/nexus/content/repositories/releases\"\ndef snapshotsUrl = \"http://192.168.1.78:8090/nexus/content/repositories/snapshots/\"\ndef localUrl = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath\ndef uploadUrl = compileMode == 1 ? snapshotsUrl : compileMode == 2 ? localUrl : releaseUrl\n\nuploadArchives {\n    repositories {\n        mavenDeployer {\n            repository(url: uploadUrl) {\n                authentication(userName: NAME, password: PASSWORD) // maven授权信息\n            }\n\n            pom.version = VERSION\n            pom.artifactId = ARTIFACT_ID\n            pom.groupId = GROUP_ID   \n        }\n    }\n}\n```\n> 注意如果上传到snapshots测试仓库中，version必须以`-SNAPSHOT`结尾\n\n## 多flavor或多buildType配置\n\nmaven上传是默认不支持多flavor的，如果library配置了`publishNonDefault true`, **在执行`gradlew upload`时会将releas和debug的aar包都上传上去，导致在引用时无法找到aar**, 这点千万要注意, 需要修改gradle配置\n\n```java\nuploadArchives {\n    repositories {\n        mavenDeployer {\n            repository(url: uri(uploadUrl)){\n                //配置账号密码\n                authentication(userName: \"userName\", password: \"password\")\n            }\n            android.libraryVariants.all { variant ->\n                def isFlavor = !variant.flavorName.isEmpty()\n                def isRelease = variant.buildType.name == \"release\"\n\n                //只上传release的，如果没有多个flavor的去掉isFlavor的判断\n                if(isRelease && isFlavor){\n                    def _flavorName = \"${variant.flavorName}\"\n\n                    //此处需要再进行一次过滤，否则debug的会被上传上去\n                    addFilter(_flavorName) { artifact, file ->\n                        (artifact.attributes.classifier == \"${variant.flavorName}Release\")\n                    }\n                    pom(_flavorName).version = android.defaultConfig.versionName\n                    pom(_flavorName).groupId = \"ARTIFACT_ID\"\n                    pom(_flavorName).artifactId = \"GROUP_ID-${_flavorName}\"\n                }\n            }\n        }\n    }\n}\n```\n\n\n## 将源码，java doc等一并上传\n\n```java\n// 指定编码\ntasks.withType(JavaCompile) {\n    options.encoding = \"UTF-8\"\n}\n  \n// 打包源码\ntask sourcesJar(type: Jar) {\n    from android.sourceSets.main.java.srcDirs\n    classifier = 'sources'\n}\n  \ntask javadoc(type: Javadoc) {\n    failOnError  false\n    source = android.sourceSets.main.java.sourceFiles\n    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))\n    classpath += configurations.compile\n}\n  \n// 制作文档(Javadoc)\ntask javadocJar(type: Jar, dependsOn: javadoc) {\n    classifier = 'javadoc'\n    from javadoc.destinationDir\n}\n  \nartifacts {\n    archives sourcesJar\n    archives javadocJar\n}\n```\n\n## 上传jitpack\n\njitpack网址:https://jitpack.io/\n\n添加jitpack的仓库引用:\n\n```java\nmaven { url 'https://jitpack.io' }\n```","slug":"Android-Studio-上传代码到Maven仓库","published":1,"updated":"2018-08-11T17:05:15.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyq0fezk0002zwv7vuh7q8hi","content":"<p>将自己的代码库上传到Maven一般有几个选择:</p>\n<ol>\n<li>本地仓库</li>\n<li>自己搭建的maven私有仓库, 如: Nexus</li>\n<li>上传到Maven</li>\n<li>上传到jcenter</li>\n<li>上传到jitpack，这个上传很方便，比较推荐</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.jianshu.com/p/57f8af15ef9c/\" target=\"_blank\" rel=\"noopener\">Android Studio上传项目到Maven仓库</a></p>\n<h2 id=\"几点注意\"><a href=\"#几点注意\" class=\"headerlink\" title=\"几点注意\"></a>几点注意</h2><ol>\n<li>上传library不能引用aar</li>\n<li>配置了<code>publishNonDefault true</code>会引用上传时将Release和Debug的aar都上传到Maven，所以要么去除要么按照下面的方法配置</li>\n<li>注意如果上传到snapshots测试仓库中，version必须以<code>-SNAPSHOT</code>结尾</li>\n</ol>\n<h2 id=\"Gradle上传配置\"><a href=\"#Gradle上传配置\" class=\"headerlink\" title=\"Gradle上传配置\"></a>Gradle上传配置</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">\"maven\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">def compileMode = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//分别为正式仓库，测试仓库和本地仓库，</span></span><br><span class=\"line\">def releaseUrl = <span class=\"string\">\"http://192.168.1.78:8090/nexus/content/repositories/releases\"</span></span><br><span class=\"line\">def snapshotsUrl = <span class=\"string\">\"http://192.168.1.78:8090/nexus/content/repositories/snapshots/\"</span></span><br><span class=\"line\">def localUrl = <span class=\"string\">'file://'</span> + <span class=\"keyword\">new</span> File(System.getProperty(<span class=\"string\">'user.home'</span>), <span class=\"string\">'.m2/repository'</span>).absolutePath</span><br><span class=\"line\">def uploadUrl = compileMode == <span class=\"number\">1</span> ? snapshotsUrl : compileMode == <span class=\"number\">2</span> ? localUrl : releaseUrl</span><br><span class=\"line\"></span><br><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenDeployer &#123;</span><br><span class=\"line\">            repository(url: uploadUrl) &#123;</span><br><span class=\"line\">                authentication(userName: NAME, password: PASSWORD) <span class=\"comment\">// maven授权信息</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            pom.version = VERSION</span><br><span class=\"line\">            pom.artifactId = ARTIFACT_ID</span><br><span class=\"line\">            pom.groupId = GROUP_ID   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意如果上传到snapshots测试仓库中，version必须以<code>-SNAPSHOT</code>结尾</p>\n</blockquote>\n<h2 id=\"多flavor或多buildType配置\"><a href=\"#多flavor或多buildType配置\" class=\"headerlink\" title=\"多flavor或多buildType配置\"></a>多flavor或多buildType配置</h2><p>maven上传是默认不支持多flavor的，如果library配置了<code>publishNonDefault true</code>, <strong>在执行<code>gradlew upload</code>时会将releas和debug的aar包都上传上去，导致在引用时无法找到aar</strong>, 这点千万要注意, 需要修改gradle配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenDeployer &#123;</span><br><span class=\"line\">            repository(url: uri(uploadUrl))&#123;</span><br><span class=\"line\">                <span class=\"comment\">//配置账号密码</span></span><br><span class=\"line\">                authentication(userName: <span class=\"string\">\"userName\"</span>, password: <span class=\"string\">\"password\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            android.libraryVariants.all &#123; variant -&gt;</span><br><span class=\"line\">                def isFlavor = !variant.flavorName.isEmpty()</span><br><span class=\"line\">                def isRelease = variant.buildType.name == <span class=\"string\">\"release\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//只上传release的，如果没有多个flavor的去掉isFlavor的判断</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isRelease &amp;&amp; isFlavor)&#123;</span><br><span class=\"line\">                    def _flavorName = <span class=\"string\">\"$&#123;variant.flavorName&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//此处需要再进行一次过滤，否则debug的会被上传上去</span></span><br><span class=\"line\">                    addFilter(_flavorName) &#123; artifact, file -&gt;</span><br><span class=\"line\">                        (artifact.attributes.classifier == <span class=\"string\">\"$&#123;variant.flavorName&#125;Release\"</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    pom(_flavorName).version = android.defaultConfig.versionName</span><br><span class=\"line\">                    pom(_flavorName).groupId = <span class=\"string\">\"ARTIFACT_ID\"</span></span><br><span class=\"line\">                    pom(_flavorName).artifactId = <span class=\"string\">\"GROUP_ID-$&#123;_flavorName&#125;\"</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"将源码，java-doc等一并上传\"><a href=\"#将源码，java-doc等一并上传\" class=\"headerlink\" title=\"将源码，java doc等一并上传\"></a>将源码，java doc等一并上传</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定编码</span></span><br><span class=\"line\">tasks.withType(JavaCompile) &#123;</span><br><span class=\"line\">    options.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 打包源码</span></span><br><span class=\"line\"><span class=\"function\">task <span class=\"title\">sourcesJar</span><span class=\"params\">(type: Jar)</span> </span>&#123;</span><br><span class=\"line\">    from android.sourceSets.main.java.srcDirs</span><br><span class=\"line\">    classifier = <span class=\"string\">'sources'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\">task <span class=\"title\">javadoc</span><span class=\"params\">(type: Javadoc)</span> </span>&#123;</span><br><span class=\"line\">    failOnError  <span class=\"keyword\">false</span></span><br><span class=\"line\">    source = android.sourceSets.main.java.sourceFiles</span><br><span class=\"line\">    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))</span><br><span class=\"line\">    classpath += configurations.compile</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 制作文档(Javadoc)</span></span><br><span class=\"line\"><span class=\"function\">task <span class=\"title\">javadocJar</span><span class=\"params\">(type: Jar, dependsOn: javadoc)</span> </span>&#123;</span><br><span class=\"line\">    classifier = <span class=\"string\">'javadoc'</span></span><br><span class=\"line\">    from javadoc.destinationDir</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">artifacts &#123;</span><br><span class=\"line\">    archives sourcesJar</span><br><span class=\"line\">    archives javadocJar</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"上传jitpack\"><a href=\"#上传jitpack\" class=\"headerlink\" title=\"上传jitpack\"></a>上传jitpack</h2><p>jitpack网址:<a href=\"https://jitpack.io/\" target=\"_blank\" rel=\"noopener\">https://jitpack.io/</a></p>\n<p>添加jitpack的仓库引用:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maven &#123; url <span class=\"string\">'https://jitpack.io'</span> &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>将自己的代码库上传到Maven一般有几个选择:</p>\n<ol>\n<li>本地仓库</li>\n<li>自己搭建的maven私有仓库, 如: Nexus</li>\n<li>上传到Maven</li>\n<li>上传到jcenter</li>\n<li>上传到jitpack，这个上传很方便，比较推荐</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.jianshu.com/p/57f8af15ef9c/\" target=\"_blank\" rel=\"noopener\">Android Studio上传项目到Maven仓库</a></p>\n<h2 id=\"几点注意\"><a href=\"#几点注意\" class=\"headerlink\" title=\"几点注意\"></a>几点注意</h2><ol>\n<li>上传library不能引用aar</li>\n<li>配置了<code>publishNonDefault true</code>会引用上传时将Release和Debug的aar都上传到Maven，所以要么去除要么按照下面的方法配置</li>\n<li>注意如果上传到snapshots测试仓库中，version必须以<code>-SNAPSHOT</code>结尾</li>\n</ol>\n<h2 id=\"Gradle上传配置\"><a href=\"#Gradle上传配置\" class=\"headerlink\" title=\"Gradle上传配置\"></a>Gradle上传配置</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">\"maven\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">def compileMode = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//分别为正式仓库，测试仓库和本地仓库，</span></span><br><span class=\"line\">def releaseUrl = <span class=\"string\">\"http://192.168.1.78:8090/nexus/content/repositories/releases\"</span></span><br><span class=\"line\">def snapshotsUrl = <span class=\"string\">\"http://192.168.1.78:8090/nexus/content/repositories/snapshots/\"</span></span><br><span class=\"line\">def localUrl = <span class=\"string\">'file://'</span> + <span class=\"keyword\">new</span> File(System.getProperty(<span class=\"string\">'user.home'</span>), <span class=\"string\">'.m2/repository'</span>).absolutePath</span><br><span class=\"line\">def uploadUrl = compileMode == <span class=\"number\">1</span> ? snapshotsUrl : compileMode == <span class=\"number\">2</span> ? localUrl : releaseUrl</span><br><span class=\"line\"></span><br><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenDeployer &#123;</span><br><span class=\"line\">            repository(url: uploadUrl) &#123;</span><br><span class=\"line\">                authentication(userName: NAME, password: PASSWORD) <span class=\"comment\">// maven授权信息</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            pom.version = VERSION</span><br><span class=\"line\">            pom.artifactId = ARTIFACT_ID</span><br><span class=\"line\">            pom.groupId = GROUP_ID   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意如果上传到snapshots测试仓库中，version必须以<code>-SNAPSHOT</code>结尾</p>\n</blockquote>\n<h2 id=\"多flavor或多buildType配置\"><a href=\"#多flavor或多buildType配置\" class=\"headerlink\" title=\"多flavor或多buildType配置\"></a>多flavor或多buildType配置</h2><p>maven上传是默认不支持多flavor的，如果library配置了<code>publishNonDefault true</code>, <strong>在执行<code>gradlew upload</code>时会将releas和debug的aar包都上传上去，导致在引用时无法找到aar</strong>, 这点千万要注意, 需要修改gradle配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenDeployer &#123;</span><br><span class=\"line\">            repository(url: uri(uploadUrl))&#123;</span><br><span class=\"line\">                <span class=\"comment\">//配置账号密码</span></span><br><span class=\"line\">                authentication(userName: <span class=\"string\">\"userName\"</span>, password: <span class=\"string\">\"password\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            android.libraryVariants.all &#123; variant -&gt;</span><br><span class=\"line\">                def isFlavor = !variant.flavorName.isEmpty()</span><br><span class=\"line\">                def isRelease = variant.buildType.name == <span class=\"string\">\"release\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//只上传release的，如果没有多个flavor的去掉isFlavor的判断</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isRelease &amp;&amp; isFlavor)&#123;</span><br><span class=\"line\">                    def _flavorName = <span class=\"string\">\"$&#123;variant.flavorName&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//此处需要再进行一次过滤，否则debug的会被上传上去</span></span><br><span class=\"line\">                    addFilter(_flavorName) &#123; artifact, file -&gt;</span><br><span class=\"line\">                        (artifact.attributes.classifier == <span class=\"string\">\"$&#123;variant.flavorName&#125;Release\"</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    pom(_flavorName).version = android.defaultConfig.versionName</span><br><span class=\"line\">                    pom(_flavorName).groupId = <span class=\"string\">\"ARTIFACT_ID\"</span></span><br><span class=\"line\">                    pom(_flavorName).artifactId = <span class=\"string\">\"GROUP_ID-$&#123;_flavorName&#125;\"</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"将源码，java-doc等一并上传\"><a href=\"#将源码，java-doc等一并上传\" class=\"headerlink\" title=\"将源码，java doc等一并上传\"></a>将源码，java doc等一并上传</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定编码</span></span><br><span class=\"line\">tasks.withType(JavaCompile) &#123;</span><br><span class=\"line\">    options.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 打包源码</span></span><br><span class=\"line\"><span class=\"function\">task <span class=\"title\">sourcesJar</span><span class=\"params\">(type: Jar)</span> </span>&#123;</span><br><span class=\"line\">    from android.sourceSets.main.java.srcDirs</span><br><span class=\"line\">    classifier = <span class=\"string\">'sources'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\">task <span class=\"title\">javadoc</span><span class=\"params\">(type: Javadoc)</span> </span>&#123;</span><br><span class=\"line\">    failOnError  <span class=\"keyword\">false</span></span><br><span class=\"line\">    source = android.sourceSets.main.java.sourceFiles</span><br><span class=\"line\">    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))</span><br><span class=\"line\">    classpath += configurations.compile</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 制作文档(Javadoc)</span></span><br><span class=\"line\"><span class=\"function\">task <span class=\"title\">javadocJar</span><span class=\"params\">(type: Jar, dependsOn: javadoc)</span> </span>&#123;</span><br><span class=\"line\">    classifier = <span class=\"string\">'javadoc'</span></span><br><span class=\"line\">    from javadoc.destinationDir</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">artifacts &#123;</span><br><span class=\"line\">    archives sourcesJar</span><br><span class=\"line\">    archives javadocJar</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"上传jitpack\"><a href=\"#上传jitpack\" class=\"headerlink\" title=\"上传jitpack\"></a>上传jitpack</h2><p>jitpack网址:<a href=\"https://jitpack.io/\" target=\"_blank\" rel=\"noopener\">https://jitpack.io/</a></p>\n<p>添加jitpack的仓库引用:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maven &#123; url <span class=\"string\">'https://jitpack.io'</span> &#125;</span><br></pre></td></tr></table></figure>"},{"title":"Android性能优化","date":"2018-04-15T15:12:55.000Z","_content":"\n工作几年，主要负责过`InCallUI`和`Launcher`，虽然不多，但在性能优化上还是有一些自己的经验和看法，在这里记录一下。\n\n首先我认为性能优化最核心的思想就是**提升用户体验**，何谓体验? 可能不同的人有不同的答案. \n在我看来一定要站在用户角度才知道优化什么。\n有点杂乱，先记录要点， 以后再详细写：\n1. 启动速度。关键点是要把第一页的内容尽早展现给用户。初始化流程; 启动页白屏; 布局层次; 懒加载; cpu运行情况\n2. 流畅性。关键点是主线程的耗时流程。布局层次，布局重用，过度绘制，RecyclerView优化，动画优化，自定义布局和View，耗时操作移去子线程\n3. 内存。图片优化(不用过大的背景图，RGB555，使用Shape或适量图，tint涂色)，慎用三方库，及时释放不用的内存。\n\n使用工具检测\n1. TraceView找出耗时方法\n2. log输出真正的耗时，方便对比优化前后\n3. 过度绘制显示绘制层次\n4. 布局查看器查看布局层次结构\n5. Systrace查看流程度\n6. CPU Profiler检查线程运行忙碌情况\n7. Memory Profiler检查内存占用情况\n8. Lint代码检查工具检查代码\n","source":"_posts/Android性能优化.md","raw":"---\ntitle: Android性能优化\ndate: 2018-04-15 23:12:55\ntags: Android\n---\n\n工作几年，主要负责过`InCallUI`和`Launcher`，虽然不多，但在性能优化上还是有一些自己的经验和看法，在这里记录一下。\n\n首先我认为性能优化最核心的思想就是**提升用户体验**，何谓体验? 可能不同的人有不同的答案. \n在我看来一定要站在用户角度才知道优化什么。\n有点杂乱，先记录要点， 以后再详细写：\n1. 启动速度。关键点是要把第一页的内容尽早展现给用户。初始化流程; 启动页白屏; 布局层次; 懒加载; cpu运行情况\n2. 流畅性。关键点是主线程的耗时流程。布局层次，布局重用，过度绘制，RecyclerView优化，动画优化，自定义布局和View，耗时操作移去子线程\n3. 内存。图片优化(不用过大的背景图，RGB555，使用Shape或适量图，tint涂色)，慎用三方库，及时释放不用的内存。\n\n使用工具检测\n1. TraceView找出耗时方法\n2. log输出真正的耗时，方便对比优化前后\n3. 过度绘制显示绘制层次\n4. 布局查看器查看布局层次结构\n5. Systrace查看流程度\n6. CPU Profiler检查线程运行忙碌情况\n7. Memory Profiler检查内存占用情况\n8. Lint代码检查工具检查代码\n","slug":"Android性能优化","published":1,"updated":"2018-07-04T15:25:07.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyq0fezq0004zwv77uzjuk2i","content":"<p>工作几年，主要负责过<code>InCallUI</code>和<code>Launcher</code>，虽然不多，但在性能优化上还是有一些自己的经验和看法，在这里记录一下。</p>\n<p>首先我认为性能优化最核心的思想就是<strong>提升用户体验</strong>，何谓体验? 可能不同的人有不同的答案.<br>在我看来一定要站在用户角度才知道优化什么。<br>有点杂乱，先记录要点， 以后再详细写：</p>\n<ol>\n<li>启动速度。关键点是要把第一页的内容尽早展现给用户。初始化流程; 启动页白屏; 布局层次; 懒加载; cpu运行情况</li>\n<li>流畅性。关键点是主线程的耗时流程。布局层次，布局重用，过度绘制，RecyclerView优化，动画优化，自定义布局和View，耗时操作移去子线程</li>\n<li>内存。图片优化(不用过大的背景图，RGB555，使用Shape或适量图，tint涂色)，慎用三方库，及时释放不用的内存。</li>\n</ol>\n<p>使用工具检测</p>\n<ol>\n<li>TraceView找出耗时方法</li>\n<li>log输出真正的耗时，方便对比优化前后</li>\n<li>过度绘制显示绘制层次</li>\n<li>布局查看器查看布局层次结构</li>\n<li>Systrace查看流程度</li>\n<li>CPU Profiler检查线程运行忙碌情况</li>\n<li>Memory Profiler检查内存占用情况</li>\n<li>Lint代码检查工具检查代码</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>工作几年，主要负责过<code>InCallUI</code>和<code>Launcher</code>，虽然不多，但在性能优化上还是有一些自己的经验和看法，在这里记录一下。</p>\n<p>首先我认为性能优化最核心的思想就是<strong>提升用户体验</strong>，何谓体验? 可能不同的人有不同的答案.<br>在我看来一定要站在用户角度才知道优化什么。<br>有点杂乱，先记录要点， 以后再详细写：</p>\n<ol>\n<li>启动速度。关键点是要把第一页的内容尽早展现给用户。初始化流程; 启动页白屏; 布局层次; 懒加载; cpu运行情况</li>\n<li>流畅性。关键点是主线程的耗时流程。布局层次，布局重用，过度绘制，RecyclerView优化，动画优化，自定义布局和View，耗时操作移去子线程</li>\n<li>内存。图片优化(不用过大的背景图，RGB555，使用Shape或适量图，tint涂色)，慎用三方库，及时释放不用的内存。</li>\n</ol>\n<p>使用工具检测</p>\n<ol>\n<li>TraceView找出耗时方法</li>\n<li>log输出真正的耗时，方便对比优化前后</li>\n<li>过度绘制显示绘制层次</li>\n<li>布局查看器查看布局层次结构</li>\n<li>Systrace查看流程度</li>\n<li>CPU Profiler检查线程运行忙碌情况</li>\n<li>Memory Profiler检查内存占用情况</li>\n<li>Lint代码检查工具检查代码</li>\n</ol>\n"},{"title":"Electron笔记","date":"2018-07-07T09:50:11.000Z","_content":"\n\n参考:\n\n官网: https://electronjs.org/docs\n[Electron: 从零开始写一个记事本app](https://www.jianshu.com/p/57d910008612)\n\n\n## 环境安装\n\n安装`node.js` : https://nodejs.org/en/\n\n安装npm：\n\nnpm可能用不了，可以用cnpm, 官网https://npm.taobao.org/\n安装命令:\n\n```bash\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n**安装`electron`包**:\n\n```bash\n>cnpm install -g electron\nOR\n>npm install electron -g\n```\n\n**验证electron安装成功**: 运行`electron`\n\n**安装Electron-forge**\n这是一个类似于傻瓜开发包的Electron工具整合项目。具体介绍点击 这里。\n```bash\ncnpm install -g electron-forge\n```\n\n\n## 新建项目\n\n通过以下命令创建项目:\n```bash\nelectron-forge init [项目名]\n```","source":"_posts/Electron笔记.md","raw":"---\ntitle: Electron笔记\ndate: 2018-07-07 17:50:11\ntags:\n---\n\n\n参考:\n\n官网: https://electronjs.org/docs\n[Electron: 从零开始写一个记事本app](https://www.jianshu.com/p/57d910008612)\n\n\n## 环境安装\n\n安装`node.js` : https://nodejs.org/en/\n\n安装npm：\n\nnpm可能用不了，可以用cnpm, 官网https://npm.taobao.org/\n安装命令:\n\n```bash\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n**安装`electron`包**:\n\n```bash\n>cnpm install -g electron\nOR\n>npm install electron -g\n```\n\n**验证electron安装成功**: 运行`electron`\n\n**安装Electron-forge**\n这是一个类似于傻瓜开发包的Electron工具整合项目。具体介绍点击 这里。\n```bash\ncnpm install -g electron-forge\n```\n\n\n## 新建项目\n\n通过以下命令创建项目:\n```bash\nelectron-forge init [项目名]\n```","slug":"Electron笔记","published":1,"updated":"2018-07-07T11:13:29.451Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyq0fezs0005zwv747icj7wb","content":"<p>参考:</p>\n<p>官网: <a href=\"https://electronjs.org/docs\" target=\"_blank\" rel=\"noopener\">https://electronjs.org/docs</a><br><a href=\"https://www.jianshu.com/p/57d910008612\" target=\"_blank\" rel=\"noopener\">Electron: 从零开始写一个记事本app</a></p>\n<h2 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h2><p>安装<code>node.js</code> : <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/</a></p>\n<p>安装npm：</p>\n<p>npm可能用不了，可以用cnpm, 官网<a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/</a><br>安装命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p><strong>安装<code>electron</code>包</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;cnpm install -g electron</span><br><span class=\"line\">OR</span><br><span class=\"line\">&gt;npm install electron -g</span><br></pre></td></tr></table></figure>\n<p><strong>验证electron安装成功</strong>: 运行<code>electron</code></p>\n<p><strong>安装Electron-forge</strong><br>这是一个类似于傻瓜开发包的Electron工具整合项目。具体介绍点击 这里。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install -g electron-forge</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>通过以下命令创建项目:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">electron-forge init [项目名]</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考:</p>\n<p>官网: <a href=\"https://electronjs.org/docs\" target=\"_blank\" rel=\"noopener\">https://electronjs.org/docs</a><br><a href=\"https://www.jianshu.com/p/57d910008612\" target=\"_blank\" rel=\"noopener\">Electron: 从零开始写一个记事本app</a></p>\n<h2 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h2><p>安装<code>node.js</code> : <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/</a></p>\n<p>安装npm：</p>\n<p>npm可能用不了，可以用cnpm, 官网<a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/</a><br>安装命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p><strong>安装<code>electron</code>包</strong>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;cnpm install -g electron</span><br><span class=\"line\">OR</span><br><span class=\"line\">&gt;npm install electron -g</span><br></pre></td></tr></table></figure>\n<p><strong>验证electron安装成功</strong>: 运行<code>electron</code></p>\n<p><strong>安装Electron-forge</strong><br>这是一个类似于傻瓜开发包的Electron工具整合项目。具体介绍点击 这里。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install -g electron-forge</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>通过以下命令创建项目:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">electron-forge init [项目名]</span><br></pre></td></tr></table></figure></p>\n"},{"title":"GitHub+Hexo搭建博客笔记","date":"2018-03-04T14:50:40.000Z","_content":"\n## 参考资料\n\n[GitHub+Hexo 搭建个人网站详细教程](https://zhuanlan.zhihu.com/p/26625249?utm_source=com.evernote&utm_medium=social)\n\n## 搭建步骤：\n获得个人网站域名\n- GitHub创建个人仓库\n- 安装Git\n- 安装Node.js\n- 安装Hexo\n- 推送网站\n- 绑定域名\n- 更换主题\n- 初识MarkDown语法\n- 发布文章\n- 寻找图床\n- 个性化设置\n- 其他\n- 附录\n\n<!--more-->\n### Github上创建一个仓库\n名称为：aleaf.github.io\n\n\n### 安装Node.js\n\nHexo基于`Node.js`，`Node.js`下载地址：[Download | Node.js](https://nodejs.org/en/download/) 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v :\n\n### 安装Hexo\n\n使用npm命令安装Hexo，输入：\n```bash\nnpm install -g hexo-cli \n```\n安装完成后，初始化我们的博客，输入：\n```bash\nhexo init blog\n```\n\n为了检测我们的网站雏形，分别按顺序输入以下三条命令：\n\n```\nhexo new test_my_site\n\nhexo g\n\nhexo s\n```\n\n这些命令在后面作介绍，完成后，打开浏览器输入地址：\n```\nlocalhost:4000\n```\n\n常用命令:\n```\nnpm install hexo -g #安装Hexo\nnpm update hexo -g #升级 \nhexo init #初始化博客\n\n命令简写\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo g == hexo generate #生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy #部署\n\nhexo server #Hexo会监视文件变动并自动更新，无须重启服务器\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\nhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令\n```\n\n### 推送网站\n打开站点的配置文件_config.yml，翻到最后修改为：\n\n```bash\ndeploy:\n  type: git\n  repo: git@github.com:ToryCrox/aleaf.github.io.git\n  branch: master\n```\n\n保存站点配置文件\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n这时，我们分别输入三条命令：\n\n```bash\nhexo clean \nhexo g \nhexo d\n```\n\n### hexo配置\n\n#### Next主题配置官方文档\n\n> - [主题配置 - NexT 使用文档](http://theme-next.iissnan.com/theme-settings.html)  \n> - [第三方服务集成 - NexT 使用文档](http://theme-next.iissnan.com/third-party-services.html)  \n> - [内置标签 - NexT 使用文档](http://theme-next.iissnan.com/tag-plugins.html)  \n> - [进阶设定 - NexT 使用文档](eme-next.iissnan.com/advanced-settings.html)\n\n### 个性个配置\n> - [hexo的next主题个性化配置教程](https://segmentfault.com/a/1190000009544924#articleHeader12)\n\n#### 更换主题\ntheme下载：https://hexo.io/themes/\n\n```\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n打开站点`_config.yml`文件，配置主题为next:\n\n```yml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next\n```\n\n打开主题的_config.yml配置文件，不是站点主题文件，找到Scheme Settings：\nnext主题有三个样式，使用是Pisces\n\n#### 设置为中文\n找到主题的_config.yml，修改\n\n```yml\nlanguage: zh-Hans\n```\n\n#### 个性化配置\n\n主要个性主题配置文件`_config.yml`\n\n社交主页设置, 找到`social`\n```yml\nsocial:\n  GitHub: https://github.com/ToryCrox\n```\n\n#### 增加侧栏菜单条目\n\n默认的侧栏菜单条目有：首页、归档、标签、关于、搜索等。如果你想要增加其他的菜单条目，修改主题配置文件`_config.yml`里的`Menu Settings`中的`menu`和`menu_icons`两个地方\n\n设置侧栏的位置:修改 主题配置文件 中的 `sidebar` 字段:\n```yml\nsidebar:\n  position: left\n```\n见:http://theme-next.iissnan.com/getting-started.html#sidebar-settings\n\n#### 启用搜索功能\n自定义站点内容搜索Local Search\n\n1. 安装 `hexo-generator-searchdb`，在站点的根目录下执行以下命令：\n```bash\n$ npm install hexo-generator-searchdb --save\n```\n\n2. 编辑 站点配置文件，新增以下内容到任意位置：\n```yml\nsearch:\n  path: search.xml\n  field: post Toggle strikethrough\n  format: html\n  limit: 10000\n```\n\n3. 编辑 主题配置文件，启用本地搜索功能：\n```yml\n# Local search\nlocal_search:\n  enable: true\n```\n\n#### 添加标签页面\n\n1. 使用命令新建一个标签页面\n```bash\nhexo new page tags\n```\n\n2. 编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：\n```yml\ntitle: 标签\ndate: 2014-12-22 12:39:04\ntype: \"tags\"\n```\n\n3. 修改菜单，编辑主题配置文件 ， 添加 tags 到 menu 中\n```yml\nmenu:\n  home: /\n  archives: /archives\n  tags: /tags\n```\n\n\n[主题配置 - NexT 使用文档](https://link.zhihu.com/?target=http%3A//theme-next.iissnan.com/theme-settings.html)\n\n2. 编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：\n```\ntitle: 标签\ndate: 2014-12-22 12:39:04\ntype: \"tags\"\n```\n\n3. 修改菜单，编辑主题配置文件 ， 添加 tags 到 menu 中\n```ini\nmenu:\n  home: /\n  archives: /archives\n  tags: /tags\n```\n\n#### 让首页不显示全文\n有两种方法，参考: [Hexo Next 阅读全文设置 Next主题怎么让首页不显示全文](http://www.5isjyx.com/coding/201704/nextreadthefulltext.html)\n\n1. `themes/next` 目录下的 `_config.yml` 文件，找到这段代码\n\n```yml\n# Automatically Excerpt. Not recommend.\n# Please use <!-- more --> in the post to control excerpt accurately.\nauto_excerpt:\n  enable: false\n  length: 150\n```\n\n把 `enable` 的 `false` 改成 `true` 就行了，然后 `length` 是设定文章预览的文本长度\n\n2. 写 md 文章的时候，可以在内容中加上 `<!--more-->`，这样首页和列表页展示的文章内容就是 `<!--more-->` 之前的文字，而之后的就不会显示了。\n\n> 虽然第一种方法配置简单，但是显示的预览会乱，所以我选第二种方法\n\n#### 设置首页文章数量\n\n首页默认显示10篇文章，会导致首页很长，可以在站点`_config.yml`文件中，搜索`per_page`，修改显示数量\n```yml\n# Home page setting\n# path: Root path for your blogs index page. (default = '')\n# per_page: Posts displayed per page. (0 = disable pagination)\n# order_by: Posts order. (Order by date descending by default)\nindex_generator:\n  path: ''\n  per_page: 5\n  order_by: -date\n```\n\n参考: [Hexo程序archive页面数量设置](http://www.yuzhewo.com/2015/11/21/Hexo%E7%A8%8B%E5%BA%8Farchive%E9%A1%B5%E9%9D%A2%E6%95%B0%E9%87%8F%E8%AE%BE%E7%BD%AE/)","source":"_posts/GitHub-Hexo搭建博客笔记.md","raw":"---\ntitle: GitHub+Hexo搭建博客笔记\ndate: 2018-03-04 22:50:40\ntags: \"hexo\"\n---\n\n## 参考资料\n\n[GitHub+Hexo 搭建个人网站详细教程](https://zhuanlan.zhihu.com/p/26625249?utm_source=com.evernote&utm_medium=social)\n\n## 搭建步骤：\n获得个人网站域名\n- GitHub创建个人仓库\n- 安装Git\n- 安装Node.js\n- 安装Hexo\n- 推送网站\n- 绑定域名\n- 更换主题\n- 初识MarkDown语法\n- 发布文章\n- 寻找图床\n- 个性化设置\n- 其他\n- 附录\n\n<!--more-->\n### Github上创建一个仓库\n名称为：aleaf.github.io\n\n\n### 安装Node.js\n\nHexo基于`Node.js`，`Node.js`下载地址：[Download | Node.js](https://nodejs.org/en/download/) 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v :\n\n### 安装Hexo\n\n使用npm命令安装Hexo，输入：\n```bash\nnpm install -g hexo-cli \n```\n安装完成后，初始化我们的博客，输入：\n```bash\nhexo init blog\n```\n\n为了检测我们的网站雏形，分别按顺序输入以下三条命令：\n\n```\nhexo new test_my_site\n\nhexo g\n\nhexo s\n```\n\n这些命令在后面作介绍，完成后，打开浏览器输入地址：\n```\nlocalhost:4000\n```\n\n常用命令:\n```\nnpm install hexo -g #安装Hexo\nnpm update hexo -g #升级 \nhexo init #初始化博客\n\n命令简写\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo g == hexo generate #生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy #部署\n\nhexo server #Hexo会监视文件变动并自动更新，无须重启服务器\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\nhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令\n```\n\n### 推送网站\n打开站点的配置文件_config.yml，翻到最后修改为：\n\n```bash\ndeploy:\n  type: git\n  repo: git@github.com:ToryCrox/aleaf.github.io.git\n  branch: master\n```\n\n保存站点配置文件\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n这时，我们分别输入三条命令：\n\n```bash\nhexo clean \nhexo g \nhexo d\n```\n\n### hexo配置\n\n#### Next主题配置官方文档\n\n> - [主题配置 - NexT 使用文档](http://theme-next.iissnan.com/theme-settings.html)  \n> - [第三方服务集成 - NexT 使用文档](http://theme-next.iissnan.com/third-party-services.html)  \n> - [内置标签 - NexT 使用文档](http://theme-next.iissnan.com/tag-plugins.html)  \n> - [进阶设定 - NexT 使用文档](eme-next.iissnan.com/advanced-settings.html)\n\n### 个性个配置\n> - [hexo的next主题个性化配置教程](https://segmentfault.com/a/1190000009544924#articleHeader12)\n\n#### 更换主题\ntheme下载：https://hexo.io/themes/\n\n```\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n打开站点`_config.yml`文件，配置主题为next:\n\n```yml\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next\n```\n\n打开主题的_config.yml配置文件，不是站点主题文件，找到Scheme Settings：\nnext主题有三个样式，使用是Pisces\n\n#### 设置为中文\n找到主题的_config.yml，修改\n\n```yml\nlanguage: zh-Hans\n```\n\n#### 个性化配置\n\n主要个性主题配置文件`_config.yml`\n\n社交主页设置, 找到`social`\n```yml\nsocial:\n  GitHub: https://github.com/ToryCrox\n```\n\n#### 增加侧栏菜单条目\n\n默认的侧栏菜单条目有：首页、归档、标签、关于、搜索等。如果你想要增加其他的菜单条目，修改主题配置文件`_config.yml`里的`Menu Settings`中的`menu`和`menu_icons`两个地方\n\n设置侧栏的位置:修改 主题配置文件 中的 `sidebar` 字段:\n```yml\nsidebar:\n  position: left\n```\n见:http://theme-next.iissnan.com/getting-started.html#sidebar-settings\n\n#### 启用搜索功能\n自定义站点内容搜索Local Search\n\n1. 安装 `hexo-generator-searchdb`，在站点的根目录下执行以下命令：\n```bash\n$ npm install hexo-generator-searchdb --save\n```\n\n2. 编辑 站点配置文件，新增以下内容到任意位置：\n```yml\nsearch:\n  path: search.xml\n  field: post Toggle strikethrough\n  format: html\n  limit: 10000\n```\n\n3. 编辑 主题配置文件，启用本地搜索功能：\n```yml\n# Local search\nlocal_search:\n  enable: true\n```\n\n#### 添加标签页面\n\n1. 使用命令新建一个标签页面\n```bash\nhexo new page tags\n```\n\n2. 编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：\n```yml\ntitle: 标签\ndate: 2014-12-22 12:39:04\ntype: \"tags\"\n```\n\n3. 修改菜单，编辑主题配置文件 ， 添加 tags 到 menu 中\n```yml\nmenu:\n  home: /\n  archives: /archives\n  tags: /tags\n```\n\n\n[主题配置 - NexT 使用文档](https://link.zhihu.com/?target=http%3A//theme-next.iissnan.com/theme-settings.html)\n\n2. 编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：\n```\ntitle: 标签\ndate: 2014-12-22 12:39:04\ntype: \"tags\"\n```\n\n3. 修改菜单，编辑主题配置文件 ， 添加 tags 到 menu 中\n```ini\nmenu:\n  home: /\n  archives: /archives\n  tags: /tags\n```\n\n#### 让首页不显示全文\n有两种方法，参考: [Hexo Next 阅读全文设置 Next主题怎么让首页不显示全文](http://www.5isjyx.com/coding/201704/nextreadthefulltext.html)\n\n1. `themes/next` 目录下的 `_config.yml` 文件，找到这段代码\n\n```yml\n# Automatically Excerpt. Not recommend.\n# Please use <!-- more --> in the post to control excerpt accurately.\nauto_excerpt:\n  enable: false\n  length: 150\n```\n\n把 `enable` 的 `false` 改成 `true` 就行了，然后 `length` 是设定文章预览的文本长度\n\n2. 写 md 文章的时候，可以在内容中加上 `<!--more-->`，这样首页和列表页展示的文章内容就是 `<!--more-->` 之前的文字，而之后的就不会显示了。\n\n> 虽然第一种方法配置简单，但是显示的预览会乱，所以我选第二种方法\n\n#### 设置首页文章数量\n\n首页默认显示10篇文章，会导致首页很长，可以在站点`_config.yml`文件中，搜索`per_page`，修改显示数量\n```yml\n# Home page setting\n# path: Root path for your blogs index page. (default = '')\n# per_page: Posts displayed per page. (0 = disable pagination)\n# order_by: Posts order. (Order by date descending by default)\nindex_generator:\n  path: ''\n  per_page: 5\n  order_by: -date\n```\n\n参考: [Hexo程序archive页面数量设置](http://www.yuzhewo.com/2015/11/21/Hexo%E7%A8%8B%E5%BA%8Farchive%E9%A1%B5%E9%9D%A2%E6%95%B0%E9%87%8F%E8%AE%BE%E7%BD%AE/)","slug":"GitHub-Hexo搭建博客笔记","published":1,"updated":"2018-07-04T15:25:07.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyq0fezu0006zwv7s3w8jt19","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://zhuanlan.zhihu.com/p/26625249?utm_source=com.evernote&amp;utm_medium=social\" target=\"_blank\" rel=\"noopener\">GitHub+Hexo 搭建个人网站详细教程</a></p>\n<h2 id=\"搭建步骤：\"><a href=\"#搭建步骤：\" class=\"headerlink\" title=\"搭建步骤：\"></a>搭建步骤：</h2><p>获得个人网站域名</p>\n<ul>\n<li>GitHub创建个人仓库</li>\n<li>安装Git</li>\n<li>安装Node.js</li>\n<li>安装Hexo</li>\n<li>推送网站</li>\n<li>绑定域名</li>\n<li>更换主题</li>\n<li>初识MarkDown语法</li>\n<li>发布文章</li>\n<li>寻找图床</li>\n<li>个性化设置</li>\n<li>其他</li>\n<li>附录</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"Github上创建一个仓库\"><a href=\"#Github上创建一个仓库\" class=\"headerlink\" title=\"Github上创建一个仓库\"></a>Github上创建一个仓库</h3><p>名称为：aleaf.github.io</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>Hexo基于<code>Node.js</code>，<code>Node.js</code>下载地址：<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v :</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>使用npm命令安装Hexo，输入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>安装完成后，初始化我们的博客，输入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure></p>\n<p>为了检测我们的网站雏形，分别按顺序输入以下三条命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new test_my_site</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>这些命令在后面作介绍，完成后，打开浏览器输入地址：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:4000</span><br></pre></td></tr></table></figure></p>\n<p>常用命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo -g #安装Hexo</span><br><span class=\"line\">npm update hexo -g #升级 </span><br><span class=\"line\">hexo init #初始化博客</span><br><span class=\"line\"></span><br><span class=\"line\">命令简写</span><br><span class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class=\"line\">hexo g == hexo generate #生成</span><br><span class=\"line\">hexo s == hexo server #启动服务预览</span><br><span class=\"line\">hexo d == hexo deploy #部署</span><br><span class=\"line\"></span><br><span class=\"line\">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class=\"line\">hexo server -s #静态模式</span><br><span class=\"line\">hexo server -p 5000 #更改端口</span><br><span class=\"line\">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class=\"line\">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"推送网站\"><a href=\"#推送网站\" class=\"headerlink\" title=\"推送网站\"></a>推送网站</h3><p>打开站点的配置文件_config.yml，翻到最后修改为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: git@github.com:ToryCrox/aleaf.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>保存站点配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>这时，我们分别输入三条命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean </span><br><span class=\"line\">hexo g </span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo配置\"><a href=\"#hexo配置\" class=\"headerlink\" title=\"hexo配置\"></a>hexo配置</h3><h4 id=\"Next主题配置官方文档\"><a href=\"#Next主题配置官方文档\" class=\"headerlink\" title=\"Next主题配置官方文档\"></a>Next主题配置官方文档</h4><blockquote>\n<ul>\n<li><a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"noopener\">主题配置 - NexT 使用文档</a>  </li>\n<li><a href=\"http://theme-next.iissnan.com/third-party-services.html\" target=\"_blank\" rel=\"noopener\">第三方服务集成 - NexT 使用文档</a>  </li>\n<li><a href=\"http://theme-next.iissnan.com/tag-plugins.html\" target=\"_blank\" rel=\"noopener\">内置标签 - NexT 使用文档</a>  </li>\n<li><a href=\"eme-next.iissnan.com/advanced-settings.html\">进阶设定 - NexT 使用文档</a></li>\n</ul>\n</blockquote>\n<h3 id=\"个性个配置\"><a href=\"#个性个配置\" class=\"headerlink\" title=\"个性个配置\"></a>个性个配置</h3><blockquote>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000009544924#articleHeader12\" target=\"_blank\" rel=\"noopener\">hexo的next主题个性化配置教程</a></li>\n</ul>\n</blockquote>\n<h4 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h4><p>theme下载：<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>打开站点<code>_config.yml</code>文件，配置主题为next:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n<p>打开主题的_config.yml配置文件，不是站点主题文件，找到Scheme Settings：<br>next主题有三个样式，使用是Pisces</p>\n<h4 id=\"设置为中文\"><a href=\"#设置为中文\" class=\"headerlink\" title=\"设置为中文\"></a>设置为中文</h4><p>找到主题的_config.yml，修改</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-Hans</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"个性化配置\"><a href=\"#个性化配置\" class=\"headerlink\" title=\"个性化配置\"></a>个性化配置</h4><p>主要个性主题配置文件<code>_config.yml</code></p>\n<p>社交主页设置, 找到<code>social</code><br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\"><span class=\"attr\">  GitHub:</span> <span class=\"attr\">https://github.com/ToryCrox</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"增加侧栏菜单条目\"><a href=\"#增加侧栏菜单条目\" class=\"headerlink\" title=\"增加侧栏菜单条目\"></a>增加侧栏菜单条目</h4><p>默认的侧栏菜单条目有：首页、归档、标签、关于、搜索等。如果你想要增加其他的菜单条目，修改主题配置文件<code>_config.yml</code>里的<code>Menu Settings</code>中的<code>menu</code>和<code>menu_icons</code>两个地方</p>\n<p>设置侧栏的位置:修改 主题配置文件 中的 <code>sidebar</code> 字段:<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span></span><br><span class=\"line\"><span class=\"attr\">  position:</span> <span class=\"string\">left</span></span><br></pre></td></tr></table></figure></p>\n<p>见:<a href=\"http://theme-next.iissnan.com/getting-started.html#sidebar-settings\" target=\"_blank\" rel=\"noopener\">http://theme-next.iissnan.com/getting-started.html#sidebar-settings</a></p>\n<h4 id=\"启用搜索功能\"><a href=\"#启用搜索功能\" class=\"headerlink\" title=\"启用搜索功能\"></a>启用搜索功能</h4><p>自定义站点内容搜索Local Search</p>\n<ol>\n<li><p>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑 站点配置文件，新增以下内容到任意位置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\"><span class=\"attr\">  field:</span> <span class=\"string\">post</span> <span class=\"string\">Toggle</span> <span class=\"string\">strikethrough</span></span><br><span class=\"line\"><span class=\"attr\">  format:</span> <span class=\"string\">html</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑 主题配置文件，启用本地搜索功能：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Local search</span></span><br><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"添加标签页面\"><a href=\"#添加标签页面\" class=\"headerlink\" title=\"添加标签页面\"></a>添加标签页面</h4><ol>\n<li><p>使用命令新建一个标签页面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">标签</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2014</span><span class=\"bullet\">-12</span><span class=\"bullet\">-22</span> <span class=\"number\">12</span><span class=\"string\">:39:04</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">\"tags\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改菜单，编辑主题配置文件 ， 添加 tags 到 menu 中</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span></span><br><span class=\"line\"><span class=\"attr\">  archives:</span> <span class=\"string\">/archives</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"noopener\">主题配置 - NexT 使用文档</a></p>\n<ol>\n<li><p>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2014-12-22 12:39:04</span><br><span class=\"line\">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改菜单，编辑主题配置文件 ， 添加 tags 到 menu 中</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: /</span><br><span class=\"line\">  archives: /archives</span><br><span class=\"line\">  tags: /tags</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"让首页不显示全文\"><a href=\"#让首页不显示全文\" class=\"headerlink\" title=\"让首页不显示全文\"></a>让首页不显示全文</h4><p>有两种方法，参考: <a href=\"http://www.5isjyx.com/coding/201704/nextreadthefulltext.html\" target=\"_blank\" rel=\"noopener\">Hexo Next 阅读全文设置 Next主题怎么让首页不显示全文</a></p>\n<ol>\n<li><code>themes/next</code> 目录下的 <code>_config.yml</code> 文件，找到这段代码</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Automatically Excerpt. Not recommend.</span></span><br><span class=\"line\"><span class=\"comment\"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class=\"line\"><span class=\"attr\">auto_excerpt:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  length:</span> <span class=\"number\">150</span></span><br></pre></td></tr></table></figure>\n<p>把 <code>enable</code> 的 <code>false</code> 改成 <code>true</code> 就行了，然后 <code>length</code> 是设定文章预览的文本长度</p>\n<ol>\n<li>写 md 文章的时候，可以在内容中加上 <code>&lt;!--more--&gt;</code>，这样首页和列表页展示的文章内容就是 <code>&lt;!--more--&gt;</code> 之前的文字，而之后的就不会显示了。</li>\n</ol>\n<blockquote>\n<p>虽然第一种方法配置简单，但是显示的预览会乱，所以我选第二种方法</p>\n</blockquote>\n<h4 id=\"设置首页文章数量\"><a href=\"#设置首页文章数量\" class=\"headerlink\" title=\"设置首页文章数量\"></a>设置首页文章数量</h4><p>首页默认显示10篇文章，会导致首页很长，可以在站点<code>_config.yml</code>文件中，搜索<code>per_page</code>，修改显示数量<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Home page setting</span></span><br><span class=\"line\"><span class=\"comment\"># path: Root path for your blogs index page. (default = '')</span></span><br><span class=\"line\"><span class=\"comment\"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class=\"line\"><span class=\"comment\"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class=\"line\"><span class=\"attr\">index_generator:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"attr\">  per_page:</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attr\">  order_by:</span> <span class=\"bullet\">-date</span></span><br></pre></td></tr></table></figure></p>\n<p>参考: <a href=\"http://www.yuzhewo.com/2015/11/21/Hexo%E7%A8%8B%E5%BA%8Farchive%E9%A1%B5%E9%9D%A2%E6%95%B0%E9%87%8F%E8%AE%BE%E7%BD%AE/\" target=\"_blank\" rel=\"noopener\">Hexo程序archive页面数量设置</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://zhuanlan.zhihu.com/p/26625249?utm_source=com.evernote&amp;utm_medium=social\" target=\"_blank\" rel=\"noopener\">GitHub+Hexo 搭建个人网站详细教程</a></p>\n<h2 id=\"搭建步骤：\"><a href=\"#搭建步骤：\" class=\"headerlink\" title=\"搭建步骤：\"></a>搭建步骤：</h2><p>获得个人网站域名</p>\n<ul>\n<li>GitHub创建个人仓库</li>\n<li>安装Git</li>\n<li>安装Node.js</li>\n<li>安装Hexo</li>\n<li>推送网站</li>\n<li>绑定域名</li>\n<li>更换主题</li>\n<li>初识MarkDown语法</li>\n<li>发布文章</li>\n<li>寻找图床</li>\n<li>个性化设置</li>\n<li>其他</li>\n<li>附录</li>\n</ul>","more":"<h3 id=\"Github上创建一个仓库\"><a href=\"#Github上创建一个仓库\" class=\"headerlink\" title=\"Github上创建一个仓库\"></a>Github上创建一个仓库</h3><p>名称为：aleaf.github.io</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>Hexo基于<code>Node.js</code>，<code>Node.js</code>下载地址：<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v :</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>使用npm命令安装Hexo，输入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>安装完成后，初始化我们的博客，输入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure></p>\n<p>为了检测我们的网站雏形，分别按顺序输入以下三条命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new test_my_site</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>这些命令在后面作介绍，完成后，打开浏览器输入地址：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:4000</span><br></pre></td></tr></table></figure></p>\n<p>常用命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo -g #安装Hexo</span><br><span class=\"line\">npm update hexo -g #升级 </span><br><span class=\"line\">hexo init #初始化博客</span><br><span class=\"line\"></span><br><span class=\"line\">命令简写</span><br><span class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class=\"line\">hexo g == hexo generate #生成</span><br><span class=\"line\">hexo s == hexo server #启动服务预览</span><br><span class=\"line\">hexo d == hexo deploy #部署</span><br><span class=\"line\"></span><br><span class=\"line\">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class=\"line\">hexo server -s #静态模式</span><br><span class=\"line\">hexo server -p 5000 #更改端口</span><br><span class=\"line\">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class=\"line\">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"推送网站\"><a href=\"#推送网站\" class=\"headerlink\" title=\"推送网站\"></a>推送网站</h3><p>打开站点的配置文件_config.yml，翻到最后修改为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: git@github.com:ToryCrox/aleaf.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>保存站点配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>这时，我们分别输入三条命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean </span><br><span class=\"line\">hexo g </span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo配置\"><a href=\"#hexo配置\" class=\"headerlink\" title=\"hexo配置\"></a>hexo配置</h3><h4 id=\"Next主题配置官方文档\"><a href=\"#Next主题配置官方文档\" class=\"headerlink\" title=\"Next主题配置官方文档\"></a>Next主题配置官方文档</h4><blockquote>\n<ul>\n<li><a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"noopener\">主题配置 - NexT 使用文档</a>  </li>\n<li><a href=\"http://theme-next.iissnan.com/third-party-services.html\" target=\"_blank\" rel=\"noopener\">第三方服务集成 - NexT 使用文档</a>  </li>\n<li><a href=\"http://theme-next.iissnan.com/tag-plugins.html\" target=\"_blank\" rel=\"noopener\">内置标签 - NexT 使用文档</a>  </li>\n<li><a href=\"eme-next.iissnan.com/advanced-settings.html\">进阶设定 - NexT 使用文档</a></li>\n</ul>\n</blockquote>\n<h3 id=\"个性个配置\"><a href=\"#个性个配置\" class=\"headerlink\" title=\"个性个配置\"></a>个性个配置</h3><blockquote>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000009544924#articleHeader12\" target=\"_blank\" rel=\"noopener\">hexo的next主题个性化配置教程</a></li>\n</ul>\n</blockquote>\n<h4 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h4><p>theme下载：<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>打开站点<code>_config.yml</code>文件，配置主题为next:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n<p>打开主题的_config.yml配置文件，不是站点主题文件，找到Scheme Settings：<br>next主题有三个样式，使用是Pisces</p>\n<h4 id=\"设置为中文\"><a href=\"#设置为中文\" class=\"headerlink\" title=\"设置为中文\"></a>设置为中文</h4><p>找到主题的_config.yml，修改</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-Hans</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"个性化配置\"><a href=\"#个性化配置\" class=\"headerlink\" title=\"个性化配置\"></a>个性化配置</h4><p>主要个性主题配置文件<code>_config.yml</code></p>\n<p>社交主页设置, 找到<code>social</code><br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\"><span class=\"attr\">  GitHub:</span> <span class=\"attr\">https://github.com/ToryCrox</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"增加侧栏菜单条目\"><a href=\"#增加侧栏菜单条目\" class=\"headerlink\" title=\"增加侧栏菜单条目\"></a>增加侧栏菜单条目</h4><p>默认的侧栏菜单条目有：首页、归档、标签、关于、搜索等。如果你想要增加其他的菜单条目，修改主题配置文件<code>_config.yml</code>里的<code>Menu Settings</code>中的<code>menu</code>和<code>menu_icons</code>两个地方</p>\n<p>设置侧栏的位置:修改 主题配置文件 中的 <code>sidebar</code> 字段:<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span></span><br><span class=\"line\"><span class=\"attr\">  position:</span> <span class=\"string\">left</span></span><br></pre></td></tr></table></figure></p>\n<p>见:<a href=\"http://theme-next.iissnan.com/getting-started.html#sidebar-settings\" target=\"_blank\" rel=\"noopener\">http://theme-next.iissnan.com/getting-started.html#sidebar-settings</a></p>\n<h4 id=\"启用搜索功能\"><a href=\"#启用搜索功能\" class=\"headerlink\" title=\"启用搜索功能\"></a>启用搜索功能</h4><p>自定义站点内容搜索Local Search</p>\n<ol>\n<li><p>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑 站点配置文件，新增以下内容到任意位置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\"><span class=\"attr\">  field:</span> <span class=\"string\">post</span> <span class=\"string\">Toggle</span> <span class=\"string\">strikethrough</span></span><br><span class=\"line\"><span class=\"attr\">  format:</span> <span class=\"string\">html</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑 主题配置文件，启用本地搜索功能：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Local search</span></span><br><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"添加标签页面\"><a href=\"#添加标签页面\" class=\"headerlink\" title=\"添加标签页面\"></a>添加标签页面</h4><ol>\n<li><p>使用命令新建一个标签页面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">标签</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2014</span><span class=\"bullet\">-12</span><span class=\"bullet\">-22</span> <span class=\"number\">12</span><span class=\"string\">:39:04</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">\"tags\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改菜单，编辑主题配置文件 ， 添加 tags 到 menu 中</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span></span><br><span class=\"line\"><span class=\"attr\">  archives:</span> <span class=\"string\">/archives</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"noopener\">主题配置 - NexT 使用文档</a></p>\n<ol>\n<li><p>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2014-12-22 12:39:04</span><br><span class=\"line\">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改菜单，编辑主题配置文件 ， 添加 tags 到 menu 中</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: /</span><br><span class=\"line\">  archives: /archives</span><br><span class=\"line\">  tags: /tags</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"让首页不显示全文\"><a href=\"#让首页不显示全文\" class=\"headerlink\" title=\"让首页不显示全文\"></a>让首页不显示全文</h4><p>有两种方法，参考: <a href=\"http://www.5isjyx.com/coding/201704/nextreadthefulltext.html\" target=\"_blank\" rel=\"noopener\">Hexo Next 阅读全文设置 Next主题怎么让首页不显示全文</a></p>\n<ol>\n<li><code>themes/next</code> 目录下的 <code>_config.yml</code> 文件，找到这段代码</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Automatically Excerpt. Not recommend.</span></span><br><span class=\"line\"><span class=\"comment\"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class=\"line\"><span class=\"attr\">auto_excerpt:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">  length:</span> <span class=\"number\">150</span></span><br></pre></td></tr></table></figure>\n<p>把 <code>enable</code> 的 <code>false</code> 改成 <code>true</code> 就行了，然后 <code>length</code> 是设定文章预览的文本长度</p>\n<ol>\n<li>写 md 文章的时候，可以在内容中加上 <code>&lt;!--more--&gt;</code>，这样首页和列表页展示的文章内容就是 <code>&lt;!--more--&gt;</code> 之前的文字，而之后的就不会显示了。</li>\n</ol>\n<blockquote>\n<p>虽然第一种方法配置简单，但是显示的预览会乱，所以我选第二种方法</p>\n</blockquote>\n<h4 id=\"设置首页文章数量\"><a href=\"#设置首页文章数量\" class=\"headerlink\" title=\"设置首页文章数量\"></a>设置首页文章数量</h4><p>首页默认显示10篇文章，会导致首页很长，可以在站点<code>_config.yml</code>文件中，搜索<code>per_page</code>，修改显示数量<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Home page setting</span></span><br><span class=\"line\"><span class=\"comment\"># path: Root path for your blogs index page. (default = '')</span></span><br><span class=\"line\"><span class=\"comment\"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class=\"line\"><span class=\"comment\"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class=\"line\"><span class=\"attr\">index_generator:</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"attr\">  per_page:</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"attr\">  order_by:</span> <span class=\"bullet\">-date</span></span><br></pre></td></tr></table></figure></p>\n<p>参考: <a href=\"http://www.yuzhewo.com/2015/11/21/Hexo%E7%A8%8B%E5%BA%8Farchive%E9%A1%B5%E9%9D%A2%E6%95%B0%E9%87%8F%E8%AE%BE%E7%BD%AE/\" target=\"_blank\" rel=\"noopener\">Hexo程序archive页面数量设置</a></p>"},{"title":"Git笔记","date":"2018-03-23T14:54:09.000Z","_content":"\n> [25个 Git 进阶技巧][1]\n> [Git常用命令备忘][2]\n \n## 命令及技巧\n\n### git log查看提交记录\n\n```bash\ngit log git log <file> # 查看该文件每次提交记录 \ngit log -p <file> # 查看每次详细修改内容的\ngit log -p -2 # 查看最近两次详细修改内容的\ngit log --stat # 查看提交统计信息\n```\n\n### git reflog查看被撤消的提交\n```bash\n#恢复\ngit reset --hard [hash]\n```\n\n### git stash暂存\n`git stash`用好很强大\n\n```bash\ngit stash #暂存修改，注意要先git add\ngit stash apply #应用暂存修改\ngit stash pop   #应用暂存修改并删除\ngit stah list   #查看暂存的修改\ngit stash apply [stash@{0}] #应用指定的暂存修改\n```\n<!--more-->\n### 提交\n\n`git commit --amend` 添加到最后一次提交\n\n### 推送远程\n\n正常情况下push\n\n```bash\ngit push origin master\n```\n\n第一次可以推送并关联默认分支\n```bash\ngit push -u origin master\n```\n这样以后每次就可以只用通过`git push`来推送了\n\n如果需要进行`code review`, 需要改成下面这样\n\n```bash\ngit push origin HEAD:refs/for/master\n```\n\n> `refs/for/master`需要经过`code review`之后才可以提交；`refs/heads/master`不需要`code review`\n\n### 远程更新\n\n在pull代码的时候，最好加上--rebase\n```bash\ngit pull --rebase\n```\n\n因为git pull --rebase因为se这个命令做了以下内容：\n\n> - 把你 commit 到本地仓库的内容，取出来放到暂存区(stash)（这时你的工作区是干净的，这样就不会产生冲突啦）\n> - 然后从远端拉取代码到本地，由于工作区是干净的，所以不会有冲突\n> - 从暂存区把你之前提交的内容取出来，跟拉下来的代码合并\n\n\n### git blame查看某一行代码的修改历史\n\n通过以下方法查看文件中每行的最近个性\n```bash\ngit blame file_name\n```\n\n结果如：\n\n```txt\n0584cb5 (tory 2018-03-01 23:14:43 +0800  2) apply from: \"config.gradle\"\n```\n\n然后通过`git show commitID` 查看历史\n\n或者:\n> 在Android Studio中右键文件行号部分，选择`Annotate`\n\n### git cherry-pick\n\n`git cherry-pick`用于把另一个本地分支的`commit`修改应用到当前分支。\n\n[git cherry-pick简介](http://blog.csdn.net/hudashi/article/details/7669462)\n\n\n### 移除某文件夹的版本控制\n以`bin`目录为例，如果`bin`已经被加入到\n\n先添加到`.gitignore`里面\n```bash\nbin/\n```\n\n预览要删除的文件\n```bash\ngit rm -r -n --cached \"bin/\"\n```\n\n执行命令:\n```bash\ngit rm -r --cached  \"bin/\"\n```\n\n提交并推送到远程\n\n```bash\ngit commit -m \"remove bin folder all file out of control\"    //提交\ngit push origin master   //提交到远程服务器\n```\n\n### 分支管理\n```bash\n#查看分支\n#查看本地分支\ngit branch\n#查看远程分支\ngit branch -r\n#查看本地和远程分支\ngit branch -a\n\n#创建分支\ngit branch 分支名\n#切换\ngit checkout 分支名\n#创建+切换分支\ngit checkout -b 分支名\n\n#删除分支\ngit branch -d 分支名\n```\n\n\n## 基本配置\n\n### 配置\n\n设置Git的`user name`和`email`：\n\n```bash\n$ git config --global user.name \"xxx\"\n$ git config --global user.email \"xxx@xxx.com\"\n```\n\n初始化项目:\n\n```bash\ngit init\n```\n\n### SSH Keys\n\n生成ssh key：\n\n```bash\nssh-keygen\n```\n在`~/.ssh/id_rsa.pub`中把公钥复制到`github`的`ssh key`的配置项中\n\n添加后，在终端（Terminal）中输入以下内容，测试与github的连接是否正常\n```bash\nssh -T git@github.com\n```\n    \noschina的则是输入以下内容:\n```bash\nssh -T git@git.oschina.net\n```\n\n### 关联远程仓库\n> 使用下面的bash命令，将Http方式的项目改成为**SSH**方式\n\n关联添加远程地址\n```bash\ngit remote add origin \"你项目的的ssh地址\"\n```\n重新设置远程地址\n```bash\ncd \"你项目的目录文件夹\"\ngit remote set-url origin \"你项目的的ssh地址\"\n```\n### 设置commit模板\n在主目录下新建`commit.template`文件，填入以下内容\n\n```bash\nBUG ID: ALHWWY-XXXX or none\nDESCRIPTION: 修复xxx模块的xxx错误\n```\n然后设置提交模板\n\n```bash\ngit config  --global commit.template ~/commit.template\ngit config --global core.editor vim #设置提交commit message的默认编辑器\n```\n\n### Shadowscoks代理\n\n```bash\ngit config --global http.proxy 'socks5://127.0.0.1:1080'\ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n```\n\n\n  [1]: http://www.imooc.com/article/1089 \"25个 Git 进阶技巧\"\n  [2]: http://www.imooc.com/article/1111 \"Git常用命令备忘\"\n\n\n### 查看配置信息\n\nsystem（系统级别）->global（用户级别，也就是所有仓库）->local（当前仓库）\n```bash\n#查看系统config\ngit config --system --list\n\n#查看当前用户（global）配置\ngit config --global  --list\n\n#查看当前仓库配置信息（需要在仓库中使用）\ngit config --local  --list\n```\n\n### .gitignore\n\nGitHub官方的所有.gitignore文件\nhttps://github.com/github/gitignore","source":"_posts/Git笔记.md","raw":"---\ntitle: Git笔记\ndate: 2018-03-23 22:54:09\ntags: Git\n---\n\n> [25个 Git 进阶技巧][1]\n> [Git常用命令备忘][2]\n \n## 命令及技巧\n\n### git log查看提交记录\n\n```bash\ngit log git log <file> # 查看该文件每次提交记录 \ngit log -p <file> # 查看每次详细修改内容的\ngit log -p -2 # 查看最近两次详细修改内容的\ngit log --stat # 查看提交统计信息\n```\n\n### git reflog查看被撤消的提交\n```bash\n#恢复\ngit reset --hard [hash]\n```\n\n### git stash暂存\n`git stash`用好很强大\n\n```bash\ngit stash #暂存修改，注意要先git add\ngit stash apply #应用暂存修改\ngit stash pop   #应用暂存修改并删除\ngit stah list   #查看暂存的修改\ngit stash apply [stash@{0}] #应用指定的暂存修改\n```\n<!--more-->\n### 提交\n\n`git commit --amend` 添加到最后一次提交\n\n### 推送远程\n\n正常情况下push\n\n```bash\ngit push origin master\n```\n\n第一次可以推送并关联默认分支\n```bash\ngit push -u origin master\n```\n这样以后每次就可以只用通过`git push`来推送了\n\n如果需要进行`code review`, 需要改成下面这样\n\n```bash\ngit push origin HEAD:refs/for/master\n```\n\n> `refs/for/master`需要经过`code review`之后才可以提交；`refs/heads/master`不需要`code review`\n\n### 远程更新\n\n在pull代码的时候，最好加上--rebase\n```bash\ngit pull --rebase\n```\n\n因为git pull --rebase因为se这个命令做了以下内容：\n\n> - 把你 commit 到本地仓库的内容，取出来放到暂存区(stash)（这时你的工作区是干净的，这样就不会产生冲突啦）\n> - 然后从远端拉取代码到本地，由于工作区是干净的，所以不会有冲突\n> - 从暂存区把你之前提交的内容取出来，跟拉下来的代码合并\n\n\n### git blame查看某一行代码的修改历史\n\n通过以下方法查看文件中每行的最近个性\n```bash\ngit blame file_name\n```\n\n结果如：\n\n```txt\n0584cb5 (tory 2018-03-01 23:14:43 +0800  2) apply from: \"config.gradle\"\n```\n\n然后通过`git show commitID` 查看历史\n\n或者:\n> 在Android Studio中右键文件行号部分，选择`Annotate`\n\n### git cherry-pick\n\n`git cherry-pick`用于把另一个本地分支的`commit`修改应用到当前分支。\n\n[git cherry-pick简介](http://blog.csdn.net/hudashi/article/details/7669462)\n\n\n### 移除某文件夹的版本控制\n以`bin`目录为例，如果`bin`已经被加入到\n\n先添加到`.gitignore`里面\n```bash\nbin/\n```\n\n预览要删除的文件\n```bash\ngit rm -r -n --cached \"bin/\"\n```\n\n执行命令:\n```bash\ngit rm -r --cached  \"bin/\"\n```\n\n提交并推送到远程\n\n```bash\ngit commit -m \"remove bin folder all file out of control\"    //提交\ngit push origin master   //提交到远程服务器\n```\n\n### 分支管理\n```bash\n#查看分支\n#查看本地分支\ngit branch\n#查看远程分支\ngit branch -r\n#查看本地和远程分支\ngit branch -a\n\n#创建分支\ngit branch 分支名\n#切换\ngit checkout 分支名\n#创建+切换分支\ngit checkout -b 分支名\n\n#删除分支\ngit branch -d 分支名\n```\n\n\n## 基本配置\n\n### 配置\n\n设置Git的`user name`和`email`：\n\n```bash\n$ git config --global user.name \"xxx\"\n$ git config --global user.email \"xxx@xxx.com\"\n```\n\n初始化项目:\n\n```bash\ngit init\n```\n\n### SSH Keys\n\n生成ssh key：\n\n```bash\nssh-keygen\n```\n在`~/.ssh/id_rsa.pub`中把公钥复制到`github`的`ssh key`的配置项中\n\n添加后，在终端（Terminal）中输入以下内容，测试与github的连接是否正常\n```bash\nssh -T git@github.com\n```\n    \noschina的则是输入以下内容:\n```bash\nssh -T git@git.oschina.net\n```\n\n### 关联远程仓库\n> 使用下面的bash命令，将Http方式的项目改成为**SSH**方式\n\n关联添加远程地址\n```bash\ngit remote add origin \"你项目的的ssh地址\"\n```\n重新设置远程地址\n```bash\ncd \"你项目的目录文件夹\"\ngit remote set-url origin \"你项目的的ssh地址\"\n```\n### 设置commit模板\n在主目录下新建`commit.template`文件，填入以下内容\n\n```bash\nBUG ID: ALHWWY-XXXX or none\nDESCRIPTION: 修复xxx模块的xxx错误\n```\n然后设置提交模板\n\n```bash\ngit config  --global commit.template ~/commit.template\ngit config --global core.editor vim #设置提交commit message的默认编辑器\n```\n\n### Shadowscoks代理\n\n```bash\ngit config --global http.proxy 'socks5://127.0.0.1:1080'\ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n```\n\n\n  [1]: http://www.imooc.com/article/1089 \"25个 Git 进阶技巧\"\n  [2]: http://www.imooc.com/article/1111 \"Git常用命令备忘\"\n\n\n### 查看配置信息\n\nsystem（系统级别）->global（用户级别，也就是所有仓库）->local（当前仓库）\n```bash\n#查看系统config\ngit config --system --list\n\n#查看当前用户（global）配置\ngit config --global  --list\n\n#查看当前仓库配置信息（需要在仓库中使用）\ngit config --local  --list\n```\n\n### .gitignore\n\nGitHub官方的所有.gitignore文件\nhttps://github.com/github/gitignore","slug":"Git笔记","published":1,"updated":"2018-04-02T13:00:12.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyq0fezw0009zwv7w8owatix","content":"<blockquote>\n<p><a href=\"http://www.imooc.com/article/1089\" title=\"25个 Git 进阶技巧\" target=\"_blank\" rel=\"noopener\">25个 Git 进阶技巧</a><br><a href=\"http://www.imooc.com/article/1111\" title=\"Git常用命令备忘\" target=\"_blank\" rel=\"noopener\">Git常用命令备忘</a></p>\n</blockquote>\n<h2 id=\"命令及技巧\"><a href=\"#命令及技巧\" class=\"headerlink\" title=\"命令及技巧\"></a>命令及技巧</h2><h3 id=\"git-log查看提交记录\"><a href=\"#git-log查看提交记录\" class=\"headerlink\" title=\"git log查看提交记录\"></a>git log查看提交记录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> git <span class=\"built_in\">log</span> &lt;file&gt; <span class=\"comment\"># 查看该文件每次提交记录 </span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p &lt;file&gt; <span class=\"comment\"># 查看每次详细修改内容的</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p -2 <span class=\"comment\"># 查看最近两次详细修改内容的</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span> <span class=\"comment\"># 查看提交统计信息</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"git-reflog查看被撤消的提交\"><a href=\"#git-reflog查看被撤消的提交\" class=\"headerlink\" title=\"git reflog查看被撤消的提交\"></a>git reflog查看被撤消的提交</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#恢复</span></span><br><span class=\"line\">git reset --hard [<span class=\"built_in\">hash</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"git-stash暂存\"><a href=\"#git-stash暂存\" class=\"headerlink\" title=\"git stash暂存\"></a>git stash暂存</h3><p><code>git stash</code>用好很强大</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash <span class=\"comment\">#暂存修改，注意要先git add</span></span><br><span class=\"line\">git stash apply <span class=\"comment\">#应用暂存修改</span></span><br><span class=\"line\">git stash pop   <span class=\"comment\">#应用暂存修改并删除</span></span><br><span class=\"line\">git stah list   <span class=\"comment\">#查看暂存的修改</span></span><br><span class=\"line\">git stash apply [stash@&#123;0&#125;] <span class=\"comment\">#应用指定的暂存修改</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h3><p><code>git commit --amend</code> 添加到最后一次提交</p>\n<h3 id=\"推送远程\"><a href=\"#推送远程\" class=\"headerlink\" title=\"推送远程\"></a>推送远程</h3><p>正常情况下push</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>第一次可以推送并关联默认分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></p>\n<p>这样以后每次就可以只用通过<code>git push</code>来推送了</p>\n<p>如果需要进行<code>code review</code>, 需要改成下面这样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin HEAD:refs/<span class=\"keyword\">for</span>/master</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>refs/for/master</code>需要经过<code>code review</code>之后才可以提交；<code>refs/heads/master</code>不需要<code>code review</code></p>\n</blockquote>\n<h3 id=\"远程更新\"><a href=\"#远程更新\" class=\"headerlink\" title=\"远程更新\"></a>远程更新</h3><p>在pull代码的时候，最好加上–rebase<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull --rebase</span><br></pre></td></tr></table></figure></p>\n<p>因为git pull –rebase因为se这个命令做了以下内容：</p>\n<blockquote>\n<ul>\n<li>把你 commit 到本地仓库的内容，取出来放到暂存区(stash)（这时你的工作区是干净的，这样就不会产生冲突啦）</li>\n<li>然后从远端拉取代码到本地，由于工作区是干净的，所以不会有冲突</li>\n<li>从暂存区把你之前提交的内容取出来，跟拉下来的代码合并</li>\n</ul>\n</blockquote>\n<h3 id=\"git-blame查看某一行代码的修改历史\"><a href=\"#git-blame查看某一行代码的修改历史\" class=\"headerlink\" title=\"git blame查看某一行代码的修改历史\"></a>git blame查看某一行代码的修改历史</h3><p>通过以下方法查看文件中每行的最近个性<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git blame file_name</span><br></pre></td></tr></table></figure></p>\n<p>结果如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0584cb5 (tory 2018-03-01 23:14:43 +0800  2) apply from: &quot;config.gradle&quot;</span><br></pre></td></tr></table></figure>\n<p>然后通过<code>git show commitID</code> 查看历史</p>\n<p>或者:</p>\n<blockquote>\n<p>在Android Studio中右键文件行号部分，选择<code>Annotate</code></p>\n</blockquote>\n<h3 id=\"git-cherry-pick\"><a href=\"#git-cherry-pick\" class=\"headerlink\" title=\"git cherry-pick\"></a>git cherry-pick</h3><p><code>git cherry-pick</code>用于把另一个本地分支的<code>commit</code>修改应用到当前分支。</p>\n<p><a href=\"http://blog.csdn.net/hudashi/article/details/7669462\" target=\"_blank\" rel=\"noopener\">git cherry-pick简介</a></p>\n<h3 id=\"移除某文件夹的版本控制\"><a href=\"#移除某文件夹的版本控制\" class=\"headerlink\" title=\"移除某文件夹的版本控制\"></a>移除某文件夹的版本控制</h3><p>以<code>bin</code>目录为例，如果<code>bin</code>已经被加入到</p>\n<p>先添加到<code>.gitignore</code>里面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/</span><br></pre></td></tr></table></figure></p>\n<p>预览要删除的文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r -n --cached <span class=\"string\">\"bin/\"</span></span><br></pre></td></tr></table></figure></p>\n<p>执行命令:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached  <span class=\"string\">\"bin/\"</span></span><br></pre></td></tr></table></figure></p>\n<p>提交并推送到远程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"remove bin folder all file out of control\"</span>    //提交</span><br><span class=\"line\">git push origin master   //提交到远程服务器</span><br></pre></td></tr></table></figure>\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看分支</span></span><br><span class=\"line\"><span class=\"comment\">#查看本地分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"><span class=\"comment\">#查看远程分支</span></span><br><span class=\"line\">git branch -r</span><br><span class=\"line\"><span class=\"comment\">#查看本地和远程分支</span></span><br><span class=\"line\">git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建分支</span></span><br><span class=\"line\">git branch 分支名</span><br><span class=\"line\"><span class=\"comment\">#切换</span></span><br><span class=\"line\">git checkout 分支名</span><br><span class=\"line\"><span class=\"comment\">#创建+切换分支</span></span><br><span class=\"line\">git checkout -b 分支名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除分支</span></span><br><span class=\"line\">git branch -d 分支名</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>设置Git的<code>user name</code>和<code>email</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"xxx\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"xxx@xxx.com\"</span></span><br></pre></td></tr></table></figure>\n<p>初始化项目:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<h3 id=\"SSH-Keys\"><a href=\"#SSH-Keys\" class=\"headerlink\" title=\"SSH Keys\"></a>SSH Keys</h3><p>生成ssh key：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br></pre></td></tr></table></figure>\n<p>在<code>~/.ssh/id_rsa.pub</code>中把公钥复制到<code>github</code>的<code>ssh key</code>的配置项中</p>\n<p>添加后，在终端（Terminal）中输入以下内容，测试与github的连接是否正常<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>\n<p>oschina的则是输入以下内容:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@git.oschina.net</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"关联远程仓库\"><a href=\"#关联远程仓库\" class=\"headerlink\" title=\"关联远程仓库\"></a>关联远程仓库</h3><blockquote>\n<p>使用下面的bash命令，将Http方式的项目改成为<strong>SSH</strong>方式</p>\n</blockquote>\n<p>关联添加远程地址<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin <span class=\"string\">\"你项目的的ssh地址\"</span></span><br></pre></td></tr></table></figure></p>\n<p>重新设置远程地址<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"你项目的目录文件夹\"</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin <span class=\"string\">\"你项目的的ssh地址\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置commit模板\"><a href=\"#设置commit模板\" class=\"headerlink\" title=\"设置commit模板\"></a>设置commit模板</h3><p>在主目录下新建<code>commit.template</code>文件，填入以下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BUG ID: ALHWWY-XXXX or none</span><br><span class=\"line\">DESCRIPTION: 修复xxx模块的xxx错误</span><br></pre></td></tr></table></figure>\n<p>然后设置提交模板</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config  --global commit.template ~/commit.template</span><br><span class=\"line\">git config --global core.editor vim <span class=\"comment\">#设置提交commit message的默认编辑器</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Shadowscoks代理\"><a href=\"#Shadowscoks代理\" class=\"headerlink\" title=\"Shadowscoks代理\"></a>Shadowscoks代理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy <span class=\"string\">'socks5://127.0.0.1:1080'</span></span><br><span class=\"line\">git config --global https.proxy <span class=\"string\">'socks5://127.0.0.1:1080'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查看配置信息\"><a href=\"#查看配置信息\" class=\"headerlink\" title=\"查看配置信息\"></a>查看配置信息</h3><p>system（系统级别）-&gt;global（用户级别，也就是所有仓库）-&gt;local（当前仓库）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看系统config</span></span><br><span class=\"line\">git config --system --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看当前用户（global）配置</span></span><br><span class=\"line\">git config --global  --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看当前仓库配置信息（需要在仓库中使用）</span></span><br><span class=\"line\">git config --<span class=\"built_in\">local</span>  --list</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h3><p>GitHub官方的所有.gitignore文件<br><a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener\">https://github.com/github/gitignore</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p><a href=\"http://www.imooc.com/article/1089\" title=\"25个 Git 进阶技巧\" target=\"_blank\" rel=\"noopener\">25个 Git 进阶技巧</a><br><a href=\"http://www.imooc.com/article/1111\" title=\"Git常用命令备忘\" target=\"_blank\" rel=\"noopener\">Git常用命令备忘</a></p>\n</blockquote>\n<h2 id=\"命令及技巧\"><a href=\"#命令及技巧\" class=\"headerlink\" title=\"命令及技巧\"></a>命令及技巧</h2><h3 id=\"git-log查看提交记录\"><a href=\"#git-log查看提交记录\" class=\"headerlink\" title=\"git log查看提交记录\"></a>git log查看提交记录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> git <span class=\"built_in\">log</span> &lt;file&gt; <span class=\"comment\"># 查看该文件每次提交记录 </span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p &lt;file&gt; <span class=\"comment\"># 查看每次详细修改内容的</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p -2 <span class=\"comment\"># 查看最近两次详细修改内容的</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span> <span class=\"comment\"># 查看提交统计信息</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"git-reflog查看被撤消的提交\"><a href=\"#git-reflog查看被撤消的提交\" class=\"headerlink\" title=\"git reflog查看被撤消的提交\"></a>git reflog查看被撤消的提交</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#恢复</span></span><br><span class=\"line\">git reset --hard [<span class=\"built_in\">hash</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"git-stash暂存\"><a href=\"#git-stash暂存\" class=\"headerlink\" title=\"git stash暂存\"></a>git stash暂存</h3><p><code>git stash</code>用好很强大</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash <span class=\"comment\">#暂存修改，注意要先git add</span></span><br><span class=\"line\">git stash apply <span class=\"comment\">#应用暂存修改</span></span><br><span class=\"line\">git stash pop   <span class=\"comment\">#应用暂存修改并删除</span></span><br><span class=\"line\">git stah list   <span class=\"comment\">#查看暂存的修改</span></span><br><span class=\"line\">git stash apply [stash@&#123;0&#125;] <span class=\"comment\">#应用指定的暂存修改</span></span><br></pre></td></tr></table></figure>","more":"<h3 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h3><p><code>git commit --amend</code> 添加到最后一次提交</p>\n<h3 id=\"推送远程\"><a href=\"#推送远程\" class=\"headerlink\" title=\"推送远程\"></a>推送远程</h3><p>正常情况下push</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<p>第一次可以推送并关联默认分支<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></p>\n<p>这样以后每次就可以只用通过<code>git push</code>来推送了</p>\n<p>如果需要进行<code>code review</code>, 需要改成下面这样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin HEAD:refs/<span class=\"keyword\">for</span>/master</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>refs/for/master</code>需要经过<code>code review</code>之后才可以提交；<code>refs/heads/master</code>不需要<code>code review</code></p>\n</blockquote>\n<h3 id=\"远程更新\"><a href=\"#远程更新\" class=\"headerlink\" title=\"远程更新\"></a>远程更新</h3><p>在pull代码的时候，最好加上–rebase<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull --rebase</span><br></pre></td></tr></table></figure></p>\n<p>因为git pull –rebase因为se这个命令做了以下内容：</p>\n<blockquote>\n<ul>\n<li>把你 commit 到本地仓库的内容，取出来放到暂存区(stash)（这时你的工作区是干净的，这样就不会产生冲突啦）</li>\n<li>然后从远端拉取代码到本地，由于工作区是干净的，所以不会有冲突</li>\n<li>从暂存区把你之前提交的内容取出来，跟拉下来的代码合并</li>\n</ul>\n</blockquote>\n<h3 id=\"git-blame查看某一行代码的修改历史\"><a href=\"#git-blame查看某一行代码的修改历史\" class=\"headerlink\" title=\"git blame查看某一行代码的修改历史\"></a>git blame查看某一行代码的修改历史</h3><p>通过以下方法查看文件中每行的最近个性<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git blame file_name</span><br></pre></td></tr></table></figure></p>\n<p>结果如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0584cb5 (tory 2018-03-01 23:14:43 +0800  2) apply from: &quot;config.gradle&quot;</span><br></pre></td></tr></table></figure>\n<p>然后通过<code>git show commitID</code> 查看历史</p>\n<p>或者:</p>\n<blockquote>\n<p>在Android Studio中右键文件行号部分，选择<code>Annotate</code></p>\n</blockquote>\n<h3 id=\"git-cherry-pick\"><a href=\"#git-cherry-pick\" class=\"headerlink\" title=\"git cherry-pick\"></a>git cherry-pick</h3><p><code>git cherry-pick</code>用于把另一个本地分支的<code>commit</code>修改应用到当前分支。</p>\n<p><a href=\"http://blog.csdn.net/hudashi/article/details/7669462\" target=\"_blank\" rel=\"noopener\">git cherry-pick简介</a></p>\n<h3 id=\"移除某文件夹的版本控制\"><a href=\"#移除某文件夹的版本控制\" class=\"headerlink\" title=\"移除某文件夹的版本控制\"></a>移除某文件夹的版本控制</h3><p>以<code>bin</code>目录为例，如果<code>bin</code>已经被加入到</p>\n<p>先添加到<code>.gitignore</code>里面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/</span><br></pre></td></tr></table></figure></p>\n<p>预览要删除的文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r -n --cached <span class=\"string\">\"bin/\"</span></span><br></pre></td></tr></table></figure></p>\n<p>执行命令:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -r --cached  <span class=\"string\">\"bin/\"</span></span><br></pre></td></tr></table></figure></p>\n<p>提交并推送到远程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"remove bin folder all file out of control\"</span>    //提交</span><br><span class=\"line\">git push origin master   //提交到远程服务器</span><br></pre></td></tr></table></figure>\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看分支</span></span><br><span class=\"line\"><span class=\"comment\">#查看本地分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"><span class=\"comment\">#查看远程分支</span></span><br><span class=\"line\">git branch -r</span><br><span class=\"line\"><span class=\"comment\">#查看本地和远程分支</span></span><br><span class=\"line\">git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建分支</span></span><br><span class=\"line\">git branch 分支名</span><br><span class=\"line\"><span class=\"comment\">#切换</span></span><br><span class=\"line\">git checkout 分支名</span><br><span class=\"line\"><span class=\"comment\">#创建+切换分支</span></span><br><span class=\"line\">git checkout -b 分支名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除分支</span></span><br><span class=\"line\">git branch -d 分支名</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>设置Git的<code>user name</code>和<code>email</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"xxx\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"xxx@xxx.com\"</span></span><br></pre></td></tr></table></figure>\n<p>初始化项目:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<h3 id=\"SSH-Keys\"><a href=\"#SSH-Keys\" class=\"headerlink\" title=\"SSH Keys\"></a>SSH Keys</h3><p>生成ssh key：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br></pre></td></tr></table></figure>\n<p>在<code>~/.ssh/id_rsa.pub</code>中把公钥复制到<code>github</code>的<code>ssh key</code>的配置项中</p>\n<p>添加后，在终端（Terminal）中输入以下内容，测试与github的连接是否正常<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>\n<p>oschina的则是输入以下内容:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@git.oschina.net</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"关联远程仓库\"><a href=\"#关联远程仓库\" class=\"headerlink\" title=\"关联远程仓库\"></a>关联远程仓库</h3><blockquote>\n<p>使用下面的bash命令，将Http方式的项目改成为<strong>SSH</strong>方式</p>\n</blockquote>\n<p>关联添加远程地址<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin <span class=\"string\">\"你项目的的ssh地址\"</span></span><br></pre></td></tr></table></figure></p>\n<p>重新设置远程地址<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"你项目的目录文件夹\"</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin <span class=\"string\">\"你项目的的ssh地址\"</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置commit模板\"><a href=\"#设置commit模板\" class=\"headerlink\" title=\"设置commit模板\"></a>设置commit模板</h3><p>在主目录下新建<code>commit.template</code>文件，填入以下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BUG ID: ALHWWY-XXXX or none</span><br><span class=\"line\">DESCRIPTION: 修复xxx模块的xxx错误</span><br></pre></td></tr></table></figure>\n<p>然后设置提交模板</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config  --global commit.template ~/commit.template</span><br><span class=\"line\">git config --global core.editor vim <span class=\"comment\">#设置提交commit message的默认编辑器</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Shadowscoks代理\"><a href=\"#Shadowscoks代理\" class=\"headerlink\" title=\"Shadowscoks代理\"></a>Shadowscoks代理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy <span class=\"string\">'socks5://127.0.0.1:1080'</span></span><br><span class=\"line\">git config --global https.proxy <span class=\"string\">'socks5://127.0.0.1:1080'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"查看配置信息\"><a href=\"#查看配置信息\" class=\"headerlink\" title=\"查看配置信息\"></a>查看配置信息</h3><p>system（系统级别）-&gt;global（用户级别，也就是所有仓库）-&gt;local（当前仓库）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看系统config</span></span><br><span class=\"line\">git config --system --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看当前用户（global）配置</span></span><br><span class=\"line\">git config --global  --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看当前仓库配置信息（需要在仓库中使用）</span></span><br><span class=\"line\">git config --<span class=\"built_in\">local</span>  --list</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h3><p>GitHub官方的所有.gitignore文件<br><a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener\">https://github.com/github/gitignore</a></p>"},{"title":"Fragment笔记","date":"2018-04-15T06:23:18.000Z","_content":"\n> 两年前的笔记，再拿出来回顾才发现许久不用有些内容都记混淆了\n\n### 基本概念\nFragment是Android3.0(sdk 17)后引入的一个新的API,出现的初衷是为了适应大屏幕的平板电脑,我们可以把他看成一个小型的Activity，又称Activity片段.Fragment并不能单独使用，必须嵌套在Activity中使用。\n\n\nV4包下提供的也有一个Fragment,使用的时候要注意:\n> 1. 如果使用v4包下的`Fragment`,那么所在的那个`Activity`就要继承FragmentActivity `AppCompatActivity`下继承了`FragmentActivity`，可以直接使用\n> 2. 需要把`getFragmentManager( )`改成`getSupportFragmentManager()`\n\n\n几个子类\n\n> 对话框:DialogFragment \n> 列表:ListFragment \n> 选项设置:PreferenceFragment\n> WebView界面:WebViewFragment\n\n<!--more-->\n生命周期:\n![@Fragment的生命周期](/images/Fragment的生命周期.png)\n\nFragment的生命周期是跟随Activity的\n\n### Fragment基本创建与使用\n静态加载\n![@Fragement静态加载](/images/Fragement静态加载.png)\n\n注意点:\nname属性是全限定类名哦，就是要包含Fragment的包名\nlayout属性会覆盖fragment布局文件中的layout属性\n必须为布局设置id，系统在Activity恢复时用它来存储状态, 否则配置发生变化或内存重启时会报错(如旋转屏幕)\n\n```xml\n<fragment\n     android:id=\"@+id/fg_fragment\"\n     android:name=\"com.tory.demo.sample.test.LifeCycleFragment\"\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"100dp\"/>\n```\n\n动态加载\n![@Fragment的动态加载](/images/Fragment的动态加载.png)\n\n注意点:\nFragment的管理是通过事务来管理的，所以可以进行多次add,remove等\n注意事务需要commit\n\n```java\nLifeCycleFragment fragment = new LifeCycleFragment();\ngetSupportFragmentManager().beginTransaction()\n     .add(R.id.frame_container,fragment,\"LifeCycleFragment\")\n     .addToBackStack(\"LifeCycleFragment\")\n     .commit();\n```\n\nFragment的事务操作\n![@Fragment的事件操作](/images/Fragment的事件操作.png)\n\n> fragment的每一次改变的提交给activity，都称为一个事务\n> `add()`, `remove()`,`replace()` ,`show()`, `hide()`等一系列方法，只有commit了以后才会生效\n> Fragment的事务操作是**异步**的，commit了以后相当于进入了一个队列，然后等待合适的时刻执行\n>  addToBackStack() 可以把fragment的本次操作放入Activity的返回栈中，通过点击back键可以回到以前状态，可以通过此方法移除或隐藏Fragment，个人**不建议使用**。\n>  从FragmentManger.beginTransaction真正返回的确是一个`BackStackRecord`类， 其实现了FragmentTransaction所定义的接口。\n\n\n\n### 使用技巧与建议:\n1. 对`Fragment`传递数据，建议使用`setArguments(Bundle args)`，而后在`onCreate`中使用`getArguments()`取出，在 “内存重启”前，系统会帮你保存数据，不会造成数据的丢失。和Activity的Intent原理一致。\n\n2. 使用`newInstance(参数)` 创建`Fragment`对象，优点是调用者只需要关系传递的哪些数据，而无需关心传递数据的Key是什么。\n可结合第一点使用\n\n3.  Fragment之间的通信，在同一个`Activity`下的两个`Fragment`的通信：`FragmentA`调用其宿主`Activity`的方法，宿主`Activity`再根据`FragmentA`的调用参数去调用`FragmentB`的方法并传递参数给B\n\n在AS里面右键，新建Fragment, AS提供了一个Fragment的模板写法\n> 1. 使用newInstance(参数) 创建Fragment对象\n> 2. 使用setArguments(Bundle args)，而后在onCreate中使用getArguments()取出 在 “内存重启”前，系统会帮你保存数据，不会造成数据的丢失。和Activity的Intent原理一致。\n> 3. 在Fragment中定义一个内部回调接口,在Activity中实现\n\n4. 使用`DialogFragment`代码`Dialog`，便于管理`Dialog`的生命周期和保存状态。\n`DialogFragment`在`show`的时候容易出现以下错误`java.lang.IllegalStateException: Fragment already added`，这是重复添加引起的，`fragment.isAdded()`\n```java\nif(!fragment.isAdded()){\n    fragment.show(getFragmentManager(),\"fragment\");\n}\n```\n\n5. add(), show(), hide(), replace(),remove()...\n`show()`，`hide()`最终是让`Fragment`的`View setVisibility()`，不会调用生命周期;\n如:  `hide()`\n - 设置`mHidden` 为`true`\n - `fragment.mView.setVisibility(View.GONE`); 隐藏`fragment`的`view`\n - `fragment.onHiddenChanged(true)`; 调用onHiddenChange\n可以发现也可能通过`fragment.getView().setVisibility();`来控制fragment的显示，只是此时没有改变`mHidden`的状态\n`replace()`的话会销毁前一个视图，即调用`onDestoryView`、`onCreateView`等一系列生命周期\n\n6. onHiddenChanged的回调时机\n当使用`add()+show()`，`hide()`跳转新的Fragment时，旧的Fragment回调`onHiddenChanged()`，不会回调`onStop()`等生命周期方法，而新的Fragment在创建时是不会回调`onHiddenChanged()`，这点要切记。\n有类似需求可以自己实现\n\n7. ViewPager中的Fragment生命周期\nViewPager会预先加载预先加载包换当前可见的Fragment和其两侧的三个Fragment\n具体参考这篇文章：http://www.jianshu.com/p/660ec2666faa\n![Fragment在ViewPager中](/images/Fragment在ViewPager中.png)\n\n8. setUserVisibleHint\n使用`ViewPager`时，切换回上一个Fragment页面时（已经初始化完毕），不会回调任何生命周期方法以及`onHiddenChanged()`，只有`setUserVisibleHint(boolean isVisibleToUser)`会被回调，所以如果你想进行一些懒加载，可以重载该方法实现(需要配合fragment生命周期使用)。\n具体实现可以参考:http://www.jianshu.com/p/c5d29a0c3f4c\n`setUserVisibleHint`的回调实际上是由`ViewPager`触发的，与fragment的show，hide状态没有太大关系\n\n9. `commit()`, `commitNow()` 和`executePendingTransactions()`;\n\ncommit并不是立即执行的, 它会被发送到主线程的任务队列当中去, 当主线程准备好执行它的时候执行; 所以在使用commit的后要注意通过isAdded()或isShow()等方法是并不可靠的，因为很有可能因为Fragment还没到添加上去而引起一些错误。\n\n想要同步执行可以使用`commitNow`或者`executePendingTransactions`; commitNow是立刻执行**当前事务**, 而`executePendingTransactions`立即执行在队列中的所有事务！\n\n\n### 使用中出现的问题:\n\n#### Activity重新创建\n通过事务动态添加Fragment的时候我们可能很自然的这样写\n\n```java\n@Override\nonCreate(Bundle savedInstance) {\n     getSupportFragmentManager().beginTransaction()\n         .add(R.id.frame_container,fragment)\n         .commit();\n}\n```\n表面上看起来没有什么情况，看起来好像也没有什么不对，但在实际项目中可以看到很多这样的写法\n\n```java\n@Override\nonCreate(Bundle savedInstance) {\n   if (savedIntance == null) {\n      // create fragment and add it to Activity.\n   }\n}\n```\n因为系统配置信息发生变化或内存重启的时候，系统会把Activity杀掉，然后再重新创建它。此时系统会尽可能的恢复以前的状态，所以以前添加的Fragment也会重新添加进去，也就没有必要重新创建一个Fragment;\n这种情况下会引发几个问题\n1. Fragment对象的获取,这个可以在需要和时候通过`findFragmentByTag`或`onAttachFragment`获取，也可以通过自己写回调接口来实现。\n2. Fragment的状态会丢失，丢失的原因是onCreate重新创建时，会调用Framgment的默认无参构造来创建Fragment对象。所以这也是为什么文档中说Fragment一定要有一个默认的构造函数，而且最好不要有带参数的构造函数，传参数要用setArguments。\n所以需要在`onSaveInstanceState()`时，把一些变量保存，然后在onCreate时恢复\n3. hide、show问题，主要也是Fragment的状态会丢失问题引起的，因为恢复的所有的Fragment的都是以show状态恢复的，需要自己手动恢复其状态。这里是一个示例:http://www.jianshu.com/p/d9143a92ad94\n\n```java\npublic class TestActivity extends Activity{\n    private static final String STATE_SAVE_IS_HIDDEN = \"STATE_SAVE_IS_HIDDEN\";\n\n    @Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n    ...\n    if (savedInstanceState != null) {\n        boolean isSupportHidden = savedInstanceState.getBoolean(STATE_SAVE_IS_HIDDEN);\n\n        FragmentTransaction ft = getFragmentManager().beginTransaction();\n        if (isSupportHidden) {\n            ft.hide(this);\n        } else {\n            ft.show(this);\n        }\n        ft.commit();\n    }\n\n    @Override\n    public void onSaveInstanceState(Bundle outState) {\n        ...\n        outState.putBoolean(STATE_SAVE_IS_HIDDEN, isHidden());\n    }\n}\n```\n\n#### state loss异常\n`FragmentTransaction`是异步的，commit()仅是相当于把操作加入到`FragmentManager`的队列，然后`FragmentManager`会在某一个时刻来执行，并不是立即执行。\n所以在实际项目中可能会偶尔出现这种报错:`Can not perform this action after onSaveInstanceState`。从这段报错信息可以猜测出我们`commit()`是`onSaveInstanceState()`之后了。\n出现这种情况有两种解决方案:\n1. 尽量要在`onSaveInstanceState`之前进行`Fragment`进行操作, 可以添加标志符解决\n参考Dialer\n2. 使用`commitAllowStateLoss`，它可以保证在Activity onStop以后仍然顺利执行commit操作，但是会造成状态丢失。\n\n> 报错的原因见`BackStackRecord.commitInternal -> FragmentManager.enqueueAction` ，即在`commit`的时候，`FragmentManager`通过`checkStateLoss`进行了一次状态检测\n> 在使用`DilaogFragment`的`show`和`dissmiss`方法时也要注意发生该异常的情况，建议使用`dismissAllowingStateLoss`方法\n\ncommitAllowingStateLoss会造成状态丢失，具体情况如下:\n1. 当前您的 `Activity` 在显示 `FragmentA`\n2. 您的 Activity 被切换到后台了（(`onStop()` 和 `onSaveInstanceState()` 函数被调用了）\n3. 这个时候您的 `Activity` 的逻辑发生了一些变化，您使用 `FragmentB` 替换了 `FragmentA` 并调用了 `commitAllowingStateLoss()` 函数来提交这个变化。\n\n这个时候，当用户再次切回您的 Activity 的时候可能出现如下两种状态：\n1. 如果系统内存不足并且杀死了您的应用，当用户重新打开您的 应用的时候，系统将会恢复您的应用到上面第二步的状态，而 `FragmentB` 是不会显示的。\n2. 如果系统没有杀死您的应用，用户则可以看到 `FragmentB`。当 Activity 再次回到后台的时候（`onStop`）， `FragmentB` 的状态才会被保存起来。\n\n\n### 文章\n\n[我为什么主张反对使用Android Fragment](https://asce1885.gitbooks.io/android-rd-senior-advanced/content/wo_wei_shi_yao_zhu_zhang_fan_dui_shi_yong_android_fragment.html)","source":"_posts/Fragment笔记.md","raw":"---\ntitle: Fragment笔记\ndate: 2018-04-15 14:23:18\ntags: Android\n---\n\n> 两年前的笔记，再拿出来回顾才发现许久不用有些内容都记混淆了\n\n### 基本概念\nFragment是Android3.0(sdk 17)后引入的一个新的API,出现的初衷是为了适应大屏幕的平板电脑,我们可以把他看成一个小型的Activity，又称Activity片段.Fragment并不能单独使用，必须嵌套在Activity中使用。\n\n\nV4包下提供的也有一个Fragment,使用的时候要注意:\n> 1. 如果使用v4包下的`Fragment`,那么所在的那个`Activity`就要继承FragmentActivity `AppCompatActivity`下继承了`FragmentActivity`，可以直接使用\n> 2. 需要把`getFragmentManager( )`改成`getSupportFragmentManager()`\n\n\n几个子类\n\n> 对话框:DialogFragment \n> 列表:ListFragment \n> 选项设置:PreferenceFragment\n> WebView界面:WebViewFragment\n\n<!--more-->\n生命周期:\n![@Fragment的生命周期](/images/Fragment的生命周期.png)\n\nFragment的生命周期是跟随Activity的\n\n### Fragment基本创建与使用\n静态加载\n![@Fragement静态加载](/images/Fragement静态加载.png)\n\n注意点:\nname属性是全限定类名哦，就是要包含Fragment的包名\nlayout属性会覆盖fragment布局文件中的layout属性\n必须为布局设置id，系统在Activity恢复时用它来存储状态, 否则配置发生变化或内存重启时会报错(如旋转屏幕)\n\n```xml\n<fragment\n     android:id=\"@+id/fg_fragment\"\n     android:name=\"com.tory.demo.sample.test.LifeCycleFragment\"\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"100dp\"/>\n```\n\n动态加载\n![@Fragment的动态加载](/images/Fragment的动态加载.png)\n\n注意点:\nFragment的管理是通过事务来管理的，所以可以进行多次add,remove等\n注意事务需要commit\n\n```java\nLifeCycleFragment fragment = new LifeCycleFragment();\ngetSupportFragmentManager().beginTransaction()\n     .add(R.id.frame_container,fragment,\"LifeCycleFragment\")\n     .addToBackStack(\"LifeCycleFragment\")\n     .commit();\n```\n\nFragment的事务操作\n![@Fragment的事件操作](/images/Fragment的事件操作.png)\n\n> fragment的每一次改变的提交给activity，都称为一个事务\n> `add()`, `remove()`,`replace()` ,`show()`, `hide()`等一系列方法，只有commit了以后才会生效\n> Fragment的事务操作是**异步**的，commit了以后相当于进入了一个队列，然后等待合适的时刻执行\n>  addToBackStack() 可以把fragment的本次操作放入Activity的返回栈中，通过点击back键可以回到以前状态，可以通过此方法移除或隐藏Fragment，个人**不建议使用**。\n>  从FragmentManger.beginTransaction真正返回的确是一个`BackStackRecord`类， 其实现了FragmentTransaction所定义的接口。\n\n\n\n### 使用技巧与建议:\n1. 对`Fragment`传递数据，建议使用`setArguments(Bundle args)`，而后在`onCreate`中使用`getArguments()`取出，在 “内存重启”前，系统会帮你保存数据，不会造成数据的丢失。和Activity的Intent原理一致。\n\n2. 使用`newInstance(参数)` 创建`Fragment`对象，优点是调用者只需要关系传递的哪些数据，而无需关心传递数据的Key是什么。\n可结合第一点使用\n\n3.  Fragment之间的通信，在同一个`Activity`下的两个`Fragment`的通信：`FragmentA`调用其宿主`Activity`的方法，宿主`Activity`再根据`FragmentA`的调用参数去调用`FragmentB`的方法并传递参数给B\n\n在AS里面右键，新建Fragment, AS提供了一个Fragment的模板写法\n> 1. 使用newInstance(参数) 创建Fragment对象\n> 2. 使用setArguments(Bundle args)，而后在onCreate中使用getArguments()取出 在 “内存重启”前，系统会帮你保存数据，不会造成数据的丢失。和Activity的Intent原理一致。\n> 3. 在Fragment中定义一个内部回调接口,在Activity中实现\n\n4. 使用`DialogFragment`代码`Dialog`，便于管理`Dialog`的生命周期和保存状态。\n`DialogFragment`在`show`的时候容易出现以下错误`java.lang.IllegalStateException: Fragment already added`，这是重复添加引起的，`fragment.isAdded()`\n```java\nif(!fragment.isAdded()){\n    fragment.show(getFragmentManager(),\"fragment\");\n}\n```\n\n5. add(), show(), hide(), replace(),remove()...\n`show()`，`hide()`最终是让`Fragment`的`View setVisibility()`，不会调用生命周期;\n如:  `hide()`\n - 设置`mHidden` 为`true`\n - `fragment.mView.setVisibility(View.GONE`); 隐藏`fragment`的`view`\n - `fragment.onHiddenChanged(true)`; 调用onHiddenChange\n可以发现也可能通过`fragment.getView().setVisibility();`来控制fragment的显示，只是此时没有改变`mHidden`的状态\n`replace()`的话会销毁前一个视图，即调用`onDestoryView`、`onCreateView`等一系列生命周期\n\n6. onHiddenChanged的回调时机\n当使用`add()+show()`，`hide()`跳转新的Fragment时，旧的Fragment回调`onHiddenChanged()`，不会回调`onStop()`等生命周期方法，而新的Fragment在创建时是不会回调`onHiddenChanged()`，这点要切记。\n有类似需求可以自己实现\n\n7. ViewPager中的Fragment生命周期\nViewPager会预先加载预先加载包换当前可见的Fragment和其两侧的三个Fragment\n具体参考这篇文章：http://www.jianshu.com/p/660ec2666faa\n![Fragment在ViewPager中](/images/Fragment在ViewPager中.png)\n\n8. setUserVisibleHint\n使用`ViewPager`时，切换回上一个Fragment页面时（已经初始化完毕），不会回调任何生命周期方法以及`onHiddenChanged()`，只有`setUserVisibleHint(boolean isVisibleToUser)`会被回调，所以如果你想进行一些懒加载，可以重载该方法实现(需要配合fragment生命周期使用)。\n具体实现可以参考:http://www.jianshu.com/p/c5d29a0c3f4c\n`setUserVisibleHint`的回调实际上是由`ViewPager`触发的，与fragment的show，hide状态没有太大关系\n\n9. `commit()`, `commitNow()` 和`executePendingTransactions()`;\n\ncommit并不是立即执行的, 它会被发送到主线程的任务队列当中去, 当主线程准备好执行它的时候执行; 所以在使用commit的后要注意通过isAdded()或isShow()等方法是并不可靠的，因为很有可能因为Fragment还没到添加上去而引起一些错误。\n\n想要同步执行可以使用`commitNow`或者`executePendingTransactions`; commitNow是立刻执行**当前事务**, 而`executePendingTransactions`立即执行在队列中的所有事务！\n\n\n### 使用中出现的问题:\n\n#### Activity重新创建\n通过事务动态添加Fragment的时候我们可能很自然的这样写\n\n```java\n@Override\nonCreate(Bundle savedInstance) {\n     getSupportFragmentManager().beginTransaction()\n         .add(R.id.frame_container,fragment)\n         .commit();\n}\n```\n表面上看起来没有什么情况，看起来好像也没有什么不对，但在实际项目中可以看到很多这样的写法\n\n```java\n@Override\nonCreate(Bundle savedInstance) {\n   if (savedIntance == null) {\n      // create fragment and add it to Activity.\n   }\n}\n```\n因为系统配置信息发生变化或内存重启的时候，系统会把Activity杀掉，然后再重新创建它。此时系统会尽可能的恢复以前的状态，所以以前添加的Fragment也会重新添加进去，也就没有必要重新创建一个Fragment;\n这种情况下会引发几个问题\n1. Fragment对象的获取,这个可以在需要和时候通过`findFragmentByTag`或`onAttachFragment`获取，也可以通过自己写回调接口来实现。\n2. Fragment的状态会丢失，丢失的原因是onCreate重新创建时，会调用Framgment的默认无参构造来创建Fragment对象。所以这也是为什么文档中说Fragment一定要有一个默认的构造函数，而且最好不要有带参数的构造函数，传参数要用setArguments。\n所以需要在`onSaveInstanceState()`时，把一些变量保存，然后在onCreate时恢复\n3. hide、show问题，主要也是Fragment的状态会丢失问题引起的，因为恢复的所有的Fragment的都是以show状态恢复的，需要自己手动恢复其状态。这里是一个示例:http://www.jianshu.com/p/d9143a92ad94\n\n```java\npublic class TestActivity extends Activity{\n    private static final String STATE_SAVE_IS_HIDDEN = \"STATE_SAVE_IS_HIDDEN\";\n\n    @Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n    ...\n    if (savedInstanceState != null) {\n        boolean isSupportHidden = savedInstanceState.getBoolean(STATE_SAVE_IS_HIDDEN);\n\n        FragmentTransaction ft = getFragmentManager().beginTransaction();\n        if (isSupportHidden) {\n            ft.hide(this);\n        } else {\n            ft.show(this);\n        }\n        ft.commit();\n    }\n\n    @Override\n    public void onSaveInstanceState(Bundle outState) {\n        ...\n        outState.putBoolean(STATE_SAVE_IS_HIDDEN, isHidden());\n    }\n}\n```\n\n#### state loss异常\n`FragmentTransaction`是异步的，commit()仅是相当于把操作加入到`FragmentManager`的队列，然后`FragmentManager`会在某一个时刻来执行，并不是立即执行。\n所以在实际项目中可能会偶尔出现这种报错:`Can not perform this action after onSaveInstanceState`。从这段报错信息可以猜测出我们`commit()`是`onSaveInstanceState()`之后了。\n出现这种情况有两种解决方案:\n1. 尽量要在`onSaveInstanceState`之前进行`Fragment`进行操作, 可以添加标志符解决\n参考Dialer\n2. 使用`commitAllowStateLoss`，它可以保证在Activity onStop以后仍然顺利执行commit操作，但是会造成状态丢失。\n\n> 报错的原因见`BackStackRecord.commitInternal -> FragmentManager.enqueueAction` ，即在`commit`的时候，`FragmentManager`通过`checkStateLoss`进行了一次状态检测\n> 在使用`DilaogFragment`的`show`和`dissmiss`方法时也要注意发生该异常的情况，建议使用`dismissAllowingStateLoss`方法\n\ncommitAllowingStateLoss会造成状态丢失，具体情况如下:\n1. 当前您的 `Activity` 在显示 `FragmentA`\n2. 您的 Activity 被切换到后台了（(`onStop()` 和 `onSaveInstanceState()` 函数被调用了）\n3. 这个时候您的 `Activity` 的逻辑发生了一些变化，您使用 `FragmentB` 替换了 `FragmentA` 并调用了 `commitAllowingStateLoss()` 函数来提交这个变化。\n\n这个时候，当用户再次切回您的 Activity 的时候可能出现如下两种状态：\n1. 如果系统内存不足并且杀死了您的应用，当用户重新打开您的 应用的时候，系统将会恢复您的应用到上面第二步的状态，而 `FragmentB` 是不会显示的。\n2. 如果系统没有杀死您的应用，用户则可以看到 `FragmentB`。当 Activity 再次回到后台的时候（`onStop`）， `FragmentB` 的状态才会被保存起来。\n\n\n### 文章\n\n[我为什么主张反对使用Android Fragment](https://asce1885.gitbooks.io/android-rd-senior-advanced/content/wo_wei_shi_yao_zhu_zhang_fan_dui_shi_yong_android_fragment.html)","slug":"Fragment笔记","published":1,"updated":"2018-04-15T07:08:44.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyq0fezz000azwv7ff7x7jw6","content":"<blockquote>\n<p>两年前的笔记，再拿出来回顾才发现许久不用有些内容都记混淆了</p>\n</blockquote>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>Fragment是Android3.0(sdk 17)后引入的一个新的API,出现的初衷是为了适应大屏幕的平板电脑,我们可以把他看成一个小型的Activity，又称Activity片段.Fragment并不能单独使用，必须嵌套在Activity中使用。</p>\n<p>V4包下提供的也有一个Fragment,使用的时候要注意:</p>\n<blockquote>\n<ol>\n<li>如果使用v4包下的<code>Fragment</code>,那么所在的那个<code>Activity</code>就要继承FragmentActivity <code>AppCompatActivity</code>下继承了<code>FragmentActivity</code>，可以直接使用</li>\n<li>需要把<code>getFragmentManager( )</code>改成<code>getSupportFragmentManager()</code></li>\n</ol>\n</blockquote>\n<p>几个子类</p>\n<blockquote>\n<p>对话框:DialogFragment<br>列表:ListFragment<br>选项设置:PreferenceFragment<br>WebView界面:WebViewFragment</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>生命周期:<br><img src=\"/images/Fragment的生命周期.png\" alt=\"@Fragment的生命周期\"></p>\n<p>Fragment的生命周期是跟随Activity的</p>\n<h3 id=\"Fragment基本创建与使用\"><a href=\"#Fragment基本创建与使用\" class=\"headerlink\" title=\"Fragment基本创建与使用\"></a>Fragment基本创建与使用</h3><p>静态加载<br><img src=\"/images/Fragement静态加载.png\" alt=\"@Fragement静态加载\"></p>\n<p>注意点:<br>name属性是全限定类名哦，就是要包含Fragment的包名<br>layout属性会覆盖fragment布局文件中的layout属性<br>必须为布局设置id，系统在Activity恢复时用它来存储状态, 否则配置发生变化或内存重启时会报错(如旋转屏幕)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fg_fragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tory.demo.sample.test.LifeCycleFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>动态加载<br><img src=\"/images/Fragment的动态加载.png\" alt=\"@Fragment的动态加载\"></p>\n<p>注意点:<br>Fragment的管理是通过事务来管理的，所以可以进行多次add,remove等<br>注意事务需要commit</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LifeCycleFragment fragment = <span class=\"keyword\">new</span> LifeCycleFragment();</span><br><span class=\"line\">getSupportFragmentManager().beginTransaction()</span><br><span class=\"line\">     .add(R.id.frame_container,fragment,<span class=\"string\">\"LifeCycleFragment\"</span>)</span><br><span class=\"line\">     .addToBackStack(<span class=\"string\">\"LifeCycleFragment\"</span>)</span><br><span class=\"line\">     .commit();</span><br></pre></td></tr></table></figure>\n<p>Fragment的事务操作<br><img src=\"/images/Fragment的事件操作.png\" alt=\"@Fragment的事件操作\"></p>\n<blockquote>\n<p>fragment的每一次改变的提交给activity，都称为一个事务<br><code>add()</code>, <code>remove()</code>,<code>replace()</code> ,<code>show()</code>, <code>hide()</code>等一系列方法，只有commit了以后才会生效<br>Fragment的事务操作是<strong>异步</strong>的，commit了以后相当于进入了一个队列，然后等待合适的时刻执行<br> addToBackStack() 可以把fragment的本次操作放入Activity的返回栈中，通过点击back键可以回到以前状态，可以通过此方法移除或隐藏Fragment，个人<strong>不建议使用</strong>。<br> 从FragmentManger.beginTransaction真正返回的确是一个<code>BackStackRecord</code>类， 其实现了FragmentTransaction所定义的接口。</p>\n</blockquote>\n<h3 id=\"使用技巧与建议\"><a href=\"#使用技巧与建议\" class=\"headerlink\" title=\"使用技巧与建议:\"></a>使用技巧与建议:</h3><ol>\n<li><p>对<code>Fragment</code>传递数据，建议使用<code>setArguments(Bundle args)</code>，而后在<code>onCreate</code>中使用<code>getArguments()</code>取出，在 “内存重启”前，系统会帮你保存数据，不会造成数据的丢失。和Activity的Intent原理一致。</p>\n</li>\n<li><p>使用<code>newInstance(参数)</code> 创建<code>Fragment</code>对象，优点是调用者只需要关系传递的哪些数据，而无需关心传递数据的Key是什么。<br>可结合第一点使用</p>\n</li>\n<li><p>Fragment之间的通信，在同一个<code>Activity</code>下的两个<code>Fragment</code>的通信：<code>FragmentA</code>调用其宿主<code>Activity</code>的方法，宿主<code>Activity</code>再根据<code>FragmentA</code>的调用参数去调用<code>FragmentB</code>的方法并传递参数给B</p>\n</li>\n</ol>\n<p>在AS里面右键，新建Fragment, AS提供了一个Fragment的模板写法</p>\n<blockquote>\n<ol>\n<li>使用newInstance(参数) 创建Fragment对象</li>\n<li>使用setArguments(Bundle args)，而后在onCreate中使用getArguments()取出 在 “内存重启”前，系统会帮你保存数据，不会造成数据的丢失。和Activity的Intent原理一致。</li>\n<li>在Fragment中定义一个内部回调接口,在Activity中实现</li>\n</ol>\n</blockquote>\n<ol>\n<li><p>使用<code>DialogFragment</code>代码<code>Dialog</code>，便于管理<code>Dialog</code>的生命周期和保存状态。<br><code>DialogFragment</code>在<code>show</code>的时候容易出现以下错误<code>java.lang.IllegalStateException: Fragment already added</code>，这是重复添加引起的，<code>fragment.isAdded()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!fragment.isAdded())&#123;</span><br><span class=\"line\">    fragment.show(getFragmentManager(),<span class=\"string\">\"fragment\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>add(), show(), hide(), replace(),remove()…<br><code>show()</code>，<code>hide()</code>最终是让<code>Fragment</code>的<code>View setVisibility()</code>，不会调用生命周期;<br>如:  <code>hide()</code></p>\n<ul>\n<li>设置<code>mHidden</code> 为<code>true</code></li>\n<li><code>fragment.mView.setVisibility(View.GONE</code>); 隐藏<code>fragment</code>的<code>view</code></li>\n<li><code>fragment.onHiddenChanged(true)</code>; 调用onHiddenChange<br>可以发现也可能通过<code>fragment.getView().setVisibility();</code>来控制fragment的显示，只是此时没有改变<code>mHidden</code>的状态<br><code>replace()</code>的话会销毁前一个视图，即调用<code>onDestoryView</code>、<code>onCreateView</code>等一系列生命周期</li>\n</ul>\n</li>\n<li><p>onHiddenChanged的回调时机<br>当使用<code>add()+show()</code>，<code>hide()</code>跳转新的Fragment时，旧的Fragment回调<code>onHiddenChanged()</code>，不会回调<code>onStop()</code>等生命周期方法，而新的Fragment在创建时是不会回调<code>onHiddenChanged()</code>，这点要切记。<br>有类似需求可以自己实现</p>\n</li>\n<li><p>ViewPager中的Fragment生命周期<br>ViewPager会预先加载预先加载包换当前可见的Fragment和其两侧的三个Fragment<br>具体参考这篇文章：<a href=\"http://www.jianshu.com/p/660ec2666faa\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/660ec2666faa</a><br><img src=\"/images/Fragment在ViewPager中.png\" alt=\"Fragment在ViewPager中\"></p>\n</li>\n<li><p>setUserVisibleHint<br>使用<code>ViewPager</code>时，切换回上一个Fragment页面时（已经初始化完毕），不会回调任何生命周期方法以及<code>onHiddenChanged()</code>，只有<code>setUserVisibleHint(boolean isVisibleToUser)</code>会被回调，所以如果你想进行一些懒加载，可以重载该方法实现(需要配合fragment生命周期使用)。<br>具体实现可以参考:<a href=\"http://www.jianshu.com/p/c5d29a0c3f4c\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/c5d29a0c3f4c</a><br><code>setUserVisibleHint</code>的回调实际上是由<code>ViewPager</code>触发的，与fragment的show，hide状态没有太大关系</p>\n</li>\n<li><p><code>commit()</code>, <code>commitNow()</code> 和<code>executePendingTransactions()</code>;</p>\n</li>\n</ol>\n<p>commit并不是立即执行的, 它会被发送到主线程的任务队列当中去, 当主线程准备好执行它的时候执行; 所以在使用commit的后要注意通过isAdded()或isShow()等方法是并不可靠的，因为很有可能因为Fragment还没到添加上去而引起一些错误。</p>\n<p>想要同步执行可以使用<code>commitNow</code>或者<code>executePendingTransactions</code>; commitNow是立刻执行<strong>当前事务</strong>, 而<code>executePendingTransactions</code>立即执行在队列中的所有事务！</p>\n<h3 id=\"使用中出现的问题\"><a href=\"#使用中出现的问题\" class=\"headerlink\" title=\"使用中出现的问题:\"></a>使用中出现的问题:</h3><h4 id=\"Activity重新创建\"><a href=\"#Activity重新创建\" class=\"headerlink\" title=\"Activity重新创建\"></a>Activity重新创建</h4><p>通过事务动态添加Fragment的时候我们可能很自然的这样写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">onCreate(Bundle savedInstance) &#123;</span><br><span class=\"line\">     getSupportFragmentManager().beginTransaction()</span><br><span class=\"line\">         .add(R.id.frame_container,fragment)</span><br><span class=\"line\">         .commit();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表面上看起来没有什么情况，看起来好像也没有什么不对，但在实际项目中可以看到很多这样的写法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">onCreate(Bundle savedInstance) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (savedIntance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// create fragment and add it to Activity.</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为系统配置信息发生变化或内存重启的时候，系统会把Activity杀掉，然后再重新创建它。此时系统会尽可能的恢复以前的状态，所以以前添加的Fragment也会重新添加进去，也就没有必要重新创建一个Fragment;<br>这种情况下会引发几个问题</p>\n<ol>\n<li>Fragment对象的获取,这个可以在需要和时候通过<code>findFragmentByTag</code>或<code>onAttachFragment</code>获取，也可以通过自己写回调接口来实现。</li>\n<li>Fragment的状态会丢失，丢失的原因是onCreate重新创建时，会调用Framgment的默认无参构造来创建Fragment对象。所以这也是为什么文档中说Fragment一定要有一个默认的构造函数，而且最好不要有带参数的构造函数，传参数要用setArguments。<br>所以需要在<code>onSaveInstanceState()</code>时，把一些变量保存，然后在onCreate时恢复</li>\n<li>hide、show问题，主要也是Fragment的状态会丢失问题引起的，因为恢复的所有的Fragment的都是以show状态恢复的，需要自己手动恢复其状态。这里是一个示例:<a href=\"http://www.jianshu.com/p/d9143a92ad94\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/d9143a92ad94</a></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String STATE_SAVE_IS_HIDDEN = <span class=\"string\">\"STATE_SAVE_IS_HIDDEN\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (savedInstanceState != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isSupportHidden = savedInstanceState.getBoolean(STATE_SAVE_IS_HIDDEN);</span><br><span class=\"line\"></span><br><span class=\"line\">        FragmentTransaction ft = getFragmentManager().beginTransaction();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSupportHidden) &#123;</span><br><span class=\"line\">            ft.hide(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ft.show(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ft.commit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        outState.putBoolean(STATE_SAVE_IS_HIDDEN, isHidden());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"state-loss异常\"><a href=\"#state-loss异常\" class=\"headerlink\" title=\"state loss异常\"></a>state loss异常</h4><p><code>FragmentTransaction</code>是异步的，commit()仅是相当于把操作加入到<code>FragmentManager</code>的队列，然后<code>FragmentManager</code>会在某一个时刻来执行，并不是立即执行。<br>所以在实际项目中可能会偶尔出现这种报错:<code>Can not perform this action after onSaveInstanceState</code>。从这段报错信息可以猜测出我们<code>commit()</code>是<code>onSaveInstanceState()</code>之后了。<br>出现这种情况有两种解决方案:</p>\n<ol>\n<li>尽量要在<code>onSaveInstanceState</code>之前进行<code>Fragment</code>进行操作, 可以添加标志符解决<br>参考Dialer</li>\n<li>使用<code>commitAllowStateLoss</code>，它可以保证在Activity onStop以后仍然顺利执行commit操作，但是会造成状态丢失。</li>\n</ol>\n<blockquote>\n<p>报错的原因见<code>BackStackRecord.commitInternal -&gt; FragmentManager.enqueueAction</code> ，即在<code>commit</code>的时候，<code>FragmentManager</code>通过<code>checkStateLoss</code>进行了一次状态检测<br>在使用<code>DilaogFragment</code>的<code>show</code>和<code>dissmiss</code>方法时也要注意发生该异常的情况，建议使用<code>dismissAllowingStateLoss</code>方法</p>\n</blockquote>\n<p>commitAllowingStateLoss会造成状态丢失，具体情况如下:</p>\n<ol>\n<li>当前您的 <code>Activity</code> 在显示 <code>FragmentA</code></li>\n<li>您的 Activity 被切换到后台了（(<code>onStop()</code> 和 <code>onSaveInstanceState()</code> 函数被调用了）</li>\n<li>这个时候您的 <code>Activity</code> 的逻辑发生了一些变化，您使用 <code>FragmentB</code> 替换了 <code>FragmentA</code> 并调用了 <code>commitAllowingStateLoss()</code> 函数来提交这个变化。</li>\n</ol>\n<p>这个时候，当用户再次切回您的 Activity 的时候可能出现如下两种状态：</p>\n<ol>\n<li>如果系统内存不足并且杀死了您的应用，当用户重新打开您的 应用的时候，系统将会恢复您的应用到上面第二步的状态，而 <code>FragmentB</code> 是不会显示的。</li>\n<li>如果系统没有杀死您的应用，用户则可以看到 <code>FragmentB</code>。当 Activity 再次回到后台的时候（<code>onStop</code>）， <code>FragmentB</code> 的状态才会被保存起来。</li>\n</ol>\n<h3 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h3><p><a href=\"https://asce1885.gitbooks.io/android-rd-senior-advanced/content/wo_wei_shi_yao_zhu_zhang_fan_dui_shi_yong_android_fragment.html\" target=\"_blank\" rel=\"noopener\">我为什么主张反对使用Android Fragment</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>两年前的笔记，再拿出来回顾才发现许久不用有些内容都记混淆了</p>\n</blockquote>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>Fragment是Android3.0(sdk 17)后引入的一个新的API,出现的初衷是为了适应大屏幕的平板电脑,我们可以把他看成一个小型的Activity，又称Activity片段.Fragment并不能单独使用，必须嵌套在Activity中使用。</p>\n<p>V4包下提供的也有一个Fragment,使用的时候要注意:</p>\n<blockquote>\n<ol>\n<li>如果使用v4包下的<code>Fragment</code>,那么所在的那个<code>Activity</code>就要继承FragmentActivity <code>AppCompatActivity</code>下继承了<code>FragmentActivity</code>，可以直接使用</li>\n<li>需要把<code>getFragmentManager( )</code>改成<code>getSupportFragmentManager()</code></li>\n</ol>\n</blockquote>\n<p>几个子类</p>\n<blockquote>\n<p>对话框:DialogFragment<br>列表:ListFragment<br>选项设置:PreferenceFragment<br>WebView界面:WebViewFragment</p>\n</blockquote>","more":"<p>生命周期:<br><img src=\"/images/Fragment的生命周期.png\" alt=\"@Fragment的生命周期\"></p>\n<p>Fragment的生命周期是跟随Activity的</p>\n<h3 id=\"Fragment基本创建与使用\"><a href=\"#Fragment基本创建与使用\" class=\"headerlink\" title=\"Fragment基本创建与使用\"></a>Fragment基本创建与使用</h3><p>静态加载<br><img src=\"/images/Fragement静态加载.png\" alt=\"@Fragement静态加载\"></p>\n<p>注意点:<br>name属性是全限定类名哦，就是要包含Fragment的包名<br>layout属性会覆盖fragment布局文件中的layout属性<br>必须为布局设置id，系统在Activity恢复时用它来存储状态, 否则配置发生变化或内存重启时会报错(如旋转屏幕)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fg_fragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.tory.demo.sample.test.LifeCycleFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>动态加载<br><img src=\"/images/Fragment的动态加载.png\" alt=\"@Fragment的动态加载\"></p>\n<p>注意点:<br>Fragment的管理是通过事务来管理的，所以可以进行多次add,remove等<br>注意事务需要commit</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LifeCycleFragment fragment = <span class=\"keyword\">new</span> LifeCycleFragment();</span><br><span class=\"line\">getSupportFragmentManager().beginTransaction()</span><br><span class=\"line\">     .add(R.id.frame_container,fragment,<span class=\"string\">\"LifeCycleFragment\"</span>)</span><br><span class=\"line\">     .addToBackStack(<span class=\"string\">\"LifeCycleFragment\"</span>)</span><br><span class=\"line\">     .commit();</span><br></pre></td></tr></table></figure>\n<p>Fragment的事务操作<br><img src=\"/images/Fragment的事件操作.png\" alt=\"@Fragment的事件操作\"></p>\n<blockquote>\n<p>fragment的每一次改变的提交给activity，都称为一个事务<br><code>add()</code>, <code>remove()</code>,<code>replace()</code> ,<code>show()</code>, <code>hide()</code>等一系列方法，只有commit了以后才会生效<br>Fragment的事务操作是<strong>异步</strong>的，commit了以后相当于进入了一个队列，然后等待合适的时刻执行<br> addToBackStack() 可以把fragment的本次操作放入Activity的返回栈中，通过点击back键可以回到以前状态，可以通过此方法移除或隐藏Fragment，个人<strong>不建议使用</strong>。<br> 从FragmentManger.beginTransaction真正返回的确是一个<code>BackStackRecord</code>类， 其实现了FragmentTransaction所定义的接口。</p>\n</blockquote>\n<h3 id=\"使用技巧与建议\"><a href=\"#使用技巧与建议\" class=\"headerlink\" title=\"使用技巧与建议:\"></a>使用技巧与建议:</h3><ol>\n<li><p>对<code>Fragment</code>传递数据，建议使用<code>setArguments(Bundle args)</code>，而后在<code>onCreate</code>中使用<code>getArguments()</code>取出，在 “内存重启”前，系统会帮你保存数据，不会造成数据的丢失。和Activity的Intent原理一致。</p>\n</li>\n<li><p>使用<code>newInstance(参数)</code> 创建<code>Fragment</code>对象，优点是调用者只需要关系传递的哪些数据，而无需关心传递数据的Key是什么。<br>可结合第一点使用</p>\n</li>\n<li><p>Fragment之间的通信，在同一个<code>Activity</code>下的两个<code>Fragment</code>的通信：<code>FragmentA</code>调用其宿主<code>Activity</code>的方法，宿主<code>Activity</code>再根据<code>FragmentA</code>的调用参数去调用<code>FragmentB</code>的方法并传递参数给B</p>\n</li>\n</ol>\n<p>在AS里面右键，新建Fragment, AS提供了一个Fragment的模板写法</p>\n<blockquote>\n<ol>\n<li>使用newInstance(参数) 创建Fragment对象</li>\n<li>使用setArguments(Bundle args)，而后在onCreate中使用getArguments()取出 在 “内存重启”前，系统会帮你保存数据，不会造成数据的丢失。和Activity的Intent原理一致。</li>\n<li>在Fragment中定义一个内部回调接口,在Activity中实现</li>\n</ol>\n</blockquote>\n<ol>\n<li><p>使用<code>DialogFragment</code>代码<code>Dialog</code>，便于管理<code>Dialog</code>的生命周期和保存状态。<br><code>DialogFragment</code>在<code>show</code>的时候容易出现以下错误<code>java.lang.IllegalStateException: Fragment already added</code>，这是重复添加引起的，<code>fragment.isAdded()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!fragment.isAdded())&#123;</span><br><span class=\"line\">    fragment.show(getFragmentManager(),<span class=\"string\">\"fragment\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>add(), show(), hide(), replace(),remove()…<br><code>show()</code>，<code>hide()</code>最终是让<code>Fragment</code>的<code>View setVisibility()</code>，不会调用生命周期;<br>如:  <code>hide()</code></p>\n<ul>\n<li>设置<code>mHidden</code> 为<code>true</code></li>\n<li><code>fragment.mView.setVisibility(View.GONE</code>); 隐藏<code>fragment</code>的<code>view</code></li>\n<li><code>fragment.onHiddenChanged(true)</code>; 调用onHiddenChange<br>可以发现也可能通过<code>fragment.getView().setVisibility();</code>来控制fragment的显示，只是此时没有改变<code>mHidden</code>的状态<br><code>replace()</code>的话会销毁前一个视图，即调用<code>onDestoryView</code>、<code>onCreateView</code>等一系列生命周期</li>\n</ul>\n</li>\n<li><p>onHiddenChanged的回调时机<br>当使用<code>add()+show()</code>，<code>hide()</code>跳转新的Fragment时，旧的Fragment回调<code>onHiddenChanged()</code>，不会回调<code>onStop()</code>等生命周期方法，而新的Fragment在创建时是不会回调<code>onHiddenChanged()</code>，这点要切记。<br>有类似需求可以自己实现</p>\n</li>\n<li><p>ViewPager中的Fragment生命周期<br>ViewPager会预先加载预先加载包换当前可见的Fragment和其两侧的三个Fragment<br>具体参考这篇文章：<a href=\"http://www.jianshu.com/p/660ec2666faa\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/660ec2666faa</a><br><img src=\"/images/Fragment在ViewPager中.png\" alt=\"Fragment在ViewPager中\"></p>\n</li>\n<li><p>setUserVisibleHint<br>使用<code>ViewPager</code>时，切换回上一个Fragment页面时（已经初始化完毕），不会回调任何生命周期方法以及<code>onHiddenChanged()</code>，只有<code>setUserVisibleHint(boolean isVisibleToUser)</code>会被回调，所以如果你想进行一些懒加载，可以重载该方法实现(需要配合fragment生命周期使用)。<br>具体实现可以参考:<a href=\"http://www.jianshu.com/p/c5d29a0c3f4c\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/c5d29a0c3f4c</a><br><code>setUserVisibleHint</code>的回调实际上是由<code>ViewPager</code>触发的，与fragment的show，hide状态没有太大关系</p>\n</li>\n<li><p><code>commit()</code>, <code>commitNow()</code> 和<code>executePendingTransactions()</code>;</p>\n</li>\n</ol>\n<p>commit并不是立即执行的, 它会被发送到主线程的任务队列当中去, 当主线程准备好执行它的时候执行; 所以在使用commit的后要注意通过isAdded()或isShow()等方法是并不可靠的，因为很有可能因为Fragment还没到添加上去而引起一些错误。</p>\n<p>想要同步执行可以使用<code>commitNow</code>或者<code>executePendingTransactions</code>; commitNow是立刻执行<strong>当前事务</strong>, 而<code>executePendingTransactions</code>立即执行在队列中的所有事务！</p>\n<h3 id=\"使用中出现的问题\"><a href=\"#使用中出现的问题\" class=\"headerlink\" title=\"使用中出现的问题:\"></a>使用中出现的问题:</h3><h4 id=\"Activity重新创建\"><a href=\"#Activity重新创建\" class=\"headerlink\" title=\"Activity重新创建\"></a>Activity重新创建</h4><p>通过事务动态添加Fragment的时候我们可能很自然的这样写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">onCreate(Bundle savedInstance) &#123;</span><br><span class=\"line\">     getSupportFragmentManager().beginTransaction()</span><br><span class=\"line\">         .add(R.id.frame_container,fragment)</span><br><span class=\"line\">         .commit();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表面上看起来没有什么情况，看起来好像也没有什么不对，但在实际项目中可以看到很多这样的写法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">onCreate(Bundle savedInstance) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (savedIntance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// create fragment and add it to Activity.</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为系统配置信息发生变化或内存重启的时候，系统会把Activity杀掉，然后再重新创建它。此时系统会尽可能的恢复以前的状态，所以以前添加的Fragment也会重新添加进去，也就没有必要重新创建一个Fragment;<br>这种情况下会引发几个问题</p>\n<ol>\n<li>Fragment对象的获取,这个可以在需要和时候通过<code>findFragmentByTag</code>或<code>onAttachFragment</code>获取，也可以通过自己写回调接口来实现。</li>\n<li>Fragment的状态会丢失，丢失的原因是onCreate重新创建时，会调用Framgment的默认无参构造来创建Fragment对象。所以这也是为什么文档中说Fragment一定要有一个默认的构造函数，而且最好不要有带参数的构造函数，传参数要用setArguments。<br>所以需要在<code>onSaveInstanceState()</code>时，把一些变量保存，然后在onCreate时恢复</li>\n<li>hide、show问题，主要也是Fragment的状态会丢失问题引起的，因为恢复的所有的Fragment的都是以show状态恢复的，需要自己手动恢复其状态。这里是一个示例:<a href=\"http://www.jianshu.com/p/d9143a92ad94\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/d9143a92ad94</a></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String STATE_SAVE_IS_HIDDEN = <span class=\"string\">\"STATE_SAVE_IS_HIDDEN\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (savedInstanceState != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isSupportHidden = savedInstanceState.getBoolean(STATE_SAVE_IS_HIDDEN);</span><br><span class=\"line\"></span><br><span class=\"line\">        FragmentTransaction ft = getFragmentManager().beginTransaction();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSupportHidden) &#123;</span><br><span class=\"line\">            ft.hide(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ft.show(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ft.commit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        outState.putBoolean(STATE_SAVE_IS_HIDDEN, isHidden());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"state-loss异常\"><a href=\"#state-loss异常\" class=\"headerlink\" title=\"state loss异常\"></a>state loss异常</h4><p><code>FragmentTransaction</code>是异步的，commit()仅是相当于把操作加入到<code>FragmentManager</code>的队列，然后<code>FragmentManager</code>会在某一个时刻来执行，并不是立即执行。<br>所以在实际项目中可能会偶尔出现这种报错:<code>Can not perform this action after onSaveInstanceState</code>。从这段报错信息可以猜测出我们<code>commit()</code>是<code>onSaveInstanceState()</code>之后了。<br>出现这种情况有两种解决方案:</p>\n<ol>\n<li>尽量要在<code>onSaveInstanceState</code>之前进行<code>Fragment</code>进行操作, 可以添加标志符解决<br>参考Dialer</li>\n<li>使用<code>commitAllowStateLoss</code>，它可以保证在Activity onStop以后仍然顺利执行commit操作，但是会造成状态丢失。</li>\n</ol>\n<blockquote>\n<p>报错的原因见<code>BackStackRecord.commitInternal -&gt; FragmentManager.enqueueAction</code> ，即在<code>commit</code>的时候，<code>FragmentManager</code>通过<code>checkStateLoss</code>进行了一次状态检测<br>在使用<code>DilaogFragment</code>的<code>show</code>和<code>dissmiss</code>方法时也要注意发生该异常的情况，建议使用<code>dismissAllowingStateLoss</code>方法</p>\n</blockquote>\n<p>commitAllowingStateLoss会造成状态丢失，具体情况如下:</p>\n<ol>\n<li>当前您的 <code>Activity</code> 在显示 <code>FragmentA</code></li>\n<li>您的 Activity 被切换到后台了（(<code>onStop()</code> 和 <code>onSaveInstanceState()</code> 函数被调用了）</li>\n<li>这个时候您的 <code>Activity</code> 的逻辑发生了一些变化，您使用 <code>FragmentB</code> 替换了 <code>FragmentA</code> 并调用了 <code>commitAllowingStateLoss()</code> 函数来提交这个变化。</li>\n</ol>\n<p>这个时候，当用户再次切回您的 Activity 的时候可能出现如下两种状态：</p>\n<ol>\n<li>如果系统内存不足并且杀死了您的应用，当用户重新打开您的 应用的时候，系统将会恢复您的应用到上面第二步的状态，而 <code>FragmentB</code> 是不会显示的。</li>\n<li>如果系统没有杀死您的应用，用户则可以看到 <code>FragmentB</code>。当 Activity 再次回到后台的时候（<code>onStop</code>）， <code>FragmentB</code> 的状态才会被保存起来。</li>\n</ol>\n<h3 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h3><p><a href=\"https://asce1885.gitbooks.io/android-rd-senior-advanced/content/wo_wei_shi_yao_zhu_zhang_fan_dui_shi_yong_android_fragment.html\" target=\"_blank\" rel=\"noopener\">我为什么主张反对使用Android Fragment</a></p>"},{"title":"Stetho使用技巧","date":"2018-03-04T15:12:08.000Z","_content":"\n> Stetho是Facebook开源的一个Android应用的调试工具\n> 使用很简单而且也有很多资源介绍\n\n## 参考资源\n[Android开发调试神器Stetho介绍-只有你想不到没有你看不到](https://www.jianshu.com/p/a7fdcb2641e8)\n\n## 使用步骤\n\n### 1. 项目添加依赖。\n\n```gradle\ncompile  \"com.facebook.stetho:stetho:1.3.1\"\ncompile  \"com.facebook.stetho:stetho-okhttp3:1.3.1\"\n```\n如果使用了okhttp，则需要添加第二个依赖\n<!--more-->\n### 2. 初始化 Stetho\n\n```java\npublic class MyApplication extends Application { \n      public void onCreate() { \n        super.onCreate(); \n        Stetho.initializeWithDefaults(this); \n        }\n}\n```\n\n### 3. 修改网络请求（可选）\n\n```java\nnew OkHttpClient.Builder() .\naddNetworkInterceptor(new StethoInterceptor()) .build()\n```\n\n### 4. 运行你的项目\n  \n```txt\n在chrome中访问 chrome://inspect\n找到你的项目 点击 inspect\n```\n如果发现一直在转圈，需要先翻墙\n\n## 使用技巧\n\n### 1. 动态加载开启Stetho\n在一般开发中我们通常是在debug版本下想入Stetho，而在release版本上去除，网资料大都是使用debugCompile的方式\n\n```gradle\ndebugCompile 'com.facebook.stetho:stetho:1.3.1' \n```\n这样存在一个弊端是需要再在debug目录再添加一个Application\n\n受同事启发，使用`DexClassLoader`动态加载的方式可以再方便的引入Stetho，并且不会影响apk的大小\n\n- 首先新建一个app工程，引入Stetho依赖后，里面只需要添加一个类\n\n```java\npackage com.aleaf.debug;\n\nimport android.content.Context;\nimport android.util.Log;\n\nimport com.facebook.stetho.Stetho;\n\npublic class StethoReflection {\n    private static final String TAG = \"StethoReflection\";\n\n    public void initStetho(Context context){\n        Log.d(TAG,\"initStetho context=\"+context);\n        //chrome://inspect\n        Stetho.initializeWithDefaults(context);\n    }\n\n}\n```\n编译一个debug版的apk出来，并安装到手机上\n\n- 在需要使用Stetho的app的Application里面使用`DexClassLoader`引入\n\n```\npublic class MApplication extends Application {\n    public void onCreate() {\n        //chrome://inspect\n        if(BuildConfig.DEBUG){//debug版才开启\n            ReflectDebugUtil.reflectInitStetho(this);\n        }\n    }\n}\n```\nReflectDebugUtil.java\n```\npublic class ReflectDebugUtil {\n    public static final String DEBUG_PACKGE = \"com.aleaf.debug\";\n    public static final String DEBUG_STETHO_CLASS_NAME = \"com.aleaf.debug.StethoReflection\";\n\n    private void reflectInitStetho(Context context){\n        try {\n            Context stethoContext = context.createPackageContext(\n                    DEBUG_PACKGE, Context.CONTEXT_INCLUDE_CODE\n                            | Context.CONTEXT_IGNORE_SECURITY);\n\n            String outDir = context.getFilesDir() + File.separator + \"debug\";\n            if(!new File(outDir).exists()){\n                new File(outDir).mkdirs();\n            }\n            DexClassLoader dexLoader = new DexClassLoader(\n                    stethoContext.getApplicationInfo().sourceDir,//dst apk surce path\n                    outDir,//\n                    context.getApplicationInfo().nativeLibraryDir,//.so\n                    context.getClassLoader());\n            Class<?> clazz = dexLoader.loadClass(DEBUG_STETHO_CLASS_NAME);\n            Object  ste = clazz.newInstance();\n            Method m = clazz.getMethod(\"initStetho\",Context.class);\n            m.invoke(ste,context);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n这样做的好处时应用apk完全不需要引入Stetho的sdk，打开关闭调试也很方便，只需要安装卸载debug的apk即可","source":"_posts/Stetho使用技巧.md","raw":"---\ntitle: Stetho使用技巧\ndate: 2018-03-04 23:12:08\ntags: Android\n---\n\n> Stetho是Facebook开源的一个Android应用的调试工具\n> 使用很简单而且也有很多资源介绍\n\n## 参考资源\n[Android开发调试神器Stetho介绍-只有你想不到没有你看不到](https://www.jianshu.com/p/a7fdcb2641e8)\n\n## 使用步骤\n\n### 1. 项目添加依赖。\n\n```gradle\ncompile  \"com.facebook.stetho:stetho:1.3.1\"\ncompile  \"com.facebook.stetho:stetho-okhttp3:1.3.1\"\n```\n如果使用了okhttp，则需要添加第二个依赖\n<!--more-->\n### 2. 初始化 Stetho\n\n```java\npublic class MyApplication extends Application { \n      public void onCreate() { \n        super.onCreate(); \n        Stetho.initializeWithDefaults(this); \n        }\n}\n```\n\n### 3. 修改网络请求（可选）\n\n```java\nnew OkHttpClient.Builder() .\naddNetworkInterceptor(new StethoInterceptor()) .build()\n```\n\n### 4. 运行你的项目\n  \n```txt\n在chrome中访问 chrome://inspect\n找到你的项目 点击 inspect\n```\n如果发现一直在转圈，需要先翻墙\n\n## 使用技巧\n\n### 1. 动态加载开启Stetho\n在一般开发中我们通常是在debug版本下想入Stetho，而在release版本上去除，网资料大都是使用debugCompile的方式\n\n```gradle\ndebugCompile 'com.facebook.stetho:stetho:1.3.1' \n```\n这样存在一个弊端是需要再在debug目录再添加一个Application\n\n受同事启发，使用`DexClassLoader`动态加载的方式可以再方便的引入Stetho，并且不会影响apk的大小\n\n- 首先新建一个app工程，引入Stetho依赖后，里面只需要添加一个类\n\n```java\npackage com.aleaf.debug;\n\nimport android.content.Context;\nimport android.util.Log;\n\nimport com.facebook.stetho.Stetho;\n\npublic class StethoReflection {\n    private static final String TAG = \"StethoReflection\";\n\n    public void initStetho(Context context){\n        Log.d(TAG,\"initStetho context=\"+context);\n        //chrome://inspect\n        Stetho.initializeWithDefaults(context);\n    }\n\n}\n```\n编译一个debug版的apk出来，并安装到手机上\n\n- 在需要使用Stetho的app的Application里面使用`DexClassLoader`引入\n\n```\npublic class MApplication extends Application {\n    public void onCreate() {\n        //chrome://inspect\n        if(BuildConfig.DEBUG){//debug版才开启\n            ReflectDebugUtil.reflectInitStetho(this);\n        }\n    }\n}\n```\nReflectDebugUtil.java\n```\npublic class ReflectDebugUtil {\n    public static final String DEBUG_PACKGE = \"com.aleaf.debug\";\n    public static final String DEBUG_STETHO_CLASS_NAME = \"com.aleaf.debug.StethoReflection\";\n\n    private void reflectInitStetho(Context context){\n        try {\n            Context stethoContext = context.createPackageContext(\n                    DEBUG_PACKGE, Context.CONTEXT_INCLUDE_CODE\n                            | Context.CONTEXT_IGNORE_SECURITY);\n\n            String outDir = context.getFilesDir() + File.separator + \"debug\";\n            if(!new File(outDir).exists()){\n                new File(outDir).mkdirs();\n            }\n            DexClassLoader dexLoader = new DexClassLoader(\n                    stethoContext.getApplicationInfo().sourceDir,//dst apk surce path\n                    outDir,//\n                    context.getApplicationInfo().nativeLibraryDir,//.so\n                    context.getClassLoader());\n            Class<?> clazz = dexLoader.loadClass(DEBUG_STETHO_CLASS_NAME);\n            Object  ste = clazz.newInstance();\n            Method m = clazz.getMethod(\"initStetho\",Context.class);\n            m.invoke(ste,context);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n这样做的好处时应用apk完全不需要引入Stetho的sdk，打开关闭调试也很方便，只需要安装卸载debug的apk即可","slug":"Stetho使用技巧","published":1,"updated":"2018-03-27T14:06:24.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyq0ff02000czwv7feogrsrw","content":"<blockquote>\n<p>Stetho是Facebook开源的一个Android应用的调试工具<br>使用很简单而且也有很多资源介绍</p>\n</blockquote>\n<h2 id=\"参考资源\"><a href=\"#参考资源\" class=\"headerlink\" title=\"参考资源\"></a>参考资源</h2><p><a href=\"https://www.jianshu.com/p/a7fdcb2641e8\" target=\"_blank\" rel=\"noopener\">Android开发调试神器Stetho介绍-只有你想不到没有你看不到</a></p>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><h3 id=\"1-项目添加依赖。\"><a href=\"#1-项目添加依赖。\" class=\"headerlink\" title=\"1. 项目添加依赖。\"></a>1. 项目添加依赖。</h3><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">compile</span>  <span class=\"string\">\"com.facebook.stetho:stetho:1.3.1\"</span></span><br><span class=\"line\"><span class=\"keyword\">compile</span>  <span class=\"string\">\"com.facebook.stetho:stetho-okhttp3:1.3.1\"</span></span><br></pre></td></tr></table></figure>\n<p>如果使用了okhttp，则需要添加第二个依赖<br><a id=\"more\"></a></p>\n<h3 id=\"2-初始化-Stetho\"><a href=\"#2-初始化-Stetho\" class=\"headerlink\" title=\"2. 初始化 Stetho\"></a>2. 初始化 Stetho</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123; </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(); </span><br><span class=\"line\">        Stetho.initializeWithDefaults(<span class=\"keyword\">this</span>); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-修改网络请求（可选）\"><a href=\"#3-修改网络请求（可选）\" class=\"headerlink\" title=\"3. 修改网络请求（可选）\"></a>3. 修改网络请求（可选）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> OkHttpClient.Builder() .</span><br><span class=\"line\">addNetworkInterceptor(<span class=\"keyword\">new</span> StethoInterceptor()) .build()</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-运行你的项目\"><a href=\"#4-运行你的项目\" class=\"headerlink\" title=\"4. 运行你的项目\"></a>4. 运行你的项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在chrome中访问 chrome://inspect</span><br><span class=\"line\">找到你的项目 点击 inspect</span><br></pre></td></tr></table></figure>\n<p>如果发现一直在转圈，需要先翻墙</p>\n<h2 id=\"使用技巧\"><a href=\"#使用技巧\" class=\"headerlink\" title=\"使用技巧\"></a>使用技巧</h2><h3 id=\"1-动态加载开启Stetho\"><a href=\"#1-动态加载开启Stetho\" class=\"headerlink\" title=\"1. 动态加载开启Stetho\"></a>1. 动态加载开启Stetho</h3><p>在一般开发中我们通常是在debug版本下想入Stetho，而在release版本上去除，网资料大都是使用debugCompile的方式</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debugCompile <span class=\"string\">'com.facebook.stetho:stetho:1.3.1'</span></span><br></pre></td></tr></table></figure>\n<p>这样存在一个弊端是需要再在debug目录再添加一个Application</p>\n<p>受同事启发，使用<code>DexClassLoader</code>动态加载的方式可以再方便的引入Stetho，并且不会影响apk的大小</p>\n<ul>\n<li>首先新建一个app工程，引入Stetho依赖后，里面只需要添加一个类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.aleaf.debug;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.facebook.stetho.Stetho;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StethoReflection</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"StethoReflection\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initStetho</span><span class=\"params\">(Context context)</span></span>&#123;</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"initStetho context=\"</span>+context);</span><br><span class=\"line\">        <span class=\"comment\">//chrome://inspect</span></span><br><span class=\"line\">        Stetho.initializeWithDefaults(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译一个debug版的apk出来，并安装到手机上</p>\n<ul>\n<li>在需要使用Stetho的app的Application里面使用<code>DexClassLoader</code>引入</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MApplication extends Application &#123;</span><br><span class=\"line\">    public void onCreate() &#123;</span><br><span class=\"line\">        //chrome://inspect</span><br><span class=\"line\">        if(BuildConfig.DEBUG)&#123;//debug版才开启</span><br><span class=\"line\">            ReflectDebugUtil.reflectInitStetho(this);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ReflectDebugUtil.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ReflectDebugUtil &#123;</span><br><span class=\"line\">    public static final String DEBUG_PACKGE = &quot;com.aleaf.debug&quot;;</span><br><span class=\"line\">    public static final String DEBUG_STETHO_CLASS_NAME = &quot;com.aleaf.debug.StethoReflection&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void reflectInitStetho(Context context)&#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Context stethoContext = context.createPackageContext(</span><br><span class=\"line\">                    DEBUG_PACKGE, Context.CONTEXT_INCLUDE_CODE</span><br><span class=\"line\">                            | Context.CONTEXT_IGNORE_SECURITY);</span><br><span class=\"line\"></span><br><span class=\"line\">            String outDir = context.getFilesDir() + File.separator + &quot;debug&quot;;</span><br><span class=\"line\">            if(!new File(outDir).exists())&#123;</span><br><span class=\"line\">                new File(outDir).mkdirs();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            DexClassLoader dexLoader = new DexClassLoader(</span><br><span class=\"line\">                    stethoContext.getApplicationInfo().sourceDir,//dst apk surce path</span><br><span class=\"line\">                    outDir,//</span><br><span class=\"line\">                    context.getApplicationInfo().nativeLibraryDir,//.so</span><br><span class=\"line\">                    context.getClassLoader());</span><br><span class=\"line\">            Class&lt;?&gt; clazz = dexLoader.loadClass(DEBUG_STETHO_CLASS_NAME);</span><br><span class=\"line\">            Object  ste = clazz.newInstance();</span><br><span class=\"line\">            Method m = clazz.getMethod(&quot;initStetho&quot;,Context.class);</span><br><span class=\"line\">            m.invoke(ste,context);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样做的好处时应用apk完全不需要引入Stetho的sdk，打开关闭调试也很方便，只需要安装卸载debug的apk即可</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Stetho是Facebook开源的一个Android应用的调试工具<br>使用很简单而且也有很多资源介绍</p>\n</blockquote>\n<h2 id=\"参考资源\"><a href=\"#参考资源\" class=\"headerlink\" title=\"参考资源\"></a>参考资源</h2><p><a href=\"https://www.jianshu.com/p/a7fdcb2641e8\" target=\"_blank\" rel=\"noopener\">Android开发调试神器Stetho介绍-只有你想不到没有你看不到</a></p>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><h3 id=\"1-项目添加依赖。\"><a href=\"#1-项目添加依赖。\" class=\"headerlink\" title=\"1. 项目添加依赖。\"></a>1. 项目添加依赖。</h3><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">compile</span>  <span class=\"string\">\"com.facebook.stetho:stetho:1.3.1\"</span></span><br><span class=\"line\"><span class=\"keyword\">compile</span>  <span class=\"string\">\"com.facebook.stetho:stetho-okhttp3:1.3.1\"</span></span><br></pre></td></tr></table></figure>\n<p>如果使用了okhttp，则需要添加第二个依赖<br>","more":"</p>\n<h3 id=\"2-初始化-Stetho\"><a href=\"#2-初始化-Stetho\" class=\"headerlink\" title=\"2. 初始化 Stetho\"></a>2. 初始化 Stetho</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123; </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(); </span><br><span class=\"line\">        Stetho.initializeWithDefaults(<span class=\"keyword\">this</span>); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-修改网络请求（可选）\"><a href=\"#3-修改网络请求（可选）\" class=\"headerlink\" title=\"3. 修改网络请求（可选）\"></a>3. 修改网络请求（可选）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> OkHttpClient.Builder() .</span><br><span class=\"line\">addNetworkInterceptor(<span class=\"keyword\">new</span> StethoInterceptor()) .build()</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-运行你的项目\"><a href=\"#4-运行你的项目\" class=\"headerlink\" title=\"4. 运行你的项目\"></a>4. 运行你的项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在chrome中访问 chrome://inspect</span><br><span class=\"line\">找到你的项目 点击 inspect</span><br></pre></td></tr></table></figure>\n<p>如果发现一直在转圈，需要先翻墙</p>\n<h2 id=\"使用技巧\"><a href=\"#使用技巧\" class=\"headerlink\" title=\"使用技巧\"></a>使用技巧</h2><h3 id=\"1-动态加载开启Stetho\"><a href=\"#1-动态加载开启Stetho\" class=\"headerlink\" title=\"1. 动态加载开启Stetho\"></a>1. 动态加载开启Stetho</h3><p>在一般开发中我们通常是在debug版本下想入Stetho，而在release版本上去除，网资料大都是使用debugCompile的方式</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debugCompile <span class=\"string\">'com.facebook.stetho:stetho:1.3.1'</span></span><br></pre></td></tr></table></figure>\n<p>这样存在一个弊端是需要再在debug目录再添加一个Application</p>\n<p>受同事启发，使用<code>DexClassLoader</code>动态加载的方式可以再方便的引入Stetho，并且不会影响apk的大小</p>\n<ul>\n<li>首先新建一个app工程，引入Stetho依赖后，里面只需要添加一个类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.aleaf.debug;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.facebook.stetho.Stetho;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StethoReflection</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"StethoReflection\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initStetho</span><span class=\"params\">(Context context)</span></span>&#123;</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"initStetho context=\"</span>+context);</span><br><span class=\"line\">        <span class=\"comment\">//chrome://inspect</span></span><br><span class=\"line\">        Stetho.initializeWithDefaults(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译一个debug版的apk出来，并安装到手机上</p>\n<ul>\n<li>在需要使用Stetho的app的Application里面使用<code>DexClassLoader</code>引入</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MApplication extends Application &#123;</span><br><span class=\"line\">    public void onCreate() &#123;</span><br><span class=\"line\">        //chrome://inspect</span><br><span class=\"line\">        if(BuildConfig.DEBUG)&#123;//debug版才开启</span><br><span class=\"line\">            ReflectDebugUtil.reflectInitStetho(this);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ReflectDebugUtil.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ReflectDebugUtil &#123;</span><br><span class=\"line\">    public static final String DEBUG_PACKGE = &quot;com.aleaf.debug&quot;;</span><br><span class=\"line\">    public static final String DEBUG_STETHO_CLASS_NAME = &quot;com.aleaf.debug.StethoReflection&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void reflectInitStetho(Context context)&#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Context stethoContext = context.createPackageContext(</span><br><span class=\"line\">                    DEBUG_PACKGE, Context.CONTEXT_INCLUDE_CODE</span><br><span class=\"line\">                            | Context.CONTEXT_IGNORE_SECURITY);</span><br><span class=\"line\"></span><br><span class=\"line\">            String outDir = context.getFilesDir() + File.separator + &quot;debug&quot;;</span><br><span class=\"line\">            if(!new File(outDir).exists())&#123;</span><br><span class=\"line\">                new File(outDir).mkdirs();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            DexClassLoader dexLoader = new DexClassLoader(</span><br><span class=\"line\">                    stethoContext.getApplicationInfo().sourceDir,//dst apk surce path</span><br><span class=\"line\">                    outDir,//</span><br><span class=\"line\">                    context.getApplicationInfo().nativeLibraryDir,//.so</span><br><span class=\"line\">                    context.getClassLoader());</span><br><span class=\"line\">            Class&lt;?&gt; clazz = dexLoader.loadClass(DEBUG_STETHO_CLASS_NAME);</span><br><span class=\"line\">            Object  ste = clazz.newInstance();</span><br><span class=\"line\">            Method m = clazz.getMethod(&quot;initStetho&quot;,Context.class);</span><br><span class=\"line\">            m.invoke(ste,context);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样做的好处时应用apk完全不需要引入Stetho的sdk，打开关闭调试也很方便，只需要安装卸载debug的apk即可</p>"},{"title":"Gradle/Groovy一览","date":"2018-03-10T08:20:03.000Z","_content":"\n## 参考资料\n\n- [Gradle Plugin 用户使用指南](https://juejin.im/entry/592f93ada0bb9f0058a22641)\n- [Android Studio 自定义Gradle Plugin][https://www.jianshu.com/p/af2b0a43133f]\n- [Gradle 入门--只此一篇](https://www.jianshu.com/p/001abe1d8e95)\n- [给 ANDROID 初学者的 GRADLE 知识普及](http://stormzhang.com/android/2016/07/02/gradle-for-android-beginners/)\n- [深入理解Android之Gradle](http://blog.csdn.net/innost/article/details/48228651)\n- [重新认识AndroidStudio&Gradle](http://blog.csdn.net/JF_1994/article/details/52781751)\n- [Gradle入门系列](http://blog.jobbole.com/71999/)\n- 官方文档 https://docs.gradle.org/current/dsl/\n- api文档： http://www.groovy-lang.org/api.html\n<!--more-->\n## 简介\n`Groovy`是一种动态语言。它和`Java`一样，也运行于Java虚拟机中。几乎完全兼容Java\n`Gradle`提供了构建项目的一个框架，可以单独安装使用，安装地址https://gradle.org/install/\n\n`gradle-wrapper`顾名思义，这表示是包装过的`Gradle`，`Android`工程中一般就的就是它，所以命令行执行的时候就会变成`gradlew [task名称]`，这里的gradlew，其实提指的就是工程根目录下的`gradlew.bat`和`gradlew`文件\n> 如果工程里面没有`gradle-wrapper`，可以通过`gradle wrapper`生成\n\n以下几个常用命令（注意Win系统下`gradlew`而linux系统下需要用`./gradlew`）\n* `./gradlew -v` 版本号\n* `./gradlew clean` 清除9GAG/app目录下的build文件夹\n* `./gradlew build` 检查依赖并编译打包\n这里注意的是 `./gradlew build` 命令把 `debug`、`release` 环境的包都打出来，如果正式发布只需要打 Release 的包，该怎么办呢，下面介绍一个很有用的命令 assemble , 如\n\n* `./gradlew assembleDebug` 编译并打Debug包\n* `./gradlew assembleRelease` 编译并打Release的包\n* `./gradlew :app:dependencies --configuration compile` 查看依赖关系\n\n完成工程构建示例\n```cmake\n├── app #Android App目录，可改名，但需要在settings.gradle里面配置\n│   ├── app.iml\n│   ├── build #构建输出目录\n│   ├── build.gradle #构建脚本\n│   ├── libs #so相关库\n│   ├── proguard-rules.pro #proguard混淆配置\n│   └── src #源代码，资源等\n├── build\n│   └── intermediates\n├── build.gradle #工程构建文件\n├── gradle\n│   └── wrapper\n|         ├── gradle-wrapper.jar\n|         └── gradle-wrapper.properties #gradle的版本配置\n├── gradle.properties #gradle的配置\n├── gradlew #gradle wrapper linux shell脚本\n├── gradlew.bat #gradle wrapper window下的shell脚本\n├── local.properties #配置Androod SDK位置文件\n└── settings.gradle #工程配置\n```\n\n## Gradle脚本写法\n> 都以`gradlew`的写法为例\n\n### 几个重要对象Project，Task ，Action\n\n**Project:**是Gradle最重要的一个领域对象，我们写的build.gradle脚本的全部作用，其实就是配置一个Project实例。它里面有几个重要的成员变量和方法，例如: \n\n```gradle\nrootProject  //整个工程实例\nproject      //模块工程实例\n//两个用法一致，下面以project为例\nproject.name   //工程名称\nproject.afterEvaluate{ } //整个工程构建完成后执行，注意是构建，不是执行完成\nproject.file(\"\") //工程路径，里面接相对路程以获得文件对象\n```\n**Task:**被组织成了一个有向无环图（DAG）。Gradle中的Task要么是由不同的Plugin引入的，要么是我们自己在build.gradle文件中直接创建的\n可以通过`gradlew tasks`来查看有哪些任务task\n\n\n### 定义`task`\n\n```gradle\ntask myTask {\n    doFirst {\n        println 'hello'\n    }\n    doLast {\n        println 'world'\n    }\n}\n```\n用以下命令执行\n\n```\ngradlew myTask\n```\n\n> 这段代码的含义：给Project添加一个名为“myTask”的任务\n> 用一个闭包来配置这个任务,Task提供了doFirst和doLast方法来给自己添加Action。\n> `注意:` 要执行的代码一定要放到doLast或者doFirst中，不会它会在任务构建完成前执行\n\n```gradle\n//Test文件夹下建一个src目录，建一个dst目录，src目录下建立一个文件，命名为test.txt\ntask copyFile(type: Copy){\n    from \"src\"\n    into \"dst\"\n}\n```\n这是一个“显式地声明Task的类型“的方式\n\n### task的依赖关系\n\n```gradle\ntask taskA {\n    doLast {\n        println 'this is taskA from project 1'\n    }\n}\n\ntask taskB {\n    doLast{\n        println 'this is taskB from project 1'\n    }\n}\n\ntaskB.dependsOn taskA\n```\n\n然后我们在命令行运行：\n\n```\ngradle taskA\n```\n\n运行结果会先执行taskB的打印，然后执行taskA的打印\n\n> 通过`dependsOn` 的依赖方式，可让我们已有的task后面添加任务，例如Maven的打包上传`gradlew upload`(不太确定是不是这个命令)和`AndResGuard`资源压缩就是通过依赖实现的\n\n### 通过project.afterEvaluate{ }添加任务\n\n例如我们编译完成apk后，需要把apk，mapping等文件拷出来并重命名，但是又不想改变原有的命令\n例如新建文件`copyApk.gradle`\n\n```gradle\ndef outputPath = \"./outApk/\"\ndef outApkDir = file(outputPath)\nif(!outApkDir.exists()) outApkDir.mkdir()\n\nimport java.text.SimpleDateFormat\n/**\n * 获取Git 分支名\n */\ndef getGitBranch() {\n    try {\n        return 'git symbolic-ref --short -q HEAD'.execute().text.trim()\n    } catch (Exception e) {\n        return ''\n    }\n}\n\n/**\n *组合最终需要的apk名称\n *若要定制最终输出的文件名，请修改该方法\n */\ndef getTargetApkName(){\n    SimpleDateFormat format = new SimpleDateFormat(\"yyyyMMddHHmmss\")\n    def prefx = rootProject.name\n    def today = format.format(new Date())\n    def versionName = android.defaultConfig.versionName\n    return \"${prefx}_${getGitBranch()}_v${versionName}_${today}\"\n}\nproject.afterEvaluate {\n    def relaseTask = \"assembleRelease\"\n    //assembleReleass任务后添加拷贝命令\n    if(tasks.findByName(relaseTask) != null){\n        tasks.getByName(relaseTask) {\n            it.doLast {\n                println \"$project.name: After assembleRelease, copy \"\n                def apkName = getTargetApkName()\n                println \"${apkName}\"\n                copy{\n                    from \"/build/outputs/apk/release\"\n                    into outputPath\n                    include \"app-release-unsigned.apk\"\n                    rename(\"app-release-unsigned.apk\", \"${apkName}.apk\")\n                }\n                copy{\n                    from \"/build/outputs/mapping/release\"\n                    into outputPath\n                    include \"mapping.txt\"\n                    rename(\"mapping.txt\", \"${apkName}_mapping.txt\")\n                }\n            }\n        }\n    }\n}\n```\n\n在app模块的`build.gradle`的最下面引用该文件\n\n```\napply from: \"copyApk.gradle\"\n```\n\n### 一些方法的使用\n\n#### 拷贝文件\n用copy方法\n\n```gradle\ncopy{//拷贝maping文件\n\t  from \"/build/outputs/mapping/release\"   //从哪个目录\n\t  into outputPath    //拷贝到哪个目录\n\t  include \"mapping.txt\"  //拷贝哪个文件，可以用通配符\n\t  rename(\"mapping.txt\", \"${apkName}_mapping.txt\")  //重命名，不能用通配符\n}\n```\n#### 引入layoutlib.jar包\n该包下面有一些系统使用的类，但不建议引入（可以用反射）\n\n```gradle\ndependencies {\n    provided files(getLayoutLibPath())\n}\n\ndef getLayoutLibPath() {\n    def rootDir = project.rootDir\n    def localProperties = new File(rootDir, \"local.properties\")\n    def sdkDir = null\n    if(localProperties.exists()){\n        Properties properties = new Properties()\n        localProperties.withInputStream {\n            instr -> properties.load(instr)\n        }\n        sdkDir = properties.getProperty('sdk.dir')\n    }\n    if(!sdkDir){//linux环境下的获取sdk的路径\n        sdkDir = System.getenv(\"ANDROID_HOME\")\n    }\n    if(sdkDir){\n        def compileSdkVersion = android.compileSdkVersion\n        Console.println(\"app compileSdkVersion : \" + compileSdkVersion)\n        def androidJarPath = sdkDir + \"/platforms/\" + compileSdkVersion + \"/data/layoutlib.jar\"\n        return androidJarPath\n    }\n    return rootDir\n}\n```\n\n#### 从AndroidManifest下面获取VersionName\n\n```gradle\n//获取apk版本号\ndef getVersionNameAdvanced(flavor){\n    flavor = flavor ? flavor : \"main\"\n    def xmlFile = project.file(\"./src/$flavor/AndroidManifest.xml\")\n    def rootManifest = new XmlSlurper().parse(xmlFile)\n    return rootManifest['@android:versionName']\n}\n```\n\n#### 获取当前git的分支名\n\n```gradle\n/**\n * 获取Git 分支名\n */\ndef getGitBranch() {\n    try {\n        return 'git symbolic-ref --short -q HEAD'.execute().text.trim()\n    } catch (Exception e) {\n        return ''\n    }\n}\n```\n\n\n\n## `Groovy`基础\n","source":"_posts/Gradle-Groovy一览.md","raw":"---\ntitle: Gradle/Groovy一览\ndate: 2018-03-10 16:20:03\ntags: Gradle\n---\n\n## 参考资料\n\n- [Gradle Plugin 用户使用指南](https://juejin.im/entry/592f93ada0bb9f0058a22641)\n- [Android Studio 自定义Gradle Plugin][https://www.jianshu.com/p/af2b0a43133f]\n- [Gradle 入门--只此一篇](https://www.jianshu.com/p/001abe1d8e95)\n- [给 ANDROID 初学者的 GRADLE 知识普及](http://stormzhang.com/android/2016/07/02/gradle-for-android-beginners/)\n- [深入理解Android之Gradle](http://blog.csdn.net/innost/article/details/48228651)\n- [重新认识AndroidStudio&Gradle](http://blog.csdn.net/JF_1994/article/details/52781751)\n- [Gradle入门系列](http://blog.jobbole.com/71999/)\n- 官方文档 https://docs.gradle.org/current/dsl/\n- api文档： http://www.groovy-lang.org/api.html\n<!--more-->\n## 简介\n`Groovy`是一种动态语言。它和`Java`一样，也运行于Java虚拟机中。几乎完全兼容Java\n`Gradle`提供了构建项目的一个框架，可以单独安装使用，安装地址https://gradle.org/install/\n\n`gradle-wrapper`顾名思义，这表示是包装过的`Gradle`，`Android`工程中一般就的就是它，所以命令行执行的时候就会变成`gradlew [task名称]`，这里的gradlew，其实提指的就是工程根目录下的`gradlew.bat`和`gradlew`文件\n> 如果工程里面没有`gradle-wrapper`，可以通过`gradle wrapper`生成\n\n以下几个常用命令（注意Win系统下`gradlew`而linux系统下需要用`./gradlew`）\n* `./gradlew -v` 版本号\n* `./gradlew clean` 清除9GAG/app目录下的build文件夹\n* `./gradlew build` 检查依赖并编译打包\n这里注意的是 `./gradlew build` 命令把 `debug`、`release` 环境的包都打出来，如果正式发布只需要打 Release 的包，该怎么办呢，下面介绍一个很有用的命令 assemble , 如\n\n* `./gradlew assembleDebug` 编译并打Debug包\n* `./gradlew assembleRelease` 编译并打Release的包\n* `./gradlew :app:dependencies --configuration compile` 查看依赖关系\n\n完成工程构建示例\n```cmake\n├── app #Android App目录，可改名，但需要在settings.gradle里面配置\n│   ├── app.iml\n│   ├── build #构建输出目录\n│   ├── build.gradle #构建脚本\n│   ├── libs #so相关库\n│   ├── proguard-rules.pro #proguard混淆配置\n│   └── src #源代码，资源等\n├── build\n│   └── intermediates\n├── build.gradle #工程构建文件\n├── gradle\n│   └── wrapper\n|         ├── gradle-wrapper.jar\n|         └── gradle-wrapper.properties #gradle的版本配置\n├── gradle.properties #gradle的配置\n├── gradlew #gradle wrapper linux shell脚本\n├── gradlew.bat #gradle wrapper window下的shell脚本\n├── local.properties #配置Androod SDK位置文件\n└── settings.gradle #工程配置\n```\n\n## Gradle脚本写法\n> 都以`gradlew`的写法为例\n\n### 几个重要对象Project，Task ，Action\n\n**Project:**是Gradle最重要的一个领域对象，我们写的build.gradle脚本的全部作用，其实就是配置一个Project实例。它里面有几个重要的成员变量和方法，例如: \n\n```gradle\nrootProject  //整个工程实例\nproject      //模块工程实例\n//两个用法一致，下面以project为例\nproject.name   //工程名称\nproject.afterEvaluate{ } //整个工程构建完成后执行，注意是构建，不是执行完成\nproject.file(\"\") //工程路径，里面接相对路程以获得文件对象\n```\n**Task:**被组织成了一个有向无环图（DAG）。Gradle中的Task要么是由不同的Plugin引入的，要么是我们自己在build.gradle文件中直接创建的\n可以通过`gradlew tasks`来查看有哪些任务task\n\n\n### 定义`task`\n\n```gradle\ntask myTask {\n    doFirst {\n        println 'hello'\n    }\n    doLast {\n        println 'world'\n    }\n}\n```\n用以下命令执行\n\n```\ngradlew myTask\n```\n\n> 这段代码的含义：给Project添加一个名为“myTask”的任务\n> 用一个闭包来配置这个任务,Task提供了doFirst和doLast方法来给自己添加Action。\n> `注意:` 要执行的代码一定要放到doLast或者doFirst中，不会它会在任务构建完成前执行\n\n```gradle\n//Test文件夹下建一个src目录，建一个dst目录，src目录下建立一个文件，命名为test.txt\ntask copyFile(type: Copy){\n    from \"src\"\n    into \"dst\"\n}\n```\n这是一个“显式地声明Task的类型“的方式\n\n### task的依赖关系\n\n```gradle\ntask taskA {\n    doLast {\n        println 'this is taskA from project 1'\n    }\n}\n\ntask taskB {\n    doLast{\n        println 'this is taskB from project 1'\n    }\n}\n\ntaskB.dependsOn taskA\n```\n\n然后我们在命令行运行：\n\n```\ngradle taskA\n```\n\n运行结果会先执行taskB的打印，然后执行taskA的打印\n\n> 通过`dependsOn` 的依赖方式，可让我们已有的task后面添加任务，例如Maven的打包上传`gradlew upload`(不太确定是不是这个命令)和`AndResGuard`资源压缩就是通过依赖实现的\n\n### 通过project.afterEvaluate{ }添加任务\n\n例如我们编译完成apk后，需要把apk，mapping等文件拷出来并重命名，但是又不想改变原有的命令\n例如新建文件`copyApk.gradle`\n\n```gradle\ndef outputPath = \"./outApk/\"\ndef outApkDir = file(outputPath)\nif(!outApkDir.exists()) outApkDir.mkdir()\n\nimport java.text.SimpleDateFormat\n/**\n * 获取Git 分支名\n */\ndef getGitBranch() {\n    try {\n        return 'git symbolic-ref --short -q HEAD'.execute().text.trim()\n    } catch (Exception e) {\n        return ''\n    }\n}\n\n/**\n *组合最终需要的apk名称\n *若要定制最终输出的文件名，请修改该方法\n */\ndef getTargetApkName(){\n    SimpleDateFormat format = new SimpleDateFormat(\"yyyyMMddHHmmss\")\n    def prefx = rootProject.name\n    def today = format.format(new Date())\n    def versionName = android.defaultConfig.versionName\n    return \"${prefx}_${getGitBranch()}_v${versionName}_${today}\"\n}\nproject.afterEvaluate {\n    def relaseTask = \"assembleRelease\"\n    //assembleReleass任务后添加拷贝命令\n    if(tasks.findByName(relaseTask) != null){\n        tasks.getByName(relaseTask) {\n            it.doLast {\n                println \"$project.name: After assembleRelease, copy \"\n                def apkName = getTargetApkName()\n                println \"${apkName}\"\n                copy{\n                    from \"/build/outputs/apk/release\"\n                    into outputPath\n                    include \"app-release-unsigned.apk\"\n                    rename(\"app-release-unsigned.apk\", \"${apkName}.apk\")\n                }\n                copy{\n                    from \"/build/outputs/mapping/release\"\n                    into outputPath\n                    include \"mapping.txt\"\n                    rename(\"mapping.txt\", \"${apkName}_mapping.txt\")\n                }\n            }\n        }\n    }\n}\n```\n\n在app模块的`build.gradle`的最下面引用该文件\n\n```\napply from: \"copyApk.gradle\"\n```\n\n### 一些方法的使用\n\n#### 拷贝文件\n用copy方法\n\n```gradle\ncopy{//拷贝maping文件\n\t  from \"/build/outputs/mapping/release\"   //从哪个目录\n\t  into outputPath    //拷贝到哪个目录\n\t  include \"mapping.txt\"  //拷贝哪个文件，可以用通配符\n\t  rename(\"mapping.txt\", \"${apkName}_mapping.txt\")  //重命名，不能用通配符\n}\n```\n#### 引入layoutlib.jar包\n该包下面有一些系统使用的类，但不建议引入（可以用反射）\n\n```gradle\ndependencies {\n    provided files(getLayoutLibPath())\n}\n\ndef getLayoutLibPath() {\n    def rootDir = project.rootDir\n    def localProperties = new File(rootDir, \"local.properties\")\n    def sdkDir = null\n    if(localProperties.exists()){\n        Properties properties = new Properties()\n        localProperties.withInputStream {\n            instr -> properties.load(instr)\n        }\n        sdkDir = properties.getProperty('sdk.dir')\n    }\n    if(!sdkDir){//linux环境下的获取sdk的路径\n        sdkDir = System.getenv(\"ANDROID_HOME\")\n    }\n    if(sdkDir){\n        def compileSdkVersion = android.compileSdkVersion\n        Console.println(\"app compileSdkVersion : \" + compileSdkVersion)\n        def androidJarPath = sdkDir + \"/platforms/\" + compileSdkVersion + \"/data/layoutlib.jar\"\n        return androidJarPath\n    }\n    return rootDir\n}\n```\n\n#### 从AndroidManifest下面获取VersionName\n\n```gradle\n//获取apk版本号\ndef getVersionNameAdvanced(flavor){\n    flavor = flavor ? flavor : \"main\"\n    def xmlFile = project.file(\"./src/$flavor/AndroidManifest.xml\")\n    def rootManifest = new XmlSlurper().parse(xmlFile)\n    return rootManifest['@android:versionName']\n}\n```\n\n#### 获取当前git的分支名\n\n```gradle\n/**\n * 获取Git 分支名\n */\ndef getGitBranch() {\n    try {\n        return 'git symbolic-ref --short -q HEAD'.execute().text.trim()\n    } catch (Exception e) {\n        return ''\n    }\n}\n```\n\n\n\n## `Groovy`基础\n","slug":"Gradle-Groovy一览","published":1,"updated":"2018-03-27T14:06:24.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyq0ff05000ezwv747du4vok","content":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://juejin.im/entry/592f93ada0bb9f0058a22641\" target=\"_blank\" rel=\"noopener\">Gradle Plugin 用户使用指南</a></li>\n<li>[Android Studio 自定义Gradle Plugin][<a href=\"https://www.jianshu.com/p/af2b0a43133f]\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/af2b0a43133f]</a></li>\n<li><a href=\"https://www.jianshu.com/p/001abe1d8e95\" target=\"_blank\" rel=\"noopener\">Gradle 入门–只此一篇</a></li>\n<li><a href=\"http://stormzhang.com/android/2016/07/02/gradle-for-android-beginners/\" target=\"_blank\" rel=\"noopener\">给 ANDROID 初学者的 GRADLE 知识普及</a></li>\n<li><a href=\"http://blog.csdn.net/innost/article/details/48228651\" target=\"_blank\" rel=\"noopener\">深入理解Android之Gradle</a></li>\n<li><a href=\"http://blog.csdn.net/JF_1994/article/details/52781751\" target=\"_blank\" rel=\"noopener\">重新认识AndroidStudio&amp;Gradle</a></li>\n<li><a href=\"http://blog.jobbole.com/71999/\" target=\"_blank\" rel=\"noopener\">Gradle入门系列</a></li>\n<li>官方文档 <a href=\"https://docs.gradle.org/current/dsl/\" target=\"_blank\" rel=\"noopener\">https://docs.gradle.org/current/dsl/</a></li>\n<li>api文档： <a href=\"http://www.groovy-lang.org/api.html\" target=\"_blank\" rel=\"noopener\">http://www.groovy-lang.org/api.html</a><a id=\"more\"></a>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><code>Groovy</code>是一种动态语言。它和<code>Java</code>一样，也运行于Java虚拟机中。几乎完全兼容Java<br><code>Gradle</code>提供了构建项目的一个框架，可以单独安装使用，安装地址<a href=\"https://gradle.org/install/\" target=\"_blank\" rel=\"noopener\">https://gradle.org/install/</a></li>\n</ul>\n<p><code>gradle-wrapper</code>顾名思义，这表示是包装过的<code>Gradle</code>，<code>Android</code>工程中一般就的就是它，所以命令行执行的时候就会变成<code>gradlew [task名称]</code>，这里的gradlew，其实提指的就是工程根目录下的<code>gradlew.bat</code>和<code>gradlew</code>文件</p>\n<blockquote>\n<p>如果工程里面没有<code>gradle-wrapper</code>，可以通过<code>gradle wrapper</code>生成</p>\n</blockquote>\n<p>以下几个常用命令（注意Win系统下<code>gradlew</code>而linux系统下需要用<code>./gradlew</code>）</p>\n<ul>\n<li><code>./gradlew -v</code> 版本号</li>\n<li><code>./gradlew clean</code> 清除9GAG/app目录下的build文件夹</li>\n<li><p><code>./gradlew build</code> 检查依赖并编译打包<br>这里注意的是 <code>./gradlew build</code> 命令把 <code>debug</code>、<code>release</code> 环境的包都打出来，如果正式发布只需要打 Release 的包，该怎么办呢，下面介绍一个很有用的命令 assemble , 如</p>\n</li>\n<li><p><code>./gradlew assembleDebug</code> 编译并打Debug包</p>\n</li>\n<li><code>./gradlew assembleRelease</code> 编译并打Release的包</li>\n<li><code>./gradlew :app:dependencies --configuration compile</code> 查看依赖关系</li>\n</ul>\n<p>完成工程构建示例<br><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── app <span class=\"comment\">#Android App目录，可改名，但需要在settings.gradle里面配置</span></span><br><span class=\"line\">│   ├── app.iml</span><br><span class=\"line\">│   ├── build <span class=\"comment\">#构建输出目录</span></span><br><span class=\"line\">│   ├── build.gradle <span class=\"comment\">#构建脚本</span></span><br><span class=\"line\">│   ├── libs <span class=\"comment\">#so相关库</span></span><br><span class=\"line\">│   ├── proguard-rules.pro <span class=\"comment\">#proguard混淆配置</span></span><br><span class=\"line\">│   └── src <span class=\"comment\">#源代码，资源等</span></span><br><span class=\"line\">├── build</span><br><span class=\"line\">│   └── intermediates</span><br><span class=\"line\">├── build.gradle <span class=\"comment\">#工程构建文件</span></span><br><span class=\"line\">├── gradle</span><br><span class=\"line\">│   └── wrapper</span><br><span class=\"line\">|         ├── gradle-wrapper.jar</span><br><span class=\"line\">|         └── gradle-wrapper.properties <span class=\"comment\">#gradle的版本配置</span></span><br><span class=\"line\">├── gradle.properties <span class=\"comment\">#gradle的配置</span></span><br><span class=\"line\">├── gradlew <span class=\"comment\">#gradle wrapper linux shell脚本</span></span><br><span class=\"line\">├── gradlew.bat <span class=\"comment\">#gradle wrapper window下的shell脚本</span></span><br><span class=\"line\">├── local.properties <span class=\"comment\">#配置Androod SDK位置文件</span></span><br><span class=\"line\">└── settings.gradle <span class=\"comment\">#工程配置</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Gradle脚本写法\"><a href=\"#Gradle脚本写法\" class=\"headerlink\" title=\"Gradle脚本写法\"></a>Gradle脚本写法</h2><blockquote>\n<p>都以<code>gradlew</code>的写法为例</p>\n</blockquote>\n<h3 id=\"几个重要对象Project，Task-，Action\"><a href=\"#几个重要对象Project，Task-，Action\" class=\"headerlink\" title=\"几个重要对象Project，Task ，Action\"></a>几个重要对象Project，Task ，Action</h3><p><strong>Project:</strong>是Gradle最重要的一个领域对象，我们写的build.gradle脚本的全部作用，其实就是配置一个Project实例。它里面有几个重要的成员变量和方法，例如: </p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rootProject  <span class=\"comment\">//整个工程实例</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>      <span class=\"comment\">//模块工程实例</span></span><br><span class=\"line\"><span class=\"comment\">//两个用法一致，下面以project为例</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>.name   <span class=\"comment\">//工程名称</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>.afterEvaluate&#123; &#125; <span class=\"comment\">//整个工程构建完成后执行，注意是构建，不是执行完成</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>.<span class=\"keyword\">file</span>(<span class=\"string\">\"\"</span>) <span class=\"comment\">//工程路径，里面接相对路程以获得文件对象</span></span><br></pre></td></tr></table></figure>\n<p><strong>Task:</strong>被组织成了一个有向无环图（DAG）。Gradle中的Task要么是由不同的Plugin引入的，要么是我们自己在build.gradle文件中直接创建的<br>可以通过<code>gradlew tasks</code>来查看有哪些任务task</p>\n<h3 id=\"定义task\"><a href=\"#定义task\" class=\"headerlink\" title=\"定义task\"></a>定义<code>task</code></h3><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">task</span> myTask &#123;</span><br><span class=\"line\">    <span class=\"keyword\">doFirst</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">println</span> <span class=\"string\">'hello'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">doLast</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">println</span> <span class=\"string\">'world'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用以下命令执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradlew myTask</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这段代码的含义：给Project添加一个名为“myTask”的任务<br>用一个闭包来配置这个任务,Task提供了doFirst和doLast方法来给自己添加Action。<br><code>注意:</code> 要执行的代码一定要放到doLast或者doFirst中，不会它会在任务构建完成前执行</p>\n</blockquote>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Test文件夹下建一个src目录，建一个dst目录，src目录下建立一个文件，命名为test.txt</span></span><br><span class=\"line\"><span class=\"keyword\">task</span> copyFile(type: <span class=\"keyword\">Copy</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">from</span> <span class=\"string\">\"src\"</span></span><br><span class=\"line\">    <span class=\"keyword\">into</span> <span class=\"string\">\"dst\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个“显式地声明Task的类型“的方式</p>\n<h3 id=\"task的依赖关系\"><a href=\"#task的依赖关系\" class=\"headerlink\" title=\"task的依赖关系\"></a>task的依赖关系</h3><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">task</span> taskA &#123;</span><br><span class=\"line\">    <span class=\"keyword\">doLast</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">println</span> <span class=\"string\">'this is taskA from project 1'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">task</span> taskB &#123;</span><br><span class=\"line\">    <span class=\"keyword\">doLast</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">println</span> <span class=\"string\">'this is taskB from project 1'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">taskB.dependsOn taskA</span><br></pre></td></tr></table></figure>\n<p>然后我们在命令行运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle taskA</span><br></pre></td></tr></table></figure>\n<p>运行结果会先执行taskB的打印，然后执行taskA的打印</p>\n<blockquote>\n<p>通过<code>dependsOn</code> 的依赖方式，可让我们已有的task后面添加任务，例如Maven的打包上传<code>gradlew upload</code>(不太确定是不是这个命令)和<code>AndResGuard</code>资源压缩就是通过依赖实现的</p>\n</blockquote>\n<h3 id=\"通过project-afterEvaluate-添加任务\"><a href=\"#通过project-afterEvaluate-添加任务\" class=\"headerlink\" title=\"通过project.afterEvaluate{ }添加任务\"></a>通过project.afterEvaluate{ }添加任务</h3><p>例如我们编译完成apk后，需要把apk，mapping等文件拷出来并重命名，但是又不想改变原有的命令<br>例如新建文件<code>copyApk.gradle</code></p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> outputPath = <span class=\"string\">\"./outApk/\"</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> outApkDir = <span class=\"keyword\">file</span>(outputPath)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!outApkDir.exists()) outApkDir.mkdir()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取Git 分支名</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> getGitBranch() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'git symbolic-ref --short -q HEAD'</span>.execute().text.trim()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *组合最终需要的apk名称</span></span><br><span class=\"line\"><span class=\"comment\"> *若要定制最终输出的文件名，请修改该方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> getTargetApkName()&#123;</span><br><span class=\"line\">    SimpleDateFormat format = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyyMMddHHmmss\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> prefx = rootProject.name</span><br><span class=\"line\">    <span class=\"keyword\">def</span> today = format.format(<span class=\"keyword\">new</span> Date())</span><br><span class=\"line\">    <span class=\"keyword\">def</span> versionName = android.defaultConfig.versionName</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"$&#123;prefx&#125;_$&#123;getGitBranch()&#125;_v$&#123;versionName&#125;_$&#123;today&#125;\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">project</span>.afterEvaluate &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> relaseTask = <span class=\"string\">\"assembleRelease\"</span></span><br><span class=\"line\">    <span class=\"comment\">//assembleReleass任务后添加拷贝命令</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tasks.findByName(relaseTask) != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        tasks.getByName(relaseTask) &#123;</span><br><span class=\"line\">            it.<span class=\"keyword\">doLast</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">println</span> <span class=\"string\">\"$project.name: After assembleRelease, copy \"</span></span><br><span class=\"line\">                <span class=\"keyword\">def</span> apkName = getTargetApkName()</span><br><span class=\"line\">                <span class=\"keyword\">println</span> <span class=\"string\">\"$&#123;apkName&#125;\"</span></span><br><span class=\"line\">                <span class=\"keyword\">copy</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">from</span> <span class=\"string\">\"/build/outputs/apk/release\"</span></span><br><span class=\"line\">                    <span class=\"keyword\">into</span> outputPath</span><br><span class=\"line\">                    <span class=\"keyword\">include</span> <span class=\"string\">\"app-release-unsigned.apk\"</span></span><br><span class=\"line\">                    rename(<span class=\"string\">\"app-release-unsigned.apk\"</span>, <span class=\"string\">\"$&#123;apkName&#125;.apk\"</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">copy</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">from</span> <span class=\"string\">\"/build/outputs/mapping/release\"</span></span><br><span class=\"line\">                    <span class=\"keyword\">into</span> outputPath</span><br><span class=\"line\">                    <span class=\"keyword\">include</span> <span class=\"string\">\"mapping.txt\"</span></span><br><span class=\"line\">                    rename(<span class=\"string\">\"mapping.txt\"</span>, <span class=\"string\">\"$&#123;apkName&#125;_mapping.txt\"</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在app模块的<code>build.gradle</code>的最下面引用该文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply from: &quot;copyApk.gradle&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一些方法的使用\"><a href=\"#一些方法的使用\" class=\"headerlink\" title=\"一些方法的使用\"></a>一些方法的使用</h3><h4 id=\"拷贝文件\"><a href=\"#拷贝文件\" class=\"headerlink\" title=\"拷贝文件\"></a>拷贝文件</h4><p>用copy方法</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">copy</span>&#123;<span class=\"comment\">//拷贝maping文件</span></span><br><span class=\"line\">\t  <span class=\"keyword\">from</span> <span class=\"string\">\"/build/outputs/mapping/release\"</span>   <span class=\"comment\">//从哪个目录</span></span><br><span class=\"line\">\t  <span class=\"keyword\">into</span> outputPath    <span class=\"comment\">//拷贝到哪个目录</span></span><br><span class=\"line\">\t  <span class=\"keyword\">include</span> <span class=\"string\">\"mapping.txt\"</span>  <span class=\"comment\">//拷贝哪个文件，可以用通配符</span></span><br><span class=\"line\">\t  rename(<span class=\"string\">\"mapping.txt\"</span>, <span class=\"string\">\"$&#123;apkName&#125;_mapping.txt\"</span>)  <span class=\"comment\">//重命名，不能用通配符</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"引入layoutlib-jar包\"><a href=\"#引入layoutlib-jar包\" class=\"headerlink\" title=\"引入layoutlib.jar包\"></a>引入layoutlib.jar包</h4><p>该包下面有一些系统使用的类，但不建议引入（可以用反射）</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    provided files(getLayoutLibPath())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> getLayoutLibPath() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> rootDir = <span class=\"keyword\">project</span>.rootDir</span><br><span class=\"line\">    <span class=\"keyword\">def</span> localProperties = <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(rootDir, <span class=\"string\">\"local.properties\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> sdkDir = <span class=\"keyword\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(localProperties.exists())&#123;</span><br><span class=\"line\">        Properties properties = <span class=\"keyword\">new</span> Properties()</span><br><span class=\"line\">        localProperties.withInputStream &#123;</span><br><span class=\"line\">            instr -&gt; properties.load(instr)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sdkDir = properties.getProperty(<span class=\"string\">'sdk.dir'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!sdkDir)&#123;<span class=\"comment\">//linux环境下的获取sdk的路径</span></span><br><span class=\"line\">        sdkDir = System.getenv(<span class=\"string\">\"ANDROID_HOME\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sdkDir)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">def</span> compileSdkVersion = android.compileSdkVersion</span><br><span class=\"line\">        Console.<span class=\"keyword\">println</span>(<span class=\"string\">\"app compileSdkVersion : \"</span> + compileSdkVersion)</span><br><span class=\"line\">        <span class=\"keyword\">def</span> androidJarPath = sdkDir + <span class=\"string\">\"/platforms/\"</span> + compileSdkVersion + <span class=\"string\">\"/data/layoutlib.jar\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> androidJarPath</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rootDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"从AndroidManifest下面获取VersionName\"><a href=\"#从AndroidManifest下面获取VersionName\" class=\"headerlink\" title=\"从AndroidManifest下面获取VersionName\"></a>从AndroidManifest下面获取VersionName</h4><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取apk版本号</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> getVersionNameAdvanced(flavor)&#123;</span><br><span class=\"line\">    flavor = flavor ? flavor : <span class=\"string\">\"main\"</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> xmlFile = <span class=\"keyword\">project</span>.<span class=\"keyword\">file</span>(<span class=\"string\">\"./src/$flavor/AndroidManifest.xml\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> rootManifest = <span class=\"keyword\">new</span> XmlSlurper().parse(xmlFile)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rootManifest[<span class=\"string\">'@android:versionName'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"获取当前git的分支名\"><a href=\"#获取当前git的分支名\" class=\"headerlink\" title=\"获取当前git的分支名\"></a>获取当前git的分支名</h4><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取Git 分支名</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> getGitBranch() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'git symbolic-ref --short -q HEAD'</span>.execute().text.trim()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Groovy基础\"><a href=\"#Groovy基础\" class=\"headerlink\" title=\"Groovy基础\"></a><code>Groovy</code>基础</h2>","site":{"data":{}},"excerpt":"<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://juejin.im/entry/592f93ada0bb9f0058a22641\" target=\"_blank\" rel=\"noopener\">Gradle Plugin 用户使用指南</a></li>\n<li>[Android Studio 自定义Gradle Plugin][<a href=\"https://www.jianshu.com/p/af2b0a43133f]\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/af2b0a43133f]</a></li>\n<li><a href=\"https://www.jianshu.com/p/001abe1d8e95\" target=\"_blank\" rel=\"noopener\">Gradle 入门–只此一篇</a></li>\n<li><a href=\"http://stormzhang.com/android/2016/07/02/gradle-for-android-beginners/\" target=\"_blank\" rel=\"noopener\">给 ANDROID 初学者的 GRADLE 知识普及</a></li>\n<li><a href=\"http://blog.csdn.net/innost/article/details/48228651\" target=\"_blank\" rel=\"noopener\">深入理解Android之Gradle</a></li>\n<li><a href=\"http://blog.csdn.net/JF_1994/article/details/52781751\" target=\"_blank\" rel=\"noopener\">重新认识AndroidStudio&amp;Gradle</a></li>\n<li><a href=\"http://blog.jobbole.com/71999/\" target=\"_blank\" rel=\"noopener\">Gradle入门系列</a></li>\n<li>官方文档 <a href=\"https://docs.gradle.org/current/dsl/\" target=\"_blank\" rel=\"noopener\">https://docs.gradle.org/current/dsl/</a></li>\n<li>api文档： <a href=\"http://www.groovy-lang.org/api.html\" target=\"_blank\" rel=\"noopener\">http://www.groovy-lang.org/api.html</a>","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><code>Groovy</code>是一种动态语言。它和<code>Java</code>一样，也运行于Java虚拟机中。几乎完全兼容Java<br><code>Gradle</code>提供了构建项目的一个框架，可以单独安装使用，安装地址<a href=\"https://gradle.org/install/\" target=\"_blank\" rel=\"noopener\">https://gradle.org/install/</a></li>\n</ul>\n<p><code>gradle-wrapper</code>顾名思义，这表示是包装过的<code>Gradle</code>，<code>Android</code>工程中一般就的就是它，所以命令行执行的时候就会变成<code>gradlew [task名称]</code>，这里的gradlew，其实提指的就是工程根目录下的<code>gradlew.bat</code>和<code>gradlew</code>文件</p>\n<blockquote>\n<p>如果工程里面没有<code>gradle-wrapper</code>，可以通过<code>gradle wrapper</code>生成</p>\n</blockquote>\n<p>以下几个常用命令（注意Win系统下<code>gradlew</code>而linux系统下需要用<code>./gradlew</code>）</p>\n<ul>\n<li><code>./gradlew -v</code> 版本号</li>\n<li><code>./gradlew clean</code> 清除9GAG/app目录下的build文件夹</li>\n<li><p><code>./gradlew build</code> 检查依赖并编译打包<br>这里注意的是 <code>./gradlew build</code> 命令把 <code>debug</code>、<code>release</code> 环境的包都打出来，如果正式发布只需要打 Release 的包，该怎么办呢，下面介绍一个很有用的命令 assemble , 如</p>\n</li>\n<li><p><code>./gradlew assembleDebug</code> 编译并打Debug包</p>\n</li>\n<li><code>./gradlew assembleRelease</code> 编译并打Release的包</li>\n<li><code>./gradlew :app:dependencies --configuration compile</code> 查看依赖关系</li>\n</ul>\n<p>完成工程构建示例<br><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── app <span class=\"comment\">#Android App目录，可改名，但需要在settings.gradle里面配置</span></span><br><span class=\"line\">│   ├── app.iml</span><br><span class=\"line\">│   ├── build <span class=\"comment\">#构建输出目录</span></span><br><span class=\"line\">│   ├── build.gradle <span class=\"comment\">#构建脚本</span></span><br><span class=\"line\">│   ├── libs <span class=\"comment\">#so相关库</span></span><br><span class=\"line\">│   ├── proguard-rules.pro <span class=\"comment\">#proguard混淆配置</span></span><br><span class=\"line\">│   └── src <span class=\"comment\">#源代码，资源等</span></span><br><span class=\"line\">├── build</span><br><span class=\"line\">│   └── intermediates</span><br><span class=\"line\">├── build.gradle <span class=\"comment\">#工程构建文件</span></span><br><span class=\"line\">├── gradle</span><br><span class=\"line\">│   └── wrapper</span><br><span class=\"line\">|         ├── gradle-wrapper.jar</span><br><span class=\"line\">|         └── gradle-wrapper.properties <span class=\"comment\">#gradle的版本配置</span></span><br><span class=\"line\">├── gradle.properties <span class=\"comment\">#gradle的配置</span></span><br><span class=\"line\">├── gradlew <span class=\"comment\">#gradle wrapper linux shell脚本</span></span><br><span class=\"line\">├── gradlew.bat <span class=\"comment\">#gradle wrapper window下的shell脚本</span></span><br><span class=\"line\">├── local.properties <span class=\"comment\">#配置Androod SDK位置文件</span></span><br><span class=\"line\">└── settings.gradle <span class=\"comment\">#工程配置</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Gradle脚本写法\"><a href=\"#Gradle脚本写法\" class=\"headerlink\" title=\"Gradle脚本写法\"></a>Gradle脚本写法</h2><blockquote>\n<p>都以<code>gradlew</code>的写法为例</p>\n</blockquote>\n<h3 id=\"几个重要对象Project，Task-，Action\"><a href=\"#几个重要对象Project，Task-，Action\" class=\"headerlink\" title=\"几个重要对象Project，Task ，Action\"></a>几个重要对象Project，Task ，Action</h3><p><strong>Project:</strong>是Gradle最重要的一个领域对象，我们写的build.gradle脚本的全部作用，其实就是配置一个Project实例。它里面有几个重要的成员变量和方法，例如: </p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rootProject  <span class=\"comment\">//整个工程实例</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>      <span class=\"comment\">//模块工程实例</span></span><br><span class=\"line\"><span class=\"comment\">//两个用法一致，下面以project为例</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>.name   <span class=\"comment\">//工程名称</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>.afterEvaluate&#123; &#125; <span class=\"comment\">//整个工程构建完成后执行，注意是构建，不是执行完成</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>.<span class=\"keyword\">file</span>(<span class=\"string\">\"\"</span>) <span class=\"comment\">//工程路径，里面接相对路程以获得文件对象</span></span><br></pre></td></tr></table></figure>\n<p><strong>Task:</strong>被组织成了一个有向无环图（DAG）。Gradle中的Task要么是由不同的Plugin引入的，要么是我们自己在build.gradle文件中直接创建的<br>可以通过<code>gradlew tasks</code>来查看有哪些任务task</p>\n<h3 id=\"定义task\"><a href=\"#定义task\" class=\"headerlink\" title=\"定义task\"></a>定义<code>task</code></h3><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">task</span> myTask &#123;</span><br><span class=\"line\">    <span class=\"keyword\">doFirst</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">println</span> <span class=\"string\">'hello'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">doLast</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">println</span> <span class=\"string\">'world'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用以下命令执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradlew myTask</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这段代码的含义：给Project添加一个名为“myTask”的任务<br>用一个闭包来配置这个任务,Task提供了doFirst和doLast方法来给自己添加Action。<br><code>注意:</code> 要执行的代码一定要放到doLast或者doFirst中，不会它会在任务构建完成前执行</p>\n</blockquote>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Test文件夹下建一个src目录，建一个dst目录，src目录下建立一个文件，命名为test.txt</span></span><br><span class=\"line\"><span class=\"keyword\">task</span> copyFile(type: <span class=\"keyword\">Copy</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">from</span> <span class=\"string\">\"src\"</span></span><br><span class=\"line\">    <span class=\"keyword\">into</span> <span class=\"string\">\"dst\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个“显式地声明Task的类型“的方式</p>\n<h3 id=\"task的依赖关系\"><a href=\"#task的依赖关系\" class=\"headerlink\" title=\"task的依赖关系\"></a>task的依赖关系</h3><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">task</span> taskA &#123;</span><br><span class=\"line\">    <span class=\"keyword\">doLast</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">println</span> <span class=\"string\">'this is taskA from project 1'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">task</span> taskB &#123;</span><br><span class=\"line\">    <span class=\"keyword\">doLast</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">println</span> <span class=\"string\">'this is taskB from project 1'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">taskB.dependsOn taskA</span><br></pre></td></tr></table></figure>\n<p>然后我们在命令行运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle taskA</span><br></pre></td></tr></table></figure>\n<p>运行结果会先执行taskB的打印，然后执行taskA的打印</p>\n<blockquote>\n<p>通过<code>dependsOn</code> 的依赖方式，可让我们已有的task后面添加任务，例如Maven的打包上传<code>gradlew upload</code>(不太确定是不是这个命令)和<code>AndResGuard</code>资源压缩就是通过依赖实现的</p>\n</blockquote>\n<h3 id=\"通过project-afterEvaluate-添加任务\"><a href=\"#通过project-afterEvaluate-添加任务\" class=\"headerlink\" title=\"通过project.afterEvaluate{ }添加任务\"></a>通过project.afterEvaluate{ }添加任务</h3><p>例如我们编译完成apk后，需要把apk，mapping等文件拷出来并重命名，但是又不想改变原有的命令<br>例如新建文件<code>copyApk.gradle</code></p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> outputPath = <span class=\"string\">\"./outApk/\"</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> outApkDir = <span class=\"keyword\">file</span>(outputPath)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!outApkDir.exists()) outApkDir.mkdir()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取Git 分支名</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> getGitBranch() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'git symbolic-ref --short -q HEAD'</span>.execute().text.trim()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *组合最终需要的apk名称</span></span><br><span class=\"line\"><span class=\"comment\"> *若要定制最终输出的文件名，请修改该方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> getTargetApkName()&#123;</span><br><span class=\"line\">    SimpleDateFormat format = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyyMMddHHmmss\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> prefx = rootProject.name</span><br><span class=\"line\">    <span class=\"keyword\">def</span> today = format.format(<span class=\"keyword\">new</span> Date())</span><br><span class=\"line\">    <span class=\"keyword\">def</span> versionName = android.defaultConfig.versionName</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"$&#123;prefx&#125;_$&#123;getGitBranch()&#125;_v$&#123;versionName&#125;_$&#123;today&#125;\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">project</span>.afterEvaluate &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> relaseTask = <span class=\"string\">\"assembleRelease\"</span></span><br><span class=\"line\">    <span class=\"comment\">//assembleReleass任务后添加拷贝命令</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tasks.findByName(relaseTask) != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        tasks.getByName(relaseTask) &#123;</span><br><span class=\"line\">            it.<span class=\"keyword\">doLast</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">println</span> <span class=\"string\">\"$project.name: After assembleRelease, copy \"</span></span><br><span class=\"line\">                <span class=\"keyword\">def</span> apkName = getTargetApkName()</span><br><span class=\"line\">                <span class=\"keyword\">println</span> <span class=\"string\">\"$&#123;apkName&#125;\"</span></span><br><span class=\"line\">                <span class=\"keyword\">copy</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">from</span> <span class=\"string\">\"/build/outputs/apk/release\"</span></span><br><span class=\"line\">                    <span class=\"keyword\">into</span> outputPath</span><br><span class=\"line\">                    <span class=\"keyword\">include</span> <span class=\"string\">\"app-release-unsigned.apk\"</span></span><br><span class=\"line\">                    rename(<span class=\"string\">\"app-release-unsigned.apk\"</span>, <span class=\"string\">\"$&#123;apkName&#125;.apk\"</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">copy</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">from</span> <span class=\"string\">\"/build/outputs/mapping/release\"</span></span><br><span class=\"line\">                    <span class=\"keyword\">into</span> outputPath</span><br><span class=\"line\">                    <span class=\"keyword\">include</span> <span class=\"string\">\"mapping.txt\"</span></span><br><span class=\"line\">                    rename(<span class=\"string\">\"mapping.txt\"</span>, <span class=\"string\">\"$&#123;apkName&#125;_mapping.txt\"</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在app模块的<code>build.gradle</code>的最下面引用该文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply from: &quot;copyApk.gradle&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"一些方法的使用\"><a href=\"#一些方法的使用\" class=\"headerlink\" title=\"一些方法的使用\"></a>一些方法的使用</h3><h4 id=\"拷贝文件\"><a href=\"#拷贝文件\" class=\"headerlink\" title=\"拷贝文件\"></a>拷贝文件</h4><p>用copy方法</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">copy</span>&#123;<span class=\"comment\">//拷贝maping文件</span></span><br><span class=\"line\">\t  <span class=\"keyword\">from</span> <span class=\"string\">\"/build/outputs/mapping/release\"</span>   <span class=\"comment\">//从哪个目录</span></span><br><span class=\"line\">\t  <span class=\"keyword\">into</span> outputPath    <span class=\"comment\">//拷贝到哪个目录</span></span><br><span class=\"line\">\t  <span class=\"keyword\">include</span> <span class=\"string\">\"mapping.txt\"</span>  <span class=\"comment\">//拷贝哪个文件，可以用通配符</span></span><br><span class=\"line\">\t  rename(<span class=\"string\">\"mapping.txt\"</span>, <span class=\"string\">\"$&#123;apkName&#125;_mapping.txt\"</span>)  <span class=\"comment\">//重命名，不能用通配符</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"引入layoutlib-jar包\"><a href=\"#引入layoutlib-jar包\" class=\"headerlink\" title=\"引入layoutlib.jar包\"></a>引入layoutlib.jar包</h4><p>该包下面有一些系统使用的类，但不建议引入（可以用反射）</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    provided files(getLayoutLibPath())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> getLayoutLibPath() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> rootDir = <span class=\"keyword\">project</span>.rootDir</span><br><span class=\"line\">    <span class=\"keyword\">def</span> localProperties = <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(rootDir, <span class=\"string\">\"local.properties\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> sdkDir = <span class=\"keyword\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(localProperties.exists())&#123;</span><br><span class=\"line\">        Properties properties = <span class=\"keyword\">new</span> Properties()</span><br><span class=\"line\">        localProperties.withInputStream &#123;</span><br><span class=\"line\">            instr -&gt; properties.load(instr)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sdkDir = properties.getProperty(<span class=\"string\">'sdk.dir'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!sdkDir)&#123;<span class=\"comment\">//linux环境下的获取sdk的路径</span></span><br><span class=\"line\">        sdkDir = System.getenv(<span class=\"string\">\"ANDROID_HOME\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sdkDir)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">def</span> compileSdkVersion = android.compileSdkVersion</span><br><span class=\"line\">        Console.<span class=\"keyword\">println</span>(<span class=\"string\">\"app compileSdkVersion : \"</span> + compileSdkVersion)</span><br><span class=\"line\">        <span class=\"keyword\">def</span> androidJarPath = sdkDir + <span class=\"string\">\"/platforms/\"</span> + compileSdkVersion + <span class=\"string\">\"/data/layoutlib.jar\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> androidJarPath</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rootDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"从AndroidManifest下面获取VersionName\"><a href=\"#从AndroidManifest下面获取VersionName\" class=\"headerlink\" title=\"从AndroidManifest下面获取VersionName\"></a>从AndroidManifest下面获取VersionName</h4><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取apk版本号</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> getVersionNameAdvanced(flavor)&#123;</span><br><span class=\"line\">    flavor = flavor ? flavor : <span class=\"string\">\"main\"</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> xmlFile = <span class=\"keyword\">project</span>.<span class=\"keyword\">file</span>(<span class=\"string\">\"./src/$flavor/AndroidManifest.xml\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">def</span> rootManifest = <span class=\"keyword\">new</span> XmlSlurper().parse(xmlFile)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rootManifest[<span class=\"string\">'@android:versionName'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"获取当前git的分支名\"><a href=\"#获取当前git的分支名\" class=\"headerlink\" title=\"获取当前git的分支名\"></a>获取当前git的分支名</h4><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取Git 分支名</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> getGitBranch() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'git symbolic-ref --short -q HEAD'</span>.execute().text.trim()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Groovy基础\"><a href=\"#Groovy基础\" class=\"headerlink\" title=\"Groovy基础\"></a><code>Groovy</code>基础</h2>"},{"title":"n个无序数求第k大的数","date":"2018-03-15T14:52:29.000Z","_content":"\n> 今天面试问到n个无序的库找出第k大的数，用最优的算法，想了半天只后只好回答用快速排序再求第k大的数，时间复杂度为O(nlogn)，但这显然不是最优算法，回来后查了一个，在此做个记录。主要参考: [寻找第k大的数](https://www.jianshu.com/p/33ee33ce8699)\n<!--more-->\n## 排序解决法\n\n排序再找第k大的数是最简单的解决方法，排序完成后再找只需要根据数据索引即可，时间复杂度是1\n\n而排序最优的是快速排序(不是绝对的，与数组大小有关)，时间复杂度为O(nlogn)，所以最后的时间复杂度O(nlogn)\n\n快速排序基本思想是数组中取任意一个值key，将大于key的值放在key右边，小于key的值放在key左边。key的左边和右边则都是有序的了，然后递归key值左右的子数组。具体代码见参考文章。\n\n\n## 类快排解法\n\n采取快速排序的思想，快速排序中一个最重要的partition算法是这样的。\n>快速排序基本思想是数组中取任意一个值key，将大于key的值放在key右边，小于key的值放在key左边。key的左边和右边则都是有序的了\n\n快排中的partition算法，返回key在数组中的位置，如果key的位置正好等于k-1，那么问题则得到解决，如果key的位置不等于k-1，可使用递归查找对应子数组。直到key的位置等于k-1，则找对问题的解。\n\n此解法的效率值为N*lgK，由于K是常数，所以此解法效率值为N，优于排序解法\n\n通俗的描述一下partition的过程\n\n1. 长度为n的数组，取出第1个数作为参考值m，从第n个数向前遍历\n2. 如果数小于m则将该数放到第一个数的位置，并记下索引j\n3. 再从第2个数向后遍历，如果数大于m，则将该数放到数组索引j的位置，并记下该数的索引i\n4. 再从数组索引j-1的位置向前遍历，如果数小于m，将该数放到数组索引i的位置，并记下此时的索引j\n5. 再次从i+1的位置向后遍历，循环3-4\n6. 最后空的就是m的位置，而且m左边的比m小，右边的比m大\n\n## 最小堆解法\n\n要先了解堆排序: [堆排序及优先队列](https://www.jianshu.com/p/404855a603a4)\n\n先在此总结一下堆排序的特性\n\n1. 堆是一个完全二叉树的数据结构，最大堆是父节点上的值比子节点上的值大，反之则是最小堆\n2. 堆是以数组形式实现的，所以二及对中i节点的左子节点一定是2i+1，右子节点一定是2i+2，而且数组中 array.length/2 到 array.length - 1之间的节点，肯定是叶子节点，没有子节点\n3. 创建堆要逆序进行，也就是从array.length/2开始，这样才能保证父节点一定大于子节点\n4. 堆排序其实就是将创建好的堆的最根节点放到数组最后，然后再次从根节点创建最大堆的过程\n\n根据最大堆的排序过程可以看到，每次都是从堆中选取最大的数放到数组，所以在要算出第k个数时就可以停止了。\n\n```java\npublic static int findKByHeap(int[] array, int k) {\n    buildHeap(array, k);\n    for (int i = k + 1; i < array.length; i++) {\n        if (array[i] > array[0]) {\n            int temp = array[i];\n            array[i] = array[0];\n            array[0] = temp;\n            maxHeapify(array, k, 0);\n        }\n    }\n    return array[0];\n}\n```","source":"_posts/n个无序数求第k大的数.md","raw":"---\ntitle: n个无序数求第k大的数\ndate: 2018-03-15 22:52:29\ntags: 算法\n---\n\n> 今天面试问到n个无序的库找出第k大的数，用最优的算法，想了半天只后只好回答用快速排序再求第k大的数，时间复杂度为O(nlogn)，但这显然不是最优算法，回来后查了一个，在此做个记录。主要参考: [寻找第k大的数](https://www.jianshu.com/p/33ee33ce8699)\n<!--more-->\n## 排序解决法\n\n排序再找第k大的数是最简单的解决方法，排序完成后再找只需要根据数据索引即可，时间复杂度是1\n\n而排序最优的是快速排序(不是绝对的，与数组大小有关)，时间复杂度为O(nlogn)，所以最后的时间复杂度O(nlogn)\n\n快速排序基本思想是数组中取任意一个值key，将大于key的值放在key右边，小于key的值放在key左边。key的左边和右边则都是有序的了，然后递归key值左右的子数组。具体代码见参考文章。\n\n\n## 类快排解法\n\n采取快速排序的思想，快速排序中一个最重要的partition算法是这样的。\n>快速排序基本思想是数组中取任意一个值key，将大于key的值放在key右边，小于key的值放在key左边。key的左边和右边则都是有序的了\n\n快排中的partition算法，返回key在数组中的位置，如果key的位置正好等于k-1，那么问题则得到解决，如果key的位置不等于k-1，可使用递归查找对应子数组。直到key的位置等于k-1，则找对问题的解。\n\n此解法的效率值为N*lgK，由于K是常数，所以此解法效率值为N，优于排序解法\n\n通俗的描述一下partition的过程\n\n1. 长度为n的数组，取出第1个数作为参考值m，从第n个数向前遍历\n2. 如果数小于m则将该数放到第一个数的位置，并记下索引j\n3. 再从第2个数向后遍历，如果数大于m，则将该数放到数组索引j的位置，并记下该数的索引i\n4. 再从数组索引j-1的位置向前遍历，如果数小于m，将该数放到数组索引i的位置，并记下此时的索引j\n5. 再次从i+1的位置向后遍历，循环3-4\n6. 最后空的就是m的位置，而且m左边的比m小，右边的比m大\n\n## 最小堆解法\n\n要先了解堆排序: [堆排序及优先队列](https://www.jianshu.com/p/404855a603a4)\n\n先在此总结一下堆排序的特性\n\n1. 堆是一个完全二叉树的数据结构，最大堆是父节点上的值比子节点上的值大，反之则是最小堆\n2. 堆是以数组形式实现的，所以二及对中i节点的左子节点一定是2i+1，右子节点一定是2i+2，而且数组中 array.length/2 到 array.length - 1之间的节点，肯定是叶子节点，没有子节点\n3. 创建堆要逆序进行，也就是从array.length/2开始，这样才能保证父节点一定大于子节点\n4. 堆排序其实就是将创建好的堆的最根节点放到数组最后，然后再次从根节点创建最大堆的过程\n\n根据最大堆的排序过程可以看到，每次都是从堆中选取最大的数放到数组，所以在要算出第k个数时就可以停止了。\n\n```java\npublic static int findKByHeap(int[] array, int k) {\n    buildHeap(array, k);\n    for (int i = k + 1; i < array.length; i++) {\n        if (array[i] > array[0]) {\n            int temp = array[i];\n            array[i] = array[0];\n            array[0] = temp;\n            maxHeapify(array, k, 0);\n        }\n    }\n    return array[0];\n}\n```","slug":"n个无序数求第k大的数","published":1,"updated":"2018-03-27T14:06:24.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyq0ff08000hzwv7jt8xmpdw","content":"<blockquote>\n<p>今天面试问到n个无序的库找出第k大的数，用最优的算法，想了半天只后只好回答用快速排序再求第k大的数，时间复杂度为O(nlogn)，但这显然不是最优算法，回来后查了一个，在此做个记录。主要参考: <a href=\"https://www.jianshu.com/p/33ee33ce8699\" target=\"_blank\" rel=\"noopener\">寻找第k大的数</a><br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"排序解决法\"><a href=\"#排序解决法\" class=\"headerlink\" title=\"排序解决法\"></a>排序解决法</h2><p>排序再找第k大的数是最简单的解决方法，排序完成后再找只需要根据数据索引即可，时间复杂度是1</p>\n<p>而排序最优的是快速排序(不是绝对的，与数组大小有关)，时间复杂度为O(nlogn)，所以最后的时间复杂度O(nlogn)</p>\n<p>快速排序基本思想是数组中取任意一个值key，将大于key的值放在key右边，小于key的值放在key左边。key的左边和右边则都是有序的了，然后递归key值左右的子数组。具体代码见参考文章。</p>\n<h2 id=\"类快排解法\"><a href=\"#类快排解法\" class=\"headerlink\" title=\"类快排解法\"></a>类快排解法</h2><p>采取快速排序的思想，快速排序中一个最重要的partition算法是这样的。</p>\n<blockquote>\n<p>快速排序基本思想是数组中取任意一个值key，将大于key的值放在key右边，小于key的值放在key左边。key的左边和右边则都是有序的了</p>\n</blockquote>\n<p>快排中的partition算法，返回key在数组中的位置，如果key的位置正好等于k-1，那么问题则得到解决，如果key的位置不等于k-1，可使用递归查找对应子数组。直到key的位置等于k-1，则找对问题的解。</p>\n<p>此解法的效率值为N*lgK，由于K是常数，所以此解法效率值为N，优于排序解法</p>\n<p>通俗的描述一下partition的过程</p>\n<ol>\n<li>长度为n的数组，取出第1个数作为参考值m，从第n个数向前遍历</li>\n<li>如果数小于m则将该数放到第一个数的位置，并记下索引j</li>\n<li>再从第2个数向后遍历，如果数大于m，则将该数放到数组索引j的位置，并记下该数的索引i</li>\n<li>再从数组索引j-1的位置向前遍历，如果数小于m，将该数放到数组索引i的位置，并记下此时的索引j</li>\n<li>再次从i+1的位置向后遍历，循环3-4</li>\n<li>最后空的就是m的位置，而且m左边的比m小，右边的比m大</li>\n</ol>\n<h2 id=\"最小堆解法\"><a href=\"#最小堆解法\" class=\"headerlink\" title=\"最小堆解法\"></a>最小堆解法</h2><p>要先了解堆排序: <a href=\"https://www.jianshu.com/p/404855a603a4\" target=\"_blank\" rel=\"noopener\">堆排序及优先队列</a></p>\n<p>先在此总结一下堆排序的特性</p>\n<ol>\n<li>堆是一个完全二叉树的数据结构，最大堆是父节点上的值比子节点上的值大，反之则是最小堆</li>\n<li>堆是以数组形式实现的，所以二及对中i节点的左子节点一定是2i+1，右子节点一定是2i+2，而且数组中 array.length/2 到 array.length - 1之间的节点，肯定是叶子节点，没有子节点</li>\n<li>创建堆要逆序进行，也就是从array.length/2开始，这样才能保证父节点一定大于子节点</li>\n<li>堆排序其实就是将创建好的堆的最根节点放到数组最后，然后再次从根节点创建最大堆的过程</li>\n</ol>\n<p>根据最大堆的排序过程可以看到，每次都是从堆中选取最大的数放到数组，所以在要算出第k个数时就可以停止了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">findKByHeap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    buildHeap(array, k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = k + <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[i] &gt; array[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = array[i];</span><br><span class=\"line\">            array[i] = array[<span class=\"number\">0</span>];</span><br><span class=\"line\">            array[<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">            maxHeapify(array, k, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>今天面试问到n个无序的库找出第k大的数，用最优的算法，想了半天只后只好回答用快速排序再求第k大的数，时间复杂度为O(nlogn)，但这显然不是最优算法，回来后查了一个，在此做个记录。主要参考: <a href=\"https://www.jianshu.com/p/33ee33ce8699\" target=\"_blank\" rel=\"noopener\">寻找第k大的数</a><br>","more":"</p>\n</blockquote>\n<h2 id=\"排序解决法\"><a href=\"#排序解决法\" class=\"headerlink\" title=\"排序解决法\"></a>排序解决法</h2><p>排序再找第k大的数是最简单的解决方法，排序完成后再找只需要根据数据索引即可，时间复杂度是1</p>\n<p>而排序最优的是快速排序(不是绝对的，与数组大小有关)，时间复杂度为O(nlogn)，所以最后的时间复杂度O(nlogn)</p>\n<p>快速排序基本思想是数组中取任意一个值key，将大于key的值放在key右边，小于key的值放在key左边。key的左边和右边则都是有序的了，然后递归key值左右的子数组。具体代码见参考文章。</p>\n<h2 id=\"类快排解法\"><a href=\"#类快排解法\" class=\"headerlink\" title=\"类快排解法\"></a>类快排解法</h2><p>采取快速排序的思想，快速排序中一个最重要的partition算法是这样的。</p>\n<blockquote>\n<p>快速排序基本思想是数组中取任意一个值key，将大于key的值放在key右边，小于key的值放在key左边。key的左边和右边则都是有序的了</p>\n</blockquote>\n<p>快排中的partition算法，返回key在数组中的位置，如果key的位置正好等于k-1，那么问题则得到解决，如果key的位置不等于k-1，可使用递归查找对应子数组。直到key的位置等于k-1，则找对问题的解。</p>\n<p>此解法的效率值为N*lgK，由于K是常数，所以此解法效率值为N，优于排序解法</p>\n<p>通俗的描述一下partition的过程</p>\n<ol>\n<li>长度为n的数组，取出第1个数作为参考值m，从第n个数向前遍历</li>\n<li>如果数小于m则将该数放到第一个数的位置，并记下索引j</li>\n<li>再从第2个数向后遍历，如果数大于m，则将该数放到数组索引j的位置，并记下该数的索引i</li>\n<li>再从数组索引j-1的位置向前遍历，如果数小于m，将该数放到数组索引i的位置，并记下此时的索引j</li>\n<li>再次从i+1的位置向后遍历，循环3-4</li>\n<li>最后空的就是m的位置，而且m左边的比m小，右边的比m大</li>\n</ol>\n<h2 id=\"最小堆解法\"><a href=\"#最小堆解法\" class=\"headerlink\" title=\"最小堆解法\"></a>最小堆解法</h2><p>要先了解堆排序: <a href=\"https://www.jianshu.com/p/404855a603a4\" target=\"_blank\" rel=\"noopener\">堆排序及优先队列</a></p>\n<p>先在此总结一下堆排序的特性</p>\n<ol>\n<li>堆是一个完全二叉树的数据结构，最大堆是父节点上的值比子节点上的值大，反之则是最小堆</li>\n<li>堆是以数组形式实现的，所以二及对中i节点的左子节点一定是2i+1，右子节点一定是2i+2，而且数组中 array.length/2 到 array.length - 1之间的节点，肯定是叶子节点，没有子节点</li>\n<li>创建堆要逆序进行，也就是从array.length/2开始，这样才能保证父节点一定大于子节点</li>\n<li>堆排序其实就是将创建好的堆的最根节点放到数组最后，然后再次从根节点创建最大堆的过程</li>\n</ol>\n<p>根据最大堆的排序过程可以看到，每次都是从堆中选取最大的数放到数组，所以在要算出第k个数时就可以停止了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">findKByHeap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    buildHeap(array, k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = k + <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[i] &gt; array[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = array[i];</span><br><span class=\"line\">            array[i] = array[<span class=\"number\">0</span>];</span><br><span class=\"line\">            array[<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">            maxHeapify(array, k, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"TimeRecoder 写一个计算App性能耗时的工具类","date":"2018-03-12T14:37:55.000Z","_content":"\n## 介绍\n\n性能优化中经常会遇到要计算某个方法的耗时，通过一些工具如traceview的确可以分析大概的性能瓶颈，但是它们分析出的耗时大都是经过一定程度放大过的，要知道真正的耗时还是需要打印log\n这里总结了一个工具类TimeRecoder，可以方便的打印耗时log\n它主要做到三件事\n1. 打印耗时\n2. 方便开关\n3. 计算多次操作的平均耗时\n<!--more-->\n使用很方便，直接在计算耗时点的前后加上begin和end即可如：\n\n```java\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    TimeRecorder.begin(\"MainActivity#onCreate\");\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    TimeRecorder.end(\"MainActivity#onCreate\");\n}\n```\n其中begin和end中的字符串是惟一标识，会在打印log时输出如：\n```console\nDemo MainActivity#onCreate  time spent=137ms\n```\n\n这些log代码可以留在release的代码中，可以随时关闭:\n```java\nTimeRecorder.setDebug(false);\n```\n\n如果不想写开关，这里还预留了一种adb的方式打开关闭log的方法：\n```bash\n#开启\n$: adb shell setprop log.tag.time_recorder_log V\n#关闭\n$: adb shell setprop log.tag.time_recorder_log D\n```\n关于这种使用原理可参考: http://blog.csdn.net/qqxiaoqiang1573/article/details/72867776\n\n//未完\n\n## 代码\n```java\n\npublic class TimeRecorder {\n\n    private static final String TAG = \"Demo\";\n    /**\n     * release版下通过以下命令打印log，但是需要重启应用\n     * $: adb shell setprop log.tag.time_recorder_log V\n     * 关闭命令:\n     * $: adb shell setprop log.tag.time_recorder_log D\n     */\n    public static final String TIME_RECORDER_LOG = \"time_recorder_log\";\n    /**\n     * debug模式下打开log，但是如果放在library里面会失效，因为library编译的一直是release版\n     */\n    private static boolean ENABLED = BuildConfig.DEBUG ||\n            isPropertyEnabled(TIME_RECORDER_LOG);\n\n    private static long t1;\n    private static ArrayMap<String, Long> sTimeMap;\n    private static ArrayMap<String, CountValue> sNanoCountTimeMap;\n\n    public static boolean isPropertyEnabled(String propertyName) {\n        return Log.isLoggable(propertyName, Log.VERBOSE);\n    }\n\n    public static void setDebug(boolean debug){\n        ENABLED = debug;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    private static void logd(@NonNull String msg) {\n        //这里的TAG最好整个模块一个统一的\n        Log.d(\"APP\", msg);\n    }\n\n    /**\n     * 开始记录时间较短的耗时情况\n     *   调用方式为：\n     *      {@link #beginNanoCount(String)}开始计时 -> {@link #pauseNanoCount(String)} 暂停计时\n     *      以上重复调用\n     *      ->  {@link #endNanoCount(String, String)} 输出总耗时情况\n     *\n     * @param tag\n     */\n    public static void beginNanoCount(@NonNull String tag){\n        if(!ENABLED) return;\n        ensureNanoCountTimeMap();\n        CountValue countValue = sNanoCountTimeMap.get(tag);\n        if(countValue == null){\n            countValue = new CountValue();\n            sNanoCountTimeMap.put(tag, countValue);\n            countValue.eclipseTime = 0;\n            countValue.count = 0;\n        }\n        countValue.nanoTime = System.nanoTime();\n    }\n\n    /**\n     * 暂停计时\n     *   调用方式为：\n     *      {@link #beginNanoCount(String)}开始计时 -> {@link #pauseNanoCount(String)} 暂停计时\n     *      以上重复调用\n     *      ->  {@link #endNanoCount(String, String)} 输出总耗时情况\n     *\n     * @param tag\n     */\n    public static void pauseNanoCount(@NonNull String tag){\n        if(!ENABLED) return;\n        ensureNanoCountTimeMap();\n        CountValue countValue = sNanoCountTimeMap.get(tag);\n        if(countValue == null || countValue.nanoTime == 0){\n            return;\n        }\n        countValue.eclipseTime += System.nanoTime() - countValue.nanoTime;\n        countValue.nanoTime = 0;\n        countValue.count ++;\n    }\n\n    /**\n     * 输出耗时 {@link #endNanoCount(String, String)}\n     * @param tag\n     */\n    public static void endNanoCount(@NonNull String tag){\n        endNanoCount(tag, null);\n    }\n\n    /**\n     * 输出耗时\n     *   调用方式为：\n     *      {@link #beginNanoCount(String)}开始计时 -> {@link #pauseNanoCount(String)} 暂停计时\n     *      以上重复调用\n     *      ->  {@link #endNanoCount(String, String)} 输出总耗时情况\n     * @param tag\n     * @param call\n     */\n    public static void endNanoCount(@NonNull String tag,@Nullable String call){\n        if(!ENABLED) return;\n        ensureNanoCountTimeMap();\n        CountValue countValue = sNanoCountTimeMap.get(tag);\n        if(countValue == null || countValue.count <= 0){\n            return;\n        }\n        logd(TAG+\" \"+ tag +\" \"+ (call == null ? \"\" : call) +\n                \" time spent=\" + nanoToMillis(countValue.eclipseTime) +\n                \", count=\" + countValue.count + \", per time spent=\"\n                + nanoToMillis(countValue.eclipseTime / countValue.count)+\"ms\");\n        sNanoCountTimeMap.remove(tag);\n    }\n\n    public static long nanoToMillis(long nanoTime){\n        return nanoTime / 1000000L;\n    }\n\n    /**\n     * 开始记录时间，供临时开发调用\n     * 对应调用无参数的end或者一个参数的end\n     * {@link #end()}\n     */\n    public static void begin(){\n        if (ENABLED) {\n            t1 = currentTimeMillis();\n        }\n    }\n\n    public static long end(){\n        if (ENABLED) {\n            return currentTimeMillis() - t1;\n        }\n        return 0;\n    }\n\n\n    /**\n     * 开始记录时间\n     * 对应调用两个参数的end\n     * {@link #end(String, String)}\n     * @param tag : 记录时间的惟一标识\n     */\n    public static void begin(@NonNull String tag){\n        if (ENABLED) {\n            ensureTimeMap();\n            sTimeMap.put(tag, currentTimeMillis());\n        }\n    }\n\n    /**\n     * 输出耗时\n     *  {@link #begin(String)}\n     * @param tag\n     */\n    public static void end(@NonNull String tag){\n        end(tag, null);\n    }\n\n    /**\n     * 输出耗时\n     * {@link #begin(String)}\n     * @param tag  记录时间的惟一标识\n     * @param call :log输出内容,可以为空\n     */\n    public static void end(@NonNull String tag,@Nullable String call){\n        if (ENABLED) {\n            ensureTimeMap();\n            Long timeStamp = sTimeMap.get(tag);\n            if(timeStamp == null){\n                return;\n            }\n            logd(TAG + \" \"+tag +\" \"+ (call == null ? \"\" : call)\n                    + \" time spent=\"+(currentTimeMillis() - timeStamp)+\"ms\");\n            sTimeMap.remove(tag);\n        }\n    }\n\n    /**\n     * 记录时间,可考虑以后使用其它单位\n     * @return\n     */\n    private static long currentTimeMillis(){\n        return SystemClock.uptimeMillis();\n    }\n\n    private static void ensureTimeMap(){\n        if (ENABLED) {\n            if(sTimeMap == null){\n                sTimeMap = new ArrayMap<>();\n            }\n        }\n    }\n\n    private static void ensureNanoCountTimeMap(){\n        if(ENABLED){\n            if(sNanoCountTimeMap == null){\n                sNanoCountTimeMap = new ArrayMap<>();\n            }\n        }\n    }\n\n    private static class CountValue{\n        int count;\n        long nanoTime;\n        long eclipseTime;\n    }\n}\n```\n","source":"_posts/TimeRecoder-写一个计算App性能耗时的工具类.md","raw":"---\ntitle: TimeRecoder 写一个计算App性能耗时的工具类\ndate: 2018-03-12 22:37:55\ntags: Android\n---\n\n## 介绍\n\n性能优化中经常会遇到要计算某个方法的耗时，通过一些工具如traceview的确可以分析大概的性能瓶颈，但是它们分析出的耗时大都是经过一定程度放大过的，要知道真正的耗时还是需要打印log\n这里总结了一个工具类TimeRecoder，可以方便的打印耗时log\n它主要做到三件事\n1. 打印耗时\n2. 方便开关\n3. 计算多次操作的平均耗时\n<!--more-->\n使用很方便，直接在计算耗时点的前后加上begin和end即可如：\n\n```java\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    TimeRecorder.begin(\"MainActivity#onCreate\");\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    TimeRecorder.end(\"MainActivity#onCreate\");\n}\n```\n其中begin和end中的字符串是惟一标识，会在打印log时输出如：\n```console\nDemo MainActivity#onCreate  time spent=137ms\n```\n\n这些log代码可以留在release的代码中，可以随时关闭:\n```java\nTimeRecorder.setDebug(false);\n```\n\n如果不想写开关，这里还预留了一种adb的方式打开关闭log的方法：\n```bash\n#开启\n$: adb shell setprop log.tag.time_recorder_log V\n#关闭\n$: adb shell setprop log.tag.time_recorder_log D\n```\n关于这种使用原理可参考: http://blog.csdn.net/qqxiaoqiang1573/article/details/72867776\n\n//未完\n\n## 代码\n```java\n\npublic class TimeRecorder {\n\n    private static final String TAG = \"Demo\";\n    /**\n     * release版下通过以下命令打印log，但是需要重启应用\n     * $: adb shell setprop log.tag.time_recorder_log V\n     * 关闭命令:\n     * $: adb shell setprop log.tag.time_recorder_log D\n     */\n    public static final String TIME_RECORDER_LOG = \"time_recorder_log\";\n    /**\n     * debug模式下打开log，但是如果放在library里面会失效，因为library编译的一直是release版\n     */\n    private static boolean ENABLED = BuildConfig.DEBUG ||\n            isPropertyEnabled(TIME_RECORDER_LOG);\n\n    private static long t1;\n    private static ArrayMap<String, Long> sTimeMap;\n    private static ArrayMap<String, CountValue> sNanoCountTimeMap;\n\n    public static boolean isPropertyEnabled(String propertyName) {\n        return Log.isLoggable(propertyName, Log.VERBOSE);\n    }\n\n    public static void setDebug(boolean debug){\n        ENABLED = debug;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    private static void logd(@NonNull String msg) {\n        //这里的TAG最好整个模块一个统一的\n        Log.d(\"APP\", msg);\n    }\n\n    /**\n     * 开始记录时间较短的耗时情况\n     *   调用方式为：\n     *      {@link #beginNanoCount(String)}开始计时 -> {@link #pauseNanoCount(String)} 暂停计时\n     *      以上重复调用\n     *      ->  {@link #endNanoCount(String, String)} 输出总耗时情况\n     *\n     * @param tag\n     */\n    public static void beginNanoCount(@NonNull String tag){\n        if(!ENABLED) return;\n        ensureNanoCountTimeMap();\n        CountValue countValue = sNanoCountTimeMap.get(tag);\n        if(countValue == null){\n            countValue = new CountValue();\n            sNanoCountTimeMap.put(tag, countValue);\n            countValue.eclipseTime = 0;\n            countValue.count = 0;\n        }\n        countValue.nanoTime = System.nanoTime();\n    }\n\n    /**\n     * 暂停计时\n     *   调用方式为：\n     *      {@link #beginNanoCount(String)}开始计时 -> {@link #pauseNanoCount(String)} 暂停计时\n     *      以上重复调用\n     *      ->  {@link #endNanoCount(String, String)} 输出总耗时情况\n     *\n     * @param tag\n     */\n    public static void pauseNanoCount(@NonNull String tag){\n        if(!ENABLED) return;\n        ensureNanoCountTimeMap();\n        CountValue countValue = sNanoCountTimeMap.get(tag);\n        if(countValue == null || countValue.nanoTime == 0){\n            return;\n        }\n        countValue.eclipseTime += System.nanoTime() - countValue.nanoTime;\n        countValue.nanoTime = 0;\n        countValue.count ++;\n    }\n\n    /**\n     * 输出耗时 {@link #endNanoCount(String, String)}\n     * @param tag\n     */\n    public static void endNanoCount(@NonNull String tag){\n        endNanoCount(tag, null);\n    }\n\n    /**\n     * 输出耗时\n     *   调用方式为：\n     *      {@link #beginNanoCount(String)}开始计时 -> {@link #pauseNanoCount(String)} 暂停计时\n     *      以上重复调用\n     *      ->  {@link #endNanoCount(String, String)} 输出总耗时情况\n     * @param tag\n     * @param call\n     */\n    public static void endNanoCount(@NonNull String tag,@Nullable String call){\n        if(!ENABLED) return;\n        ensureNanoCountTimeMap();\n        CountValue countValue = sNanoCountTimeMap.get(tag);\n        if(countValue == null || countValue.count <= 0){\n            return;\n        }\n        logd(TAG+\" \"+ tag +\" \"+ (call == null ? \"\" : call) +\n                \" time spent=\" + nanoToMillis(countValue.eclipseTime) +\n                \", count=\" + countValue.count + \", per time spent=\"\n                + nanoToMillis(countValue.eclipseTime / countValue.count)+\"ms\");\n        sNanoCountTimeMap.remove(tag);\n    }\n\n    public static long nanoToMillis(long nanoTime){\n        return nanoTime / 1000000L;\n    }\n\n    /**\n     * 开始记录时间，供临时开发调用\n     * 对应调用无参数的end或者一个参数的end\n     * {@link #end()}\n     */\n    public static void begin(){\n        if (ENABLED) {\n            t1 = currentTimeMillis();\n        }\n    }\n\n    public static long end(){\n        if (ENABLED) {\n            return currentTimeMillis() - t1;\n        }\n        return 0;\n    }\n\n\n    /**\n     * 开始记录时间\n     * 对应调用两个参数的end\n     * {@link #end(String, String)}\n     * @param tag : 记录时间的惟一标识\n     */\n    public static void begin(@NonNull String tag){\n        if (ENABLED) {\n            ensureTimeMap();\n            sTimeMap.put(tag, currentTimeMillis());\n        }\n    }\n\n    /**\n     * 输出耗时\n     *  {@link #begin(String)}\n     * @param tag\n     */\n    public static void end(@NonNull String tag){\n        end(tag, null);\n    }\n\n    /**\n     * 输出耗时\n     * {@link #begin(String)}\n     * @param tag  记录时间的惟一标识\n     * @param call :log输出内容,可以为空\n     */\n    public static void end(@NonNull String tag,@Nullable String call){\n        if (ENABLED) {\n            ensureTimeMap();\n            Long timeStamp = sTimeMap.get(tag);\n            if(timeStamp == null){\n                return;\n            }\n            logd(TAG + \" \"+tag +\" \"+ (call == null ? \"\" : call)\n                    + \" time spent=\"+(currentTimeMillis() - timeStamp)+\"ms\");\n            sTimeMap.remove(tag);\n        }\n    }\n\n    /**\n     * 记录时间,可考虑以后使用其它单位\n     * @return\n     */\n    private static long currentTimeMillis(){\n        return SystemClock.uptimeMillis();\n    }\n\n    private static void ensureTimeMap(){\n        if (ENABLED) {\n            if(sTimeMap == null){\n                sTimeMap = new ArrayMap<>();\n            }\n        }\n    }\n\n    private static void ensureNanoCountTimeMap(){\n        if(ENABLED){\n            if(sNanoCountTimeMap == null){\n                sNanoCountTimeMap = new ArrayMap<>();\n            }\n        }\n    }\n\n    private static class CountValue{\n        int count;\n        long nanoTime;\n        long eclipseTime;\n    }\n}\n```\n","slug":"TimeRecoder-写一个计算App性能耗时的工具类","published":1,"updated":"2018-03-27T14:06:24.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyq0ff0b000jzwv70nu0cx99","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>性能优化中经常会遇到要计算某个方法的耗时，通过一些工具如traceview的确可以分析大概的性能瓶颈，但是它们分析出的耗时大都是经过一定程度放大过的，要知道真正的耗时还是需要打印log<br>这里总结了一个工具类TimeRecoder，可以方便的打印耗时log<br>它主要做到三件事</p>\n<ol>\n<li>打印耗时</li>\n<li>方便开关</li>\n<li>计算多次操作的平均耗时<a id=\"more\"></a>\n使用很方便，直接在计算耗时点的前后加上begin和end即可如：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    TimeRecorder.begin(<span class=\"string\">\"MainActivity#onCreate\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    TimeRecorder.end(<span class=\"string\">\"MainActivity#onCreate\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中begin和end中的字符串是惟一标识，会在打印log时输出如：<br><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Demo MainActivity#onCreate  time spent=137ms</span><br></pre></td></tr></table></figure></p>\n<p>这些log代码可以留在release的代码中，可以随时关闭:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TimeRecorder.setDebug(<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure></p>\n<p>如果不想写开关，这里还预留了一种adb的方式打开关闭log的方法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#开启</span></span><br><span class=\"line\">$: adb shell setprop log.tag.time_recorder_log V</span><br><span class=\"line\"><span class=\"comment\">#关闭</span></span><br><span class=\"line\">$: adb shell setprop log.tag.time_recorder_log D</span><br></pre></td></tr></table></figure></p>\n<p>关于这种使用原理可参考: <a href=\"http://blog.csdn.net/qqxiaoqiang1573/article/details/72867776\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qqxiaoqiang1573/article/details/72867776</a></p>\n<p>//未完</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeRecorder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"Demo\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * release版下通过以下命令打印log，但是需要重启应用</span></span><br><span class=\"line\"><span class=\"comment\">     * $: adb shell setprop log.tag.time_recorder_log V</span></span><br><span class=\"line\"><span class=\"comment\">     * 关闭命令:</span></span><br><span class=\"line\"><span class=\"comment\">     * $: adb shell setprop log.tag.time_recorder_log D</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TIME_RECORDER_LOG = <span class=\"string\">\"time_recorder_log\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * debug模式下打开log，但是如果放在library里面会失效，因为library编译的一直是release版</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> ENABLED = BuildConfig.DEBUG ||</span><br><span class=\"line\">            isPropertyEnabled(TIME_RECORDER_LOG);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> t1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ArrayMap&lt;String, Long&gt; sTimeMap;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ArrayMap&lt;String, CountValue&gt; sNanoCountTimeMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPropertyEnabled</span><span class=\"params\">(String propertyName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Log.isLoggable(propertyName, Log.VERBOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setDebug</span><span class=\"params\">(<span class=\"keyword\">boolean</span> debug)</span></span>&#123;</span><br><span class=\"line\">        ENABLED = debug;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">logd</span><span class=\"params\">(@NonNull String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里的TAG最好整个模块一个统一的</span></span><br><span class=\"line\">        Log.d(<span class=\"string\">\"APP\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 开始记录时间较短的耗时情况</span></span><br><span class=\"line\"><span class=\"comment\">     *   调用方式为：</span></span><br><span class=\"line\"><span class=\"comment\">     *      &#123;<span class=\"doctag\">@link</span> #beginNanoCount(String)&#125;开始计时 -&gt; &#123;<span class=\"doctag\">@link</span> #pauseNanoCount(String)&#125; 暂停计时</span></span><br><span class=\"line\"><span class=\"comment\">     *      以上重复调用</span></span><br><span class=\"line\"><span class=\"comment\">     *      -&gt;  &#123;<span class=\"doctag\">@link</span> #endNanoCount(String, String)&#125; 输出总耗时情况</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> tag</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">beginNanoCount</span><span class=\"params\">(@NonNull String tag)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ENABLED) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        ensureNanoCountTimeMap();</span><br><span class=\"line\">        CountValue countValue = sNanoCountTimeMap.get(tag);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(countValue == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            countValue = <span class=\"keyword\">new</span> CountValue();</span><br><span class=\"line\">            sNanoCountTimeMap.put(tag, countValue);</span><br><span class=\"line\">            countValue.eclipseTime = <span class=\"number\">0</span>;</span><br><span class=\"line\">            countValue.count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        countValue.nanoTime = System.nanoTime();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停计时</span></span><br><span class=\"line\"><span class=\"comment\">     *   调用方式为：</span></span><br><span class=\"line\"><span class=\"comment\">     *      &#123;<span class=\"doctag\">@link</span> #beginNanoCount(String)&#125;开始计时 -&gt; &#123;<span class=\"doctag\">@link</span> #pauseNanoCount(String)&#125; 暂停计时</span></span><br><span class=\"line\"><span class=\"comment\">     *      以上重复调用</span></span><br><span class=\"line\"><span class=\"comment\">     *      -&gt;  &#123;<span class=\"doctag\">@link</span> #endNanoCount(String, String)&#125; 输出总耗时情况</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> tag</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">pauseNanoCount</span><span class=\"params\">(@NonNull String tag)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ENABLED) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        ensureNanoCountTimeMap();</span><br><span class=\"line\">        CountValue countValue = sNanoCountTimeMap.get(tag);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(countValue == <span class=\"keyword\">null</span> || countValue.nanoTime == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        countValue.eclipseTime += System.nanoTime() - countValue.nanoTime;</span><br><span class=\"line\">        countValue.nanoTime = <span class=\"number\">0</span>;</span><br><span class=\"line\">        countValue.count ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 输出耗时 &#123;<span class=\"doctag\">@link</span> #endNanoCount(String, String)&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> tag</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">endNanoCount</span><span class=\"params\">(@NonNull String tag)</span></span>&#123;</span><br><span class=\"line\">        endNanoCount(tag, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 输出耗时</span></span><br><span class=\"line\"><span class=\"comment\">     *   调用方式为：</span></span><br><span class=\"line\"><span class=\"comment\">     *      &#123;<span class=\"doctag\">@link</span> #beginNanoCount(String)&#125;开始计时 -&gt; &#123;<span class=\"doctag\">@link</span> #pauseNanoCount(String)&#125; 暂停计时</span></span><br><span class=\"line\"><span class=\"comment\">     *      以上重复调用</span></span><br><span class=\"line\"><span class=\"comment\">     *      -&gt;  &#123;<span class=\"doctag\">@link</span> #endNanoCount(String, String)&#125; 输出总耗时情况</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> tag</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> call</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">endNanoCount</span><span class=\"params\">(@NonNull String tag,@Nullable String call)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ENABLED) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        ensureNanoCountTimeMap();</span><br><span class=\"line\">        CountValue countValue = sNanoCountTimeMap.get(tag);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(countValue == <span class=\"keyword\">null</span> || countValue.count &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        logd(TAG+<span class=\"string\">\" \"</span>+ tag +<span class=\"string\">\" \"</span>+ (call == <span class=\"keyword\">null</span> ? <span class=\"string\">\"\"</span> : call) +</span><br><span class=\"line\">                <span class=\"string\">\" time spent=\"</span> + nanoToMillis(countValue.eclipseTime) +</span><br><span class=\"line\">                <span class=\"string\">\", count=\"</span> + countValue.count + <span class=\"string\">\", per time spent=\"</span></span><br><span class=\"line\">                + nanoToMillis(countValue.eclipseTime / countValue.count)+<span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">        sNanoCountTimeMap.remove(tag);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">nanoToMillis</span><span class=\"params\">(<span class=\"keyword\">long</span> nanoTime)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nanoTime / <span class=\"number\">1000000L</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 开始记录时间，供临时开发调用</span></span><br><span class=\"line\"><span class=\"comment\">     * 对应调用无参数的end或者一个参数的end</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #end()&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ENABLED) &#123;</span><br><span class=\"line\">            t1 = currentTimeMillis();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">end</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ENABLED) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> currentTimeMillis() - t1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 开始记录时间</span></span><br><span class=\"line\"><span class=\"comment\">     * 对应调用两个参数的end</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #end(String, String)&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> tag : 记录时间的惟一标识</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">(@NonNull String tag)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ENABLED) &#123;</span><br><span class=\"line\">            ensureTimeMap();</span><br><span class=\"line\">            sTimeMap.put(tag, currentTimeMillis());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 输出耗时</span></span><br><span class=\"line\"><span class=\"comment\">     *  &#123;<span class=\"doctag\">@link</span> #begin(String)&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> tag</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">end</span><span class=\"params\">(@NonNull String tag)</span></span>&#123;</span><br><span class=\"line\">        end(tag, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 输出耗时</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #begin(String)&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> tag  记录时间的惟一标识</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> call :log输出内容,可以为空</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">end</span><span class=\"params\">(@NonNull String tag,@Nullable String call)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ENABLED) &#123;</span><br><span class=\"line\">            ensureTimeMap();</span><br><span class=\"line\">            Long timeStamp = sTimeMap.get(tag);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(timeStamp == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            logd(TAG + <span class=\"string\">\" \"</span>+tag +<span class=\"string\">\" \"</span>+ (call == <span class=\"keyword\">null</span> ? <span class=\"string\">\"\"</span> : call)</span><br><span class=\"line\">                    + <span class=\"string\">\" time spent=\"</span>+(currentTimeMillis() - timeStamp)+<span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">            sTimeMap.remove(tag);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 记录时间,可考虑以后使用其它单位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">currentTimeMillis</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SystemClock.uptimeMillis();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureTimeMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ENABLED) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sTimeMap == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                sTimeMap = <span class=\"keyword\">new</span> ArrayMap&lt;&gt;();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureNanoCountTimeMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ENABLED)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sNanoCountTimeMap == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                sNanoCountTimeMap = <span class=\"keyword\">new</span> ArrayMap&lt;&gt;();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CountValue</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> nanoTime;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> eclipseTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>性能优化中经常会遇到要计算某个方法的耗时，通过一些工具如traceview的确可以分析大概的性能瓶颈，但是它们分析出的耗时大都是经过一定程度放大过的，要知道真正的耗时还是需要打印log<br>这里总结了一个工具类TimeRecoder，可以方便的打印耗时log<br>它主要做到三件事</p>\n<ol>\n<li>打印耗时</li>\n<li>方便开关</li>\n<li>计算多次操作的平均耗时","more":"使用很方便，直接在计算耗时点的前后加上begin和end即可如：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    TimeRecorder.begin(<span class=\"string\">\"MainActivity#onCreate\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    TimeRecorder.end(<span class=\"string\">\"MainActivity#onCreate\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中begin和end中的字符串是惟一标识，会在打印log时输出如：<br><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Demo MainActivity#onCreate  time spent=137ms</span><br></pre></td></tr></table></figure></p>\n<p>这些log代码可以留在release的代码中，可以随时关闭:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TimeRecorder.setDebug(<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure></p>\n<p>如果不想写开关，这里还预留了一种adb的方式打开关闭log的方法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#开启</span></span><br><span class=\"line\">$: adb shell setprop log.tag.time_recorder_log V</span><br><span class=\"line\"><span class=\"comment\">#关闭</span></span><br><span class=\"line\">$: adb shell setprop log.tag.time_recorder_log D</span><br></pre></td></tr></table></figure></p>\n<p>关于这种使用原理可参考: <a href=\"http://blog.csdn.net/qqxiaoqiang1573/article/details/72867776\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qqxiaoqiang1573/article/details/72867776</a></p>\n<p>//未完</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeRecorder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"Demo\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * release版下通过以下命令打印log，但是需要重启应用</span></span><br><span class=\"line\"><span class=\"comment\">     * $: adb shell setprop log.tag.time_recorder_log V</span></span><br><span class=\"line\"><span class=\"comment\">     * 关闭命令:</span></span><br><span class=\"line\"><span class=\"comment\">     * $: adb shell setprop log.tag.time_recorder_log D</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TIME_RECORDER_LOG = <span class=\"string\">\"time_recorder_log\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * debug模式下打开log，但是如果放在library里面会失效，因为library编译的一直是release版</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> ENABLED = BuildConfig.DEBUG ||</span><br><span class=\"line\">            isPropertyEnabled(TIME_RECORDER_LOG);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> t1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ArrayMap&lt;String, Long&gt; sTimeMap;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ArrayMap&lt;String, CountValue&gt; sNanoCountTimeMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPropertyEnabled</span><span class=\"params\">(String propertyName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Log.isLoggable(propertyName, Log.VERBOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setDebug</span><span class=\"params\">(<span class=\"keyword\">boolean</span> debug)</span></span>&#123;</span><br><span class=\"line\">        ENABLED = debug;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">logd</span><span class=\"params\">(@NonNull String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里的TAG最好整个模块一个统一的</span></span><br><span class=\"line\">        Log.d(<span class=\"string\">\"APP\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 开始记录时间较短的耗时情况</span></span><br><span class=\"line\"><span class=\"comment\">     *   调用方式为：</span></span><br><span class=\"line\"><span class=\"comment\">     *      &#123;<span class=\"doctag\">@link</span> #beginNanoCount(String)&#125;开始计时 -&gt; &#123;<span class=\"doctag\">@link</span> #pauseNanoCount(String)&#125; 暂停计时</span></span><br><span class=\"line\"><span class=\"comment\">     *      以上重复调用</span></span><br><span class=\"line\"><span class=\"comment\">     *      -&gt;  &#123;<span class=\"doctag\">@link</span> #endNanoCount(String, String)&#125; 输出总耗时情况</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> tag</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">beginNanoCount</span><span class=\"params\">(@NonNull String tag)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ENABLED) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        ensureNanoCountTimeMap();</span><br><span class=\"line\">        CountValue countValue = sNanoCountTimeMap.get(tag);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(countValue == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            countValue = <span class=\"keyword\">new</span> CountValue();</span><br><span class=\"line\">            sNanoCountTimeMap.put(tag, countValue);</span><br><span class=\"line\">            countValue.eclipseTime = <span class=\"number\">0</span>;</span><br><span class=\"line\">            countValue.count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        countValue.nanoTime = System.nanoTime();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停计时</span></span><br><span class=\"line\"><span class=\"comment\">     *   调用方式为：</span></span><br><span class=\"line\"><span class=\"comment\">     *      &#123;<span class=\"doctag\">@link</span> #beginNanoCount(String)&#125;开始计时 -&gt; &#123;<span class=\"doctag\">@link</span> #pauseNanoCount(String)&#125; 暂停计时</span></span><br><span class=\"line\"><span class=\"comment\">     *      以上重复调用</span></span><br><span class=\"line\"><span class=\"comment\">     *      -&gt;  &#123;<span class=\"doctag\">@link</span> #endNanoCount(String, String)&#125; 输出总耗时情况</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> tag</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">pauseNanoCount</span><span class=\"params\">(@NonNull String tag)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ENABLED) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        ensureNanoCountTimeMap();</span><br><span class=\"line\">        CountValue countValue = sNanoCountTimeMap.get(tag);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(countValue == <span class=\"keyword\">null</span> || countValue.nanoTime == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        countValue.eclipseTime += System.nanoTime() - countValue.nanoTime;</span><br><span class=\"line\">        countValue.nanoTime = <span class=\"number\">0</span>;</span><br><span class=\"line\">        countValue.count ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 输出耗时 &#123;<span class=\"doctag\">@link</span> #endNanoCount(String, String)&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> tag</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">endNanoCount</span><span class=\"params\">(@NonNull String tag)</span></span>&#123;</span><br><span class=\"line\">        endNanoCount(tag, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 输出耗时</span></span><br><span class=\"line\"><span class=\"comment\">     *   调用方式为：</span></span><br><span class=\"line\"><span class=\"comment\">     *      &#123;<span class=\"doctag\">@link</span> #beginNanoCount(String)&#125;开始计时 -&gt; &#123;<span class=\"doctag\">@link</span> #pauseNanoCount(String)&#125; 暂停计时</span></span><br><span class=\"line\"><span class=\"comment\">     *      以上重复调用</span></span><br><span class=\"line\"><span class=\"comment\">     *      -&gt;  &#123;<span class=\"doctag\">@link</span> #endNanoCount(String, String)&#125; 输出总耗时情况</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> tag</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> call</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">endNanoCount</span><span class=\"params\">(@NonNull String tag,@Nullable String call)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ENABLED) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        ensureNanoCountTimeMap();</span><br><span class=\"line\">        CountValue countValue = sNanoCountTimeMap.get(tag);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(countValue == <span class=\"keyword\">null</span> || countValue.count &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        logd(TAG+<span class=\"string\">\" \"</span>+ tag +<span class=\"string\">\" \"</span>+ (call == <span class=\"keyword\">null</span> ? <span class=\"string\">\"\"</span> : call) +</span><br><span class=\"line\">                <span class=\"string\">\" time spent=\"</span> + nanoToMillis(countValue.eclipseTime) +</span><br><span class=\"line\">                <span class=\"string\">\", count=\"</span> + countValue.count + <span class=\"string\">\", per time spent=\"</span></span><br><span class=\"line\">                + nanoToMillis(countValue.eclipseTime / countValue.count)+<span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">        sNanoCountTimeMap.remove(tag);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">nanoToMillis</span><span class=\"params\">(<span class=\"keyword\">long</span> nanoTime)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nanoTime / <span class=\"number\">1000000L</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 开始记录时间，供临时开发调用</span></span><br><span class=\"line\"><span class=\"comment\">     * 对应调用无参数的end或者一个参数的end</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #end()&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ENABLED) &#123;</span><br><span class=\"line\">            t1 = currentTimeMillis();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">end</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ENABLED) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> currentTimeMillis() - t1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 开始记录时间</span></span><br><span class=\"line\"><span class=\"comment\">     * 对应调用两个参数的end</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #end(String, String)&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> tag : 记录时间的惟一标识</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">begin</span><span class=\"params\">(@NonNull String tag)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ENABLED) &#123;</span><br><span class=\"line\">            ensureTimeMap();</span><br><span class=\"line\">            sTimeMap.put(tag, currentTimeMillis());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 输出耗时</span></span><br><span class=\"line\"><span class=\"comment\">     *  &#123;<span class=\"doctag\">@link</span> #begin(String)&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> tag</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">end</span><span class=\"params\">(@NonNull String tag)</span></span>&#123;</span><br><span class=\"line\">        end(tag, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 输出耗时</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #begin(String)&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> tag  记录时间的惟一标识</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> call :log输出内容,可以为空</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">end</span><span class=\"params\">(@NonNull String tag,@Nullable String call)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ENABLED) &#123;</span><br><span class=\"line\">            ensureTimeMap();</span><br><span class=\"line\">            Long timeStamp = sTimeMap.get(tag);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(timeStamp == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            logd(TAG + <span class=\"string\">\" \"</span>+tag +<span class=\"string\">\" \"</span>+ (call == <span class=\"keyword\">null</span> ? <span class=\"string\">\"\"</span> : call)</span><br><span class=\"line\">                    + <span class=\"string\">\" time spent=\"</span>+(currentTimeMillis() - timeStamp)+<span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">            sTimeMap.remove(tag);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 记录时间,可考虑以后使用其它单位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">currentTimeMillis</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SystemClock.uptimeMillis();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureTimeMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ENABLED) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sTimeMap == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                sTimeMap = <span class=\"keyword\">new</span> ArrayMap&lt;&gt;();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureNanoCountTimeMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ENABLED)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sNanoCountTimeMap == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                sNanoCountTimeMap = <span class=\"keyword\">new</span> ArrayMap&lt;&gt;();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CountValue</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> nanoTime;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> eclipseTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Gradle统一依赖","date":"2018-03-11T08:21:32.000Z","_content":"\n## 在工程根目录下创建config.gradle文件\n\n```gradle\n//定义support包的版本号\ndef supportVersion = \"27.1.0\"\n\next{\n    //定义各版本号\n    configs = [\n            compileSdkVersion: 27,\n            buildToolsVersion: \"25.0.2\",\n            miniSdkVersion: 17,\n            targetSdkVersion: 27\n    ]\n\n    libraries = [\n            appcompat           : \"com.android.support:appcompat-v7:${supportVersion}\",\n            cardview            : \"com.android.support:cardview-v7:${supportVersion}\",\n            recyclerview        : \"com.android.support:recyclerview-v7:${supportVersion}\",\n            preference          : \"com.android.support:preference-v7:${supportVersion}\",\n            supportv4           : \"com.android.support:support-v4:${supportVersion}\",\n            design              : \"com.android.support:design:${supportVersion}\",\n            palette             : \"com.android.support:palette-v7:${supportVersion}\",\n            constraintLayout    : \"com.android.support.constraint:constraint-layout:1.0.2\",\n\n            okhttp3             : \"com.squareup.okhttp3:okhttp:3.10.0\",\n            okhttp3Logging      : \"com.squareup.okhttp3:logging-interceptor:3.10.0\",\n            gson                : \"com.google.code.gson:gson:2.8.2\",\n            retrofit            : \"com.squareup.retrofit2:retrofit:2.4.0\",\n            converterGson       : \"com.squareup.retrofit2:converter-gson:2.4.0\",\n            adapterRxjava       : \"com.squareup.retrofit2:adapter-rxjava2:2.4.0\",\n\n            glide               : \"com.github.bumptech.glide:glide:3.7.0\",\n            rxjava              : \"io.reactivex.rxjava2:rxjava:2.1.9\",\n            rxandroid           : \"io.reactivex.rxjava2:rxandroid:2.0.2\",\n            fastjson            : \"com.alibaba:fastjson:1.2.17\",\n            stetho              : \"com.facebook.stetho:stetho:1.3.1\",\n            stethoOkhttp3       : \"com.facebook.stetho:stetho-okhttp3:1.3.1\",\n\n            rxlifecycleComponents:\"com.trello.rxlifecycle2:rxlifecycle-components:2.2.1\",\n\n            butterknife         : \"com.jakewharton:butterknife:8.6.0\",\n            butterknifeCompiler : \"com.jakewharton:butterknife-compiler:8.6.0\",\n\n            slidr               : \"com.r0adkll:slidableactivity:2.0.6\",\n            eventbus            : \"org.greenrobot:eventbus:3.1.1\",\n            eventbusCompiler    : \"org.greenrobot:eventbus-annotation-processor:3.1.1\",\n\n            junit               : \"junit:junit:4.12\"\n    ]\n}\n```\n<!--more-->\n## 在根目录下的`build.gradle`文件顶部添加:\n\n```gradle\napply from: \"config.gradle\"\n```\n\n## 在各模块的`build.gradle`添加\n\n```gradle\n\nandroid {\n    compileSdkVersion configs.compileSdkVersion\n    buildToolsVersion configs.buildToolsVersion\n\n    defaultConfig {\n\t\t//省略其它配置\n        minSdkVersion configs.miniSdkVersion\n        targetSdkVersion configs.targetSdkVersion\n    }\n}\n```\n\n依赖添加:\n\n```gradle\ndependencies {\n    //support相关包\n    compile libraries.appcompat\n    compile libraries.design\n    compile libraries.cardview\n    compile libraries.recyclerview\n    compile libraries.preference\n    compile libraries.constraintLayout\n    compile libraries.palette\n\n    //rx\n    compile libraries.rxjava\n    compile libraries.rxandroid\n\n    //okhttp\n    compile libraries.okhttp3\n\n    //retrofit\n    compile libraries.retrofit\n    compile libraries.retrofitRxjava\n\n    //gson\n    compile libraries.gson\n    compile libraries.converterGson\n    //glide\n    compile libraries.glide\n\n    compile libraries.fastjson\n\n    //stetho调试时使用\n    compile libraries.stetho\n    compile libraries.stethoOkhttp3\n\n\n    //butterknife引用\n    compile libraries.butterknife\n    annotationProcessor libraries.butterknifeCompiler\n    \n    //eventBus\n    implementation libraries.eventbus\n    annotationProcessor           libraries.eventbusCompiler\n\n}\n```","source":"_posts/Gradle统一依赖.md","raw":"---\ntitle: Gradle统一依赖\ndate: 2018-03-11 16:21:32\ntags: Gradle\n---\n\n## 在工程根目录下创建config.gradle文件\n\n```gradle\n//定义support包的版本号\ndef supportVersion = \"27.1.0\"\n\next{\n    //定义各版本号\n    configs = [\n            compileSdkVersion: 27,\n            buildToolsVersion: \"25.0.2\",\n            miniSdkVersion: 17,\n            targetSdkVersion: 27\n    ]\n\n    libraries = [\n            appcompat           : \"com.android.support:appcompat-v7:${supportVersion}\",\n            cardview            : \"com.android.support:cardview-v7:${supportVersion}\",\n            recyclerview        : \"com.android.support:recyclerview-v7:${supportVersion}\",\n            preference          : \"com.android.support:preference-v7:${supportVersion}\",\n            supportv4           : \"com.android.support:support-v4:${supportVersion}\",\n            design              : \"com.android.support:design:${supportVersion}\",\n            palette             : \"com.android.support:palette-v7:${supportVersion}\",\n            constraintLayout    : \"com.android.support.constraint:constraint-layout:1.0.2\",\n\n            okhttp3             : \"com.squareup.okhttp3:okhttp:3.10.0\",\n            okhttp3Logging      : \"com.squareup.okhttp3:logging-interceptor:3.10.0\",\n            gson                : \"com.google.code.gson:gson:2.8.2\",\n            retrofit            : \"com.squareup.retrofit2:retrofit:2.4.0\",\n            converterGson       : \"com.squareup.retrofit2:converter-gson:2.4.0\",\n            adapterRxjava       : \"com.squareup.retrofit2:adapter-rxjava2:2.4.0\",\n\n            glide               : \"com.github.bumptech.glide:glide:3.7.0\",\n            rxjava              : \"io.reactivex.rxjava2:rxjava:2.1.9\",\n            rxandroid           : \"io.reactivex.rxjava2:rxandroid:2.0.2\",\n            fastjson            : \"com.alibaba:fastjson:1.2.17\",\n            stetho              : \"com.facebook.stetho:stetho:1.3.1\",\n            stethoOkhttp3       : \"com.facebook.stetho:stetho-okhttp3:1.3.1\",\n\n            rxlifecycleComponents:\"com.trello.rxlifecycle2:rxlifecycle-components:2.2.1\",\n\n            butterknife         : \"com.jakewharton:butterknife:8.6.0\",\n            butterknifeCompiler : \"com.jakewharton:butterknife-compiler:8.6.0\",\n\n            slidr               : \"com.r0adkll:slidableactivity:2.0.6\",\n            eventbus            : \"org.greenrobot:eventbus:3.1.1\",\n            eventbusCompiler    : \"org.greenrobot:eventbus-annotation-processor:3.1.1\",\n\n            junit               : \"junit:junit:4.12\"\n    ]\n}\n```\n<!--more-->\n## 在根目录下的`build.gradle`文件顶部添加:\n\n```gradle\napply from: \"config.gradle\"\n```\n\n## 在各模块的`build.gradle`添加\n\n```gradle\n\nandroid {\n    compileSdkVersion configs.compileSdkVersion\n    buildToolsVersion configs.buildToolsVersion\n\n    defaultConfig {\n\t\t//省略其它配置\n        minSdkVersion configs.miniSdkVersion\n        targetSdkVersion configs.targetSdkVersion\n    }\n}\n```\n\n依赖添加:\n\n```gradle\ndependencies {\n    //support相关包\n    compile libraries.appcompat\n    compile libraries.design\n    compile libraries.cardview\n    compile libraries.recyclerview\n    compile libraries.preference\n    compile libraries.constraintLayout\n    compile libraries.palette\n\n    //rx\n    compile libraries.rxjava\n    compile libraries.rxandroid\n\n    //okhttp\n    compile libraries.okhttp3\n\n    //retrofit\n    compile libraries.retrofit\n    compile libraries.retrofitRxjava\n\n    //gson\n    compile libraries.gson\n    compile libraries.converterGson\n    //glide\n    compile libraries.glide\n\n    compile libraries.fastjson\n\n    //stetho调试时使用\n    compile libraries.stetho\n    compile libraries.stethoOkhttp3\n\n\n    //butterknife引用\n    compile libraries.butterknife\n    annotationProcessor libraries.butterknifeCompiler\n    \n    //eventBus\n    implementation libraries.eventbus\n    annotationProcessor           libraries.eventbusCompiler\n\n}\n```","slug":"Gradle统一依赖","published":1,"updated":"2018-03-30T17:14:05.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyq0ff0e000mzwv7gow2ip27","content":"<h2 id=\"在工程根目录下创建config-gradle文件\"><a href=\"#在工程根目录下创建config-gradle文件\" class=\"headerlink\" title=\"在工程根目录下创建config.gradle文件\"></a>在工程根目录下创建config.gradle文件</h2><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义support包的版本号</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> supportVersion = <span class=\"string\">\"27.1.0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">ext&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义各版本号</span></span><br><span class=\"line\">    configs = [</span><br><span class=\"line\">            compileSdkVersion: <span class=\"number\">27</span>,</span><br><span class=\"line\">            buildToolsVersion: <span class=\"string\">\"25.0.2\"</span>,</span><br><span class=\"line\">            miniSdkVersion: <span class=\"number\">17</span>,</span><br><span class=\"line\">            targetSdkVersion: <span class=\"number\">27</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">    libraries = [</span><br><span class=\"line\">            appcompat           : <span class=\"string\">\"com.android.support:appcompat-v7:$&#123;supportVersion&#125;\"</span>,</span><br><span class=\"line\">            cardview            : <span class=\"string\">\"com.android.support:cardview-v7:$&#123;supportVersion&#125;\"</span>,</span><br><span class=\"line\">            recyclerview        : <span class=\"string\">\"com.android.support:recyclerview-v7:$&#123;supportVersion&#125;\"</span>,</span><br><span class=\"line\">            preference          : <span class=\"string\">\"com.android.support:preference-v7:$&#123;supportVersion&#125;\"</span>,</span><br><span class=\"line\">            supportv4           : <span class=\"string\">\"com.android.support:support-v4:$&#123;supportVersion&#125;\"</span>,</span><br><span class=\"line\">            design              : <span class=\"string\">\"com.android.support:design:$&#123;supportVersion&#125;\"</span>,</span><br><span class=\"line\">            palette             : <span class=\"string\">\"com.android.support:palette-v7:$&#123;supportVersion&#125;\"</span>,</span><br><span class=\"line\">            constraintLayout    : <span class=\"string\">\"com.android.support.constraint:constraint-layout:1.0.2\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            okhttp3             : <span class=\"string\">\"com.squareup.okhttp3:okhttp:3.10.0\"</span>,</span><br><span class=\"line\">            okhttp3Logging      : <span class=\"string\">\"com.squareup.okhttp3:logging-interceptor:3.10.0\"</span>,</span><br><span class=\"line\">            gson                : <span class=\"string\">\"com.google.code.gson:gson:2.8.2\"</span>,</span><br><span class=\"line\">            retrofit            : <span class=\"string\">\"com.squareup.retrofit2:retrofit:2.4.0\"</span>,</span><br><span class=\"line\">            converterGson       : <span class=\"string\">\"com.squareup.retrofit2:converter-gson:2.4.0\"</span>,</span><br><span class=\"line\">            adapterRxjava       : <span class=\"string\">\"com.squareup.retrofit2:adapter-rxjava2:2.4.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            glide               : <span class=\"string\">\"com.github.bumptech.glide:glide:3.7.0\"</span>,</span><br><span class=\"line\">            rxjava              : <span class=\"string\">\"io.reactivex.rxjava2:rxjava:2.1.9\"</span>,</span><br><span class=\"line\">            rxandroid           : <span class=\"string\">\"io.reactivex.rxjava2:rxandroid:2.0.2\"</span>,</span><br><span class=\"line\">            fastjson            : <span class=\"string\">\"com.alibaba:fastjson:1.2.17\"</span>,</span><br><span class=\"line\">            stetho              : <span class=\"string\">\"com.facebook.stetho:stetho:1.3.1\"</span>,</span><br><span class=\"line\">            stethoOkhttp3       : <span class=\"string\">\"com.facebook.stetho:stetho-okhttp3:1.3.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            rxlifecycleComponents:<span class=\"string\">\"com.trello.rxlifecycle2:rxlifecycle-components:2.2.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            butterknife         : <span class=\"string\">\"com.jakewharton:butterknife:8.6.0\"</span>,</span><br><span class=\"line\">            butterknifeCompiler : <span class=\"string\">\"com.jakewharton:butterknife-compiler:8.6.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            slidr               : <span class=\"string\">\"com.r0adkll:slidableactivity:2.0.6\"</span>,</span><br><span class=\"line\">            eventbus            : <span class=\"string\">\"org.greenrobot:eventbus:3.1.1\"</span>,</span><br><span class=\"line\">            eventbusCompiler    : <span class=\"string\">\"org.greenrobot:eventbus-annotation-processor:3.1.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            junit               : <span class=\"string\">\"junit:junit:4.12\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"在根目录下的build-gradle文件顶部添加\"><a href=\"#在根目录下的build-gradle文件顶部添加\" class=\"headerlink\" title=\"在根目录下的build.gradle文件顶部添加:\"></a>在根目录下的<code>build.gradle</code>文件顶部添加:</h2><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"keyword\">from</span>: <span class=\"string\">\"config.gradle\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"在各模块的build-gradle添加\"><a href=\"#在各模块的build-gradle添加\" class=\"headerlink\" title=\"在各模块的build.gradle添加\"></a>在各模块的<code>build.gradle</code>添加</h2><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion configs.compileSdkVersion</span><br><span class=\"line\">    buildToolsVersion configs.buildToolsVersion</span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//省略其它配置</span></span><br><span class=\"line\">        minSdkVersion configs.miniSdkVersion</span><br><span class=\"line\">        targetSdkVersion configs.targetSdkVersion</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>依赖添加:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//support相关包</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.appcompat</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.design</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.cardview</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.recyclerview</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.preference</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.constraintLayout</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.palette</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//rx</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.rxjava</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.rxandroid</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//okhttp</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.okhttp3</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//retrofit</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.retrofit</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.retrofitRxjava</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//gson</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.gson</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.converterGson</span><br><span class=\"line\">    <span class=\"comment\">//glide</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.glide</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.fastjson</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//stetho调试时使用</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.stetho</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.stethoOkhttp3</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//butterknife引用</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.butterknife</span><br><span class=\"line\">    annotationProcessor libraries.butterknifeCompiler</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//eventBus</span></span><br><span class=\"line\">    implementation libraries.eventbus</span><br><span class=\"line\">    annotationProcessor           libraries.eventbusCompiler</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"在工程根目录下创建config-gradle文件\"><a href=\"#在工程根目录下创建config-gradle文件\" class=\"headerlink\" title=\"在工程根目录下创建config.gradle文件\"></a>在工程根目录下创建config.gradle文件</h2><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义support包的版本号</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> supportVersion = <span class=\"string\">\"27.1.0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">ext&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义各版本号</span></span><br><span class=\"line\">    configs = [</span><br><span class=\"line\">            compileSdkVersion: <span class=\"number\">27</span>,</span><br><span class=\"line\">            buildToolsVersion: <span class=\"string\">\"25.0.2\"</span>,</span><br><span class=\"line\">            miniSdkVersion: <span class=\"number\">17</span>,</span><br><span class=\"line\">            targetSdkVersion: <span class=\"number\">27</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">    libraries = [</span><br><span class=\"line\">            appcompat           : <span class=\"string\">\"com.android.support:appcompat-v7:$&#123;supportVersion&#125;\"</span>,</span><br><span class=\"line\">            cardview            : <span class=\"string\">\"com.android.support:cardview-v7:$&#123;supportVersion&#125;\"</span>,</span><br><span class=\"line\">            recyclerview        : <span class=\"string\">\"com.android.support:recyclerview-v7:$&#123;supportVersion&#125;\"</span>,</span><br><span class=\"line\">            preference          : <span class=\"string\">\"com.android.support:preference-v7:$&#123;supportVersion&#125;\"</span>,</span><br><span class=\"line\">            supportv4           : <span class=\"string\">\"com.android.support:support-v4:$&#123;supportVersion&#125;\"</span>,</span><br><span class=\"line\">            design              : <span class=\"string\">\"com.android.support:design:$&#123;supportVersion&#125;\"</span>,</span><br><span class=\"line\">            palette             : <span class=\"string\">\"com.android.support:palette-v7:$&#123;supportVersion&#125;\"</span>,</span><br><span class=\"line\">            constraintLayout    : <span class=\"string\">\"com.android.support.constraint:constraint-layout:1.0.2\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            okhttp3             : <span class=\"string\">\"com.squareup.okhttp3:okhttp:3.10.0\"</span>,</span><br><span class=\"line\">            okhttp3Logging      : <span class=\"string\">\"com.squareup.okhttp3:logging-interceptor:3.10.0\"</span>,</span><br><span class=\"line\">            gson                : <span class=\"string\">\"com.google.code.gson:gson:2.8.2\"</span>,</span><br><span class=\"line\">            retrofit            : <span class=\"string\">\"com.squareup.retrofit2:retrofit:2.4.0\"</span>,</span><br><span class=\"line\">            converterGson       : <span class=\"string\">\"com.squareup.retrofit2:converter-gson:2.4.0\"</span>,</span><br><span class=\"line\">            adapterRxjava       : <span class=\"string\">\"com.squareup.retrofit2:adapter-rxjava2:2.4.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            glide               : <span class=\"string\">\"com.github.bumptech.glide:glide:3.7.0\"</span>,</span><br><span class=\"line\">            rxjava              : <span class=\"string\">\"io.reactivex.rxjava2:rxjava:2.1.9\"</span>,</span><br><span class=\"line\">            rxandroid           : <span class=\"string\">\"io.reactivex.rxjava2:rxandroid:2.0.2\"</span>,</span><br><span class=\"line\">            fastjson            : <span class=\"string\">\"com.alibaba:fastjson:1.2.17\"</span>,</span><br><span class=\"line\">            stetho              : <span class=\"string\">\"com.facebook.stetho:stetho:1.3.1\"</span>,</span><br><span class=\"line\">            stethoOkhttp3       : <span class=\"string\">\"com.facebook.stetho:stetho-okhttp3:1.3.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            rxlifecycleComponents:<span class=\"string\">\"com.trello.rxlifecycle2:rxlifecycle-components:2.2.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            butterknife         : <span class=\"string\">\"com.jakewharton:butterknife:8.6.0\"</span>,</span><br><span class=\"line\">            butterknifeCompiler : <span class=\"string\">\"com.jakewharton:butterknife-compiler:8.6.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            slidr               : <span class=\"string\">\"com.r0adkll:slidableactivity:2.0.6\"</span>,</span><br><span class=\"line\">            eventbus            : <span class=\"string\">\"org.greenrobot:eventbus:3.1.1\"</span>,</span><br><span class=\"line\">            eventbusCompiler    : <span class=\"string\">\"org.greenrobot:eventbus-annotation-processor:3.1.1\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            junit               : <span class=\"string\">\"junit:junit:4.12\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"在根目录下的build-gradle文件顶部添加\"><a href=\"#在根目录下的build-gradle文件顶部添加\" class=\"headerlink\" title=\"在根目录下的build.gradle文件顶部添加:\"></a>在根目录下的<code>build.gradle</code>文件顶部添加:</h2><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"keyword\">from</span>: <span class=\"string\">\"config.gradle\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"在各模块的build-gradle添加\"><a href=\"#在各模块的build-gradle添加\" class=\"headerlink\" title=\"在各模块的build.gradle添加\"></a>在各模块的<code>build.gradle</code>添加</h2><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion configs.compileSdkVersion</span><br><span class=\"line\">    buildToolsVersion configs.buildToolsVersion</span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//省略其它配置</span></span><br><span class=\"line\">        minSdkVersion configs.miniSdkVersion</span><br><span class=\"line\">        targetSdkVersion configs.targetSdkVersion</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>依赖添加:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//support相关包</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.appcompat</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.design</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.cardview</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.recyclerview</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.preference</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.constraintLayout</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.palette</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//rx</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.rxjava</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.rxandroid</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//okhttp</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.okhttp3</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//retrofit</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.retrofit</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.retrofitRxjava</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//gson</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.gson</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.converterGson</span><br><span class=\"line\">    <span class=\"comment\">//glide</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.glide</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.fastjson</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//stetho调试时使用</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.stetho</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.stethoOkhttp3</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//butterknife引用</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> libraries.butterknife</span><br><span class=\"line\">    annotationProcessor libraries.butterknifeCompiler</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//eventBus</span></span><br><span class=\"line\">    implementation libraries.eventbus</span><br><span class=\"line\">    annotationProcessor           libraries.eventbusCompiler</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"python基础","date":"2018-03-21T13:04:19.000Z","_content":"\n\n## 参考\n>- [Python教程 - 廖雪峰的官方网站][1]\n>- [ python3-cookbook][2]\n>- 中文教程及自动化测试介绍https://my.oschina.net/u/1433482/blog/634218?fromerr=oGg6OFhY\n\n\n<!--more-->\n**Python的设计哲学是“优雅”、“明确”、“简单”**\n> Python开发者的哲学是“用一种方法，最好是只有一种方法来做一件事”\n\n**安装**\n> Python有两个版本，一个是2.x版，一个是3.x版，这两个版本是不兼容的\n> Python的官方网站下载Python 3.5对应的[64位安装程序][3]或[32位安装程序][4]\n>特别要注意勾上`Add Python 3.5 to PATH`，然后点“`Install Now`”即可完成安装\n\n安装两个版本的python：\n\n```bash\n# 使用默认版本的Python\npy\n# 使用Python 27\npy -2\n# 使用Python 35\npy -3\n```\npip命令\n\n```bash\npy -m pip install itchat\n# 指定特定版本的pip\npy -3 -m pip install itchat\n```\n\n## 基础\n\n基本语法\n\n- `#`开头的语句是注释\n- 冒号`:`结尾时，缩进的语句视为代码块，建议**4个空格**的缩进\n- **大小写敏感**\n- 文件头标注\n```python\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n```\n\n方法\n\n- 输出`print('The quick brown fox', 'jumps over', 'the lazy dog')`\n- 输入`name = input('please enter your name: ')`\n- Python允许用`'''...'''`的格式表示多行内容\n```python\nprint('''line1\nline2\nline3''')\n```\n\n### 数据类型\n\n - 整数\n - 浮点数   可以使用科学计数法，如1.23x10<sup>9</sup>就是`1.23e9`\n - 字符串\n - 布尔值   只有`True`、`False`两种值(注意**大小写**)   布尔值可以用`and`、`or`和`not`运算\n - 空值     `None` 不是0\n - 两种除法 `/`除法计算结果是浮点数(即使是两个整数恰好整除) `//`称为地板除，两个整数的除法仍然是整数\n\n### Python的字符串  \n\n - 字符串是以Unicode编码的\n - `ord()`函数获取字符的整数表示，`chr()`函数把编码转换为对应的字符\n - `encode()`方法可以编码为指定的`bytes`，`decode()`把`bytes`变为`str`\n```python\n>>> '中文'.encode('utf-8')\nb'\\xe4\\xb8\\xad\\xe6\\x96\\x87'\n\n>>> b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'.decode('utf-8')\n'中文'\n```\n- 要计算str包含多少个**字符**，可以用`len()`函数,要查看字节数可结合encode\n- Python中，采用的格式化方式和C语言是一致的，用`%`实现，举例如下：\n```python\n>>> '%2d-%02d' % (3, 1)\n' 3-01'\n```\n\n\n### 定义函数\n\n- `def`语句，依次写出函数名、括号、括号中的参数和冒号:\n- 如果你已经把`my_abs()`的函数定义保存为`abstest.py`文件了，那么，可以在该文件的当前目录下启动Python解释器，用f`rom abstest import my_abs`来导入`my_abs()`函数，注意`abstest`是文件名（不含`.py`扩展名）\n```python\ndef my_abs(x):\n    if x >= 0:\n        return x\n    else:\n        return -x\n```\n- `import`用来导入包，如`import math`语句表示导入math包\n- 函数可以快返回*多个值*\n```python\nimport math\n\ndef move(x, y, step, angle=0):\n    nx = x + step * math.cos(angle)\n    ny = y - step * math.sin(angle)\n    return nx, ny\n```\n- 可以传入默认参数，类似php,注意默认参数要为**不可变对象**\n```python\ndef power(x, n=2):\n    s = 1\n    while n > 0:\n        n = n - 1\n        s = s * x\n    return s\n```\n- `*args`是可变参数，`args`接收的是一个`tuple`；`**kw`是关键字参数，`kw`接收的是一个dict。\n>**可变参数**既可以直接传入`func(1,2,3)`，又可以先组装list或tuple，再通过`*args`传入：`func(*(1, 2, 3))`； \n>**关键字参**数既可以直接传入：`func(a=1,b=2)`，又可以先组装`dict`，再通过`**kw`传入：`func(**{'a': 1, 'b': 2})`。\n\n**高级特性**\n\n切片（Slice）  \n- **`L[0:3]`**表示，从索引0开始取，直到索引3为止，但不包括索引3\n- **`L[-2,0]`**表示倒数\n- `list`,`tuple`,字符串者可以切片\n\n列表生成式\n- 要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来\n```python\n>>> [x * x for x in range(1, 11)]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n#全排列\n>>> [m + n for m in 'ABC' for n in 'XYZ']\n['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']\n```\n- `isinstance`函数可以判断一个变量是不是字符串，如 `isinstance(x, str)`\n\n**安装第三方模块**\n必须先知道该库的名称，可以在官网或者pypi上搜索,例如`pip install Pillow` 处理图片\n\n**面向对象的编程**\n\n```python\nclass Student(object): #表示Student类继承objec类\n    def __init__(self, name, score): #实例化类方法，第一个参数永远是self，表示实例自己\n        self.name = name\n        self.score = score\n    def print_score(self): //第一个参数必需是self，调用时不用传入\n        print('%s: %s' % (self.name, self.score))\n```\n```python\nbart = Student('Bart Simpson', 59)\nlisa = Student('Lisa Simpson', 87)\nbart.print_score()\nlisa.print_score()\n```\n\n>- class后面紧接着是类名，即Student，类名通常是大写开头的单词，紧接着是`(object)`，表示该类是从哪个类**继承**下来的\n>- `__init__` 方法用来创建实例,第一个参数永远是**`self`**，表示创建的实例本身，注意是两个下划线`\"__\"`\n>- 和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量`self`，并且，调用时，不用传递该参数\n\n- 如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线`__`，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（`private`），只有内部可以访问，外部不能访问\n- 在Python中，变量名类似`__xxx__`的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是`private`变量，所以，不能用`__name__`、`__score__`这样的变量名。\n\n------------------------------\n## 三方模块\n\n\n### pip\n\n**修pip改镜像**\n在unix和macos，创建配置文件路径为：`$HOME/.pip/pip.conf`\n在windows上，创建配置文件路径为：`%HOME%\\pip\\pip.ini`\n在建立的pip配置文件内加入：\n\n```ini\n[global]\nindex-url = https://pypi.doubanio.com/simple #这里使用的是豆瓣的镜像站点\n```\n\n### 网页下载器\n\n- urllib 官方 `import urllib.request` `import http.cookiejar`\n- request 第三方\n> [python 3.3 摸拟登录 小例][5]\n\n\n\n### 网页解析器\n\n- `beautiful Soup`第三方插件\n> 下载 http://wwww.crummy.com/software/BeautifulSoup/\n>- 安装: `pip install beautifulsoup4`\n>- 安装lxml解析器(可选)， `pip install lxml`\n>- 测试: `import bs4`\n\n\npip安装的时候总是超时，可以建个文件 `~/.pip/pip.conf`, 内容如下\n```ini\n[global]\nindex-url = http://pypi.v2ex.com/simple\n```\n\n>- [python3.4学习笔记(十七) 网络爬虫使用Beautifulsoup4抓取内容][6]\n\n### Progressbar\n\n参考\n> http://python.jobbole.com/83976/\n\nclone下来`https://github.com/coagulant/progressbar-python3.git`运行\n\n\tgit clone https://github.com/coagulant/progressbar-python3.git\n\tpython setup.py install\n\n\n### 安装Pillow\n\n```\npip install Pillow\n```\n\n### 安装win32crypt\n下载路径\nhttps://pypi.python.org/pypi/pywin32\nhttps://sourceforge.net/projects/pywin32/files/pywin32/\n\n  [1]: http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000 \"Python教程 - 廖雪峰的官方网站\"\n  [2]: http://python3-cookbook.readthedocs.org/zh_CN/latest/preface.html \"python3-cookbook\"\n  [3]: https://www.python.org/ftp/python/3.5.0/python-3.5.0-amd64.exe\n  [4]: https://www.python.org/ftp/python/3.5.0/python-3.5.0.exe\n  [5]: http://blog.csdn.net/keenweiwei/article/details/9041307 \"python 3.3 摸拟登录 小例\"\n  [6]: http://www.cnblogs.com/zdz8207/p/python_learn_note_17.html \"python3.4学习笔记&#40;十七&#41; 网络爬虫使用Beautifulsoup4抓取内容\"","source":"_posts/python基础.md","raw":"---\ntitle: python基础\ndate: 2018-03-21 21:04:19\ntags: python\n---\n\n\n## 参考\n>- [Python教程 - 廖雪峰的官方网站][1]\n>- [ python3-cookbook][2]\n>- 中文教程及自动化测试介绍https://my.oschina.net/u/1433482/blog/634218?fromerr=oGg6OFhY\n\n\n<!--more-->\n**Python的设计哲学是“优雅”、“明确”、“简单”**\n> Python开发者的哲学是“用一种方法，最好是只有一种方法来做一件事”\n\n**安装**\n> Python有两个版本，一个是2.x版，一个是3.x版，这两个版本是不兼容的\n> Python的官方网站下载Python 3.5对应的[64位安装程序][3]或[32位安装程序][4]\n>特别要注意勾上`Add Python 3.5 to PATH`，然后点“`Install Now`”即可完成安装\n\n安装两个版本的python：\n\n```bash\n# 使用默认版本的Python\npy\n# 使用Python 27\npy -2\n# 使用Python 35\npy -3\n```\npip命令\n\n```bash\npy -m pip install itchat\n# 指定特定版本的pip\npy -3 -m pip install itchat\n```\n\n## 基础\n\n基本语法\n\n- `#`开头的语句是注释\n- 冒号`:`结尾时，缩进的语句视为代码块，建议**4个空格**的缩进\n- **大小写敏感**\n- 文件头标注\n```python\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n```\n\n方法\n\n- 输出`print('The quick brown fox', 'jumps over', 'the lazy dog')`\n- 输入`name = input('please enter your name: ')`\n- Python允许用`'''...'''`的格式表示多行内容\n```python\nprint('''line1\nline2\nline3''')\n```\n\n### 数据类型\n\n - 整数\n - 浮点数   可以使用科学计数法，如1.23x10<sup>9</sup>就是`1.23e9`\n - 字符串\n - 布尔值   只有`True`、`False`两种值(注意**大小写**)   布尔值可以用`and`、`or`和`not`运算\n - 空值     `None` 不是0\n - 两种除法 `/`除法计算结果是浮点数(即使是两个整数恰好整除) `//`称为地板除，两个整数的除法仍然是整数\n\n### Python的字符串  \n\n - 字符串是以Unicode编码的\n - `ord()`函数获取字符的整数表示，`chr()`函数把编码转换为对应的字符\n - `encode()`方法可以编码为指定的`bytes`，`decode()`把`bytes`变为`str`\n```python\n>>> '中文'.encode('utf-8')\nb'\\xe4\\xb8\\xad\\xe6\\x96\\x87'\n\n>>> b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'.decode('utf-8')\n'中文'\n```\n- 要计算str包含多少个**字符**，可以用`len()`函数,要查看字节数可结合encode\n- Python中，采用的格式化方式和C语言是一致的，用`%`实现，举例如下：\n```python\n>>> '%2d-%02d' % (3, 1)\n' 3-01'\n```\n\n\n### 定义函数\n\n- `def`语句，依次写出函数名、括号、括号中的参数和冒号:\n- 如果你已经把`my_abs()`的函数定义保存为`abstest.py`文件了，那么，可以在该文件的当前目录下启动Python解释器，用f`rom abstest import my_abs`来导入`my_abs()`函数，注意`abstest`是文件名（不含`.py`扩展名）\n```python\ndef my_abs(x):\n    if x >= 0:\n        return x\n    else:\n        return -x\n```\n- `import`用来导入包，如`import math`语句表示导入math包\n- 函数可以快返回*多个值*\n```python\nimport math\n\ndef move(x, y, step, angle=0):\n    nx = x + step * math.cos(angle)\n    ny = y - step * math.sin(angle)\n    return nx, ny\n```\n- 可以传入默认参数，类似php,注意默认参数要为**不可变对象**\n```python\ndef power(x, n=2):\n    s = 1\n    while n > 0:\n        n = n - 1\n        s = s * x\n    return s\n```\n- `*args`是可变参数，`args`接收的是一个`tuple`；`**kw`是关键字参数，`kw`接收的是一个dict。\n>**可变参数**既可以直接传入`func(1,2,3)`，又可以先组装list或tuple，再通过`*args`传入：`func(*(1, 2, 3))`； \n>**关键字参**数既可以直接传入：`func(a=1,b=2)`，又可以先组装`dict`，再通过`**kw`传入：`func(**{'a': 1, 'b': 2})`。\n\n**高级特性**\n\n切片（Slice）  \n- **`L[0:3]`**表示，从索引0开始取，直到索引3为止，但不包括索引3\n- **`L[-2,0]`**表示倒数\n- `list`,`tuple`,字符串者可以切片\n\n列表生成式\n- 要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来\n```python\n>>> [x * x for x in range(1, 11)]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n#全排列\n>>> [m + n for m in 'ABC' for n in 'XYZ']\n['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']\n```\n- `isinstance`函数可以判断一个变量是不是字符串，如 `isinstance(x, str)`\n\n**安装第三方模块**\n必须先知道该库的名称，可以在官网或者pypi上搜索,例如`pip install Pillow` 处理图片\n\n**面向对象的编程**\n\n```python\nclass Student(object): #表示Student类继承objec类\n    def __init__(self, name, score): #实例化类方法，第一个参数永远是self，表示实例自己\n        self.name = name\n        self.score = score\n    def print_score(self): //第一个参数必需是self，调用时不用传入\n        print('%s: %s' % (self.name, self.score))\n```\n```python\nbart = Student('Bart Simpson', 59)\nlisa = Student('Lisa Simpson', 87)\nbart.print_score()\nlisa.print_score()\n```\n\n>- class后面紧接着是类名，即Student，类名通常是大写开头的单词，紧接着是`(object)`，表示该类是从哪个类**继承**下来的\n>- `__init__` 方法用来创建实例,第一个参数永远是**`self`**，表示创建的实例本身，注意是两个下划线`\"__\"`\n>- 和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量`self`，并且，调用时，不用传递该参数\n\n- 如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线`__`，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（`private`），只有内部可以访问，外部不能访问\n- 在Python中，变量名类似`__xxx__`的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是`private`变量，所以，不能用`__name__`、`__score__`这样的变量名。\n\n------------------------------\n## 三方模块\n\n\n### pip\n\n**修pip改镜像**\n在unix和macos，创建配置文件路径为：`$HOME/.pip/pip.conf`\n在windows上，创建配置文件路径为：`%HOME%\\pip\\pip.ini`\n在建立的pip配置文件内加入：\n\n```ini\n[global]\nindex-url = https://pypi.doubanio.com/simple #这里使用的是豆瓣的镜像站点\n```\n\n### 网页下载器\n\n- urllib 官方 `import urllib.request` `import http.cookiejar`\n- request 第三方\n> [python 3.3 摸拟登录 小例][5]\n\n\n\n### 网页解析器\n\n- `beautiful Soup`第三方插件\n> 下载 http://wwww.crummy.com/software/BeautifulSoup/\n>- 安装: `pip install beautifulsoup4`\n>- 安装lxml解析器(可选)， `pip install lxml`\n>- 测试: `import bs4`\n\n\npip安装的时候总是超时，可以建个文件 `~/.pip/pip.conf`, 内容如下\n```ini\n[global]\nindex-url = http://pypi.v2ex.com/simple\n```\n\n>- [python3.4学习笔记(十七) 网络爬虫使用Beautifulsoup4抓取内容][6]\n\n### Progressbar\n\n参考\n> http://python.jobbole.com/83976/\n\nclone下来`https://github.com/coagulant/progressbar-python3.git`运行\n\n\tgit clone https://github.com/coagulant/progressbar-python3.git\n\tpython setup.py install\n\n\n### 安装Pillow\n\n```\npip install Pillow\n```\n\n### 安装win32crypt\n下载路径\nhttps://pypi.python.org/pypi/pywin32\nhttps://sourceforge.net/projects/pywin32/files/pywin32/\n\n  [1]: http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000 \"Python教程 - 廖雪峰的官方网站\"\n  [2]: http://python3-cookbook.readthedocs.org/zh_CN/latest/preface.html \"python3-cookbook\"\n  [3]: https://www.python.org/ftp/python/3.5.0/python-3.5.0-amd64.exe\n  [4]: https://www.python.org/ftp/python/3.5.0/python-3.5.0.exe\n  [5]: http://blog.csdn.net/keenweiwei/article/details/9041307 \"python 3.3 摸拟登录 小例\"\n  [6]: http://www.cnblogs.com/zdz8207/p/python_learn_note_17.html \"python3.4学习笔记&#40;十七&#41; 网络爬虫使用Beautifulsoup4抓取内容\"","slug":"python基础","published":1,"updated":"2018-03-27T14:06:24.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyq0ff0g000ozwv75nbyjdmf","content":"<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<ul>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\" title=\"Python教程 - 廖雪峰的官方网站\" target=\"_blank\" rel=\"noopener\">Python教程 - 廖雪峰的官方网站</a></li>\n<li><a href=\"http://python3-cookbook.readthedocs.org/zh_CN/latest/preface.html\" title=\"python3-cookbook\" target=\"_blank\" rel=\"noopener\"> python3-cookbook</a></li>\n<li>中文教程及自动化测试介绍<a href=\"https://my.oschina.net/u/1433482/blog/634218?fromerr=oGg6OFhY\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/u/1433482/blog/634218?fromerr=oGg6OFhY</a></li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p><strong>Python的设计哲学是“优雅”、“明确”、“简单”</strong></p>\n<blockquote>\n<p>Python开发者的哲学是“用一种方法，最好是只有一种方法来做一件事”</p>\n</blockquote>\n<p><strong>安装</strong></p>\n<blockquote>\n<p>Python有两个版本，一个是2.x版，一个是3.x版，这两个版本是不兼容的<br>Python的官方网站下载Python 3.5对应的<a href=\"https://www.python.org/ftp/python/3.5.0/python-3.5.0-amd64.exe\" target=\"_blank\" rel=\"noopener\">64位安装程序</a>或<a href=\"https://www.python.org/ftp/python/3.5.0/python-3.5.0.exe\" target=\"_blank\" rel=\"noopener\">32位安装程序</a><br>特别要注意勾上<code>Add Python 3.5 to PATH</code>，然后点“<code>Install Now</code>”即可完成安装</p>\n</blockquote>\n<p>安装两个版本的python：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用默认版本的Python</span></span><br><span class=\"line\">py</span><br><span class=\"line\"><span class=\"comment\"># 使用Python 27</span></span><br><span class=\"line\">py -2</span><br><span class=\"line\"><span class=\"comment\"># 使用Python 35</span></span><br><span class=\"line\">py -3</span><br></pre></td></tr></table></figure>\n<p>pip命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">py -m pip install itchat</span><br><span class=\"line\"><span class=\"comment\"># 指定特定版本的pip</span></span><br><span class=\"line\">py -3 -m pip install itchat</span><br></pre></td></tr></table></figure>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>基本语法</p>\n<ul>\n<li><code>#</code>开头的语句是注释</li>\n<li>冒号<code>:</code>结尾时，缩进的语句视为代码块，建议<strong>4个空格</strong>的缩进</li>\n<li><strong>大小写敏感</strong></li>\n<li>文件头标注<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>方法</p>\n<ul>\n<li>输出<code>print(&#39;The quick brown fox&#39;, &#39;jumps over&#39;, &#39;the lazy dog&#39;)</code></li>\n<li>输入<code>name = input(&#39;please enter your name: &#39;)</code></li>\n<li>Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'''line1</span></span><br><span class=\"line\"><span class=\"string\">line2</span></span><br><span class=\"line\"><span class=\"string\">line3'''</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><ul>\n<li>整数</li>\n<li>浮点数   可以使用科学计数法，如1.23x10<sup>9</sup>就是<code>1.23e9</code></li>\n<li>字符串</li>\n<li>布尔值   只有<code>True</code>、<code>False</code>两种值(注意<strong>大小写</strong>)   布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算</li>\n<li>空值     <code>None</code> 不是0</li>\n<li>两种除法 <code>/</code>除法计算结果是浮点数(即使是两个整数恰好整除) <code>//</code>称为地板除，两个整数的除法仍然是整数</li>\n</ul>\n<h3 id=\"Python的字符串\"><a href=\"#Python的字符串\" class=\"headerlink\" title=\"Python的字符串\"></a>Python的字符串</h3><ul>\n<li>字符串是以Unicode编码的</li>\n<li><code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符</li>\n<li><code>encode()</code>方法可以编码为指定的<code>bytes</code>，<code>decode()</code>把<code>bytes</code>变为<code>str</code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'中文'</span>.encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"><span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span>.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"><span class=\"string\">'中文'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>要计算str包含多少个<strong>字符</strong>，可以用<code>len()</code>函数,要查看字节数可结合encode</li>\n<li>Python中，采用的格式化方式和C语言是一致的，用<code>%</code>实现，举例如下：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'%2d-%02d'</span> % (<span class=\"number\">3</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"string\">' 3-01'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h3><ul>\n<li><code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号:</li>\n<li><p>如果你已经把<code>my_abs()</code>的函数定义保存为<code>abstest.py</code>文件了，那么，可以在该文件的当前目录下启动Python解释器，用f<code>rom abstest import my_abs</code>来导入<code>my_abs()</code>函数，注意<code>abstest</code>是文件名（不含<code>.py</code>扩展名）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_abs</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>import</code>用来导入包，如<code>import math</code>语句表示导入math包</p>\n</li>\n<li><p>函数可以快返回<em>多个值</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span><span class=\"params\">(x, y, step, angle=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">    nx = x + step * math.cos(angle)</span><br><span class=\"line\">    ny = y - step * math.sin(angle)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nx, ny</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以传入默认参数，类似php,注意默认参数要为<strong>不可变对象</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">power</span><span class=\"params\">(x, n=<span class=\"number\">2</span>)</span>:</span></span><br><span class=\"line\">    s = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        n = n - <span class=\"number\">1</span></span><br><span class=\"line\">        s = s * x</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>*args</code>是可变参数，<code>args</code>接收的是一个<code>tuple</code>；<code>**kw</code>是关键字参数，<code>kw</code>接收的是一个dict。</p>\n<blockquote>\n<p><strong>可变参数</strong>既可以直接传入<code>func(1,2,3)</code>，又可以先组装list或tuple，再通过<code>*args</code>传入：<code>func(*(1, 2, 3))</code>；<br><strong>关键字参</strong>数既可以直接传入：<code>func(a=1,b=2)</code>，又可以先组装<code>dict</code>，再通过<code>**kw</code>传入：<code>func(**{&#39;a&#39;: 1, &#39;b&#39;: 2})</code>。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>高级特性</strong></p>\n<p>切片（Slice）  </p>\n<ul>\n<li><strong><code>L[0:3]</code></strong>表示，从索引0开始取，直到索引3为止，但不包括索引3</li>\n<li><strong><code>L[-2,0]</code></strong>表示倒数</li>\n<li><code>list</code>,<code>tuple</code>,字符串者可以切片</li>\n</ul>\n<p>列表生成式</p>\n<ul>\n<li><p>要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[x * x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">11</span>)]</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>, <span class=\"number\">100</span>]</span><br><span class=\"line\"><span class=\"comment\">#全排列</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[m + n <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> <span class=\"string\">'ABC'</span> <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"string\">'XYZ'</span>]</span><br><span class=\"line\">[<span class=\"string\">'AX'</span>, <span class=\"string\">'AY'</span>, <span class=\"string\">'AZ'</span>, <span class=\"string\">'BX'</span>, <span class=\"string\">'BY'</span>, <span class=\"string\">'BZ'</span>, <span class=\"string\">'CX'</span>, <span class=\"string\">'CY'</span>, <span class=\"string\">'CZ'</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>isinstance</code>函数可以判断一个变量是不是字符串，如 <code>isinstance(x, str)</code></p>\n</li>\n</ul>\n<p><strong>安装第三方模块</strong><br>必须先知道该库的名称，可以在官网或者pypi上搜索,例如<code>pip install Pillow</code> 处理图片</p>\n<p><strong>面向对象的编程</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span> <span class=\"comment\">#表示Student类继承objec类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, score)</span>:</span> <span class=\"comment\">#实例化类方法，第一个参数永远是self，表示实例自己</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.score = score</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_score</span><span class=\"params\">(self)</span>:</span> //第一个参数必需是self，调用时不用传入</span><br><span class=\"line\">        print(<span class=\"string\">'%s: %s'</span> % (self.name, self.score))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bart = Student(<span class=\"string\">'Bart Simpson'</span>, <span class=\"number\">59</span>)</span><br><span class=\"line\">lisa = Student(<span class=\"string\">'Lisa Simpson'</span>, <span class=\"number\">87</span>)</span><br><span class=\"line\">bart.print_score()</span><br><span class=\"line\">lisa.print_score()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>class后面紧接着是类名，即Student，类名通常是大写开头的单词，紧接着是<code>(object)</code>，表示该类是从哪个类<strong>继承</strong>下来的</li>\n<li><code>__init__</code> 方法用来创建实例,第一个参数永远是<strong><code>self</code></strong>，表示创建的实例本身，注意是两个下划线<code>&quot;__&quot;</code></li>\n<li>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>，并且，调用时，不用传递该参数</li>\n</ul>\n</blockquote>\n<ul>\n<li>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（<code>private</code>），只有内部可以访问，外部不能访问</li>\n<li>在Python中，变量名类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是<code>private</code>变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</li>\n</ul>\n<hr>\n<h2 id=\"三方模块\"><a href=\"#三方模块\" class=\"headerlink\" title=\"三方模块\"></a>三方模块</h2><h3 id=\"pip\"><a href=\"#pip\" class=\"headerlink\" title=\"pip\"></a>pip</h3><p><strong>修pip改镜像</strong><br>在unix和macos，创建配置文件路径为：<code>$HOME/.pip/pip.conf</code><br>在windows上，创建配置文件路径为：<code>%HOME%\\pip\\pip.ini</code><br>在建立的pip配置文件内加入：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[global]</span></span><br><span class=\"line\"><span class=\"attr\">index-url</span> = https://pypi.doubanio.com/simple #这里使用的是豆瓣的镜像站点</span><br></pre></td></tr></table></figure>\n<h3 id=\"网页下载器\"><a href=\"#网页下载器\" class=\"headerlink\" title=\"网页下载器\"></a>网页下载器</h3><ul>\n<li>urllib 官方 <code>import urllib.request</code> <code>import http.cookiejar</code></li>\n<li>request 第三方<blockquote>\n<p><a href=\"http://blog.csdn.net/keenweiwei/article/details/9041307\" title=\"python 3.3 摸拟登录 小例\" target=\"_blank\" rel=\"noopener\">python 3.3 摸拟登录 小例</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"网页解析器\"><a href=\"#网页解析器\" class=\"headerlink\" title=\"网页解析器\"></a>网页解析器</h3><ul>\n<li><code>beautiful Soup</code>第三方插件<blockquote>\n<p>下载 <a href=\"http://wwww.crummy.com/software/BeautifulSoup/\" target=\"_blank\" rel=\"noopener\">http://wwww.crummy.com/software/BeautifulSoup/</a></p>\n<ul>\n<li>安装: <code>pip install beautifulsoup4</code></li>\n<li>安装lxml解析器(可选)， <code>pip install lxml</code></li>\n<li>测试: <code>import bs4</code></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>pip安装的时候总是超时，可以建个文件 <code>~/.pip/pip.conf</code>, 内容如下<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[global]</span></span><br><span class=\"line\"><span class=\"attr\">index-url</span> = http://pypi.v2ex.com/simple</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<ul>\n<li><a href=\"http://www.cnblogs.com/zdz8207/p/python_learn_note_17.html\" title=\"python3.4学习笔记&#40;十七&#41; 网络爬虫使用Beautifulsoup4抓取内容\" target=\"_blank\" rel=\"noopener\">python3.4学习笔记(十七) 网络爬虫使用Beautifulsoup4抓取内容</a></li>\n</ul>\n</blockquote>\n<h3 id=\"Progressbar\"><a href=\"#Progressbar\" class=\"headerlink\" title=\"Progressbar\"></a>Progressbar</h3><p>参考</p>\n<blockquote>\n<p><a href=\"http://python.jobbole.com/83976/\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/83976/</a></p>\n</blockquote>\n<p>clone下来<code>https://github.com/coagulant/progressbar-python3.git</code>运行</p>\n<pre><code>git clone https://github.com/coagulant/progressbar-python3.git\npython setup.py install\n</code></pre><h3 id=\"安装Pillow\"><a href=\"#安装Pillow\" class=\"headerlink\" title=\"安装Pillow\"></a>安装Pillow</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install Pillow</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装win32crypt\"><a href=\"#安装win32crypt\" class=\"headerlink\" title=\"安装win32crypt\"></a>安装win32crypt</h3><p>下载路径<br><a href=\"https://pypi.python.org/pypi/pywin32\" target=\"_blank\" rel=\"noopener\">https://pypi.python.org/pypi/pywin32</a><br><a href=\"https://sourceforge.net/projects/pywin32/files/pywin32/\" target=\"_blank\" rel=\"noopener\">https://sourceforge.net/projects/pywin32/files/pywin32/</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<ul>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\" title=\"Python教程 - 廖雪峰的官方网站\" target=\"_blank\" rel=\"noopener\">Python教程 - 廖雪峰的官方网站</a></li>\n<li><a href=\"http://python3-cookbook.readthedocs.org/zh_CN/latest/preface.html\" title=\"python3-cookbook\" target=\"_blank\" rel=\"noopener\"> python3-cookbook</a></li>\n<li>中文教程及自动化测试介绍<a href=\"https://my.oschina.net/u/1433482/blog/634218?fromerr=oGg6OFhY\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/u/1433482/blog/634218?fromerr=oGg6OFhY</a></li>\n</ul>\n</blockquote>","more":"<p><strong>Python的设计哲学是“优雅”、“明确”、“简单”</strong></p>\n<blockquote>\n<p>Python开发者的哲学是“用一种方法，最好是只有一种方法来做一件事”</p>\n</blockquote>\n<p><strong>安装</strong></p>\n<blockquote>\n<p>Python有两个版本，一个是2.x版，一个是3.x版，这两个版本是不兼容的<br>Python的官方网站下载Python 3.5对应的<a href=\"https://www.python.org/ftp/python/3.5.0/python-3.5.0-amd64.exe\" target=\"_blank\" rel=\"noopener\">64位安装程序</a>或<a href=\"https://www.python.org/ftp/python/3.5.0/python-3.5.0.exe\" target=\"_blank\" rel=\"noopener\">32位安装程序</a><br>特别要注意勾上<code>Add Python 3.5 to PATH</code>，然后点“<code>Install Now</code>”即可完成安装</p>\n</blockquote>\n<p>安装两个版本的python：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用默认版本的Python</span></span><br><span class=\"line\">py</span><br><span class=\"line\"><span class=\"comment\"># 使用Python 27</span></span><br><span class=\"line\">py -2</span><br><span class=\"line\"><span class=\"comment\"># 使用Python 35</span></span><br><span class=\"line\">py -3</span><br></pre></td></tr></table></figure>\n<p>pip命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">py -m pip install itchat</span><br><span class=\"line\"><span class=\"comment\"># 指定特定版本的pip</span></span><br><span class=\"line\">py -3 -m pip install itchat</span><br></pre></td></tr></table></figure>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>基本语法</p>\n<ul>\n<li><code>#</code>开头的语句是注释</li>\n<li>冒号<code>:</code>结尾时，缩进的语句视为代码块，建议<strong>4个空格</strong>的缩进</li>\n<li><strong>大小写敏感</strong></li>\n<li>文件头标注<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>方法</p>\n<ul>\n<li>输出<code>print(&#39;The quick brown fox&#39;, &#39;jumps over&#39;, &#39;the lazy dog&#39;)</code></li>\n<li>输入<code>name = input(&#39;please enter your name: &#39;)</code></li>\n<li>Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'''line1</span></span><br><span class=\"line\"><span class=\"string\">line2</span></span><br><span class=\"line\"><span class=\"string\">line3'''</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><ul>\n<li>整数</li>\n<li>浮点数   可以使用科学计数法，如1.23x10<sup>9</sup>就是<code>1.23e9</code></li>\n<li>字符串</li>\n<li>布尔值   只有<code>True</code>、<code>False</code>两种值(注意<strong>大小写</strong>)   布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算</li>\n<li>空值     <code>None</code> 不是0</li>\n<li>两种除法 <code>/</code>除法计算结果是浮点数(即使是两个整数恰好整除) <code>//</code>称为地板除，两个整数的除法仍然是整数</li>\n</ul>\n<h3 id=\"Python的字符串\"><a href=\"#Python的字符串\" class=\"headerlink\" title=\"Python的字符串\"></a>Python的字符串</h3><ul>\n<li>字符串是以Unicode编码的</li>\n<li><code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符</li>\n<li><code>encode()</code>方法可以编码为指定的<code>bytes</code>，<code>decode()</code>把<code>bytes</code>变为<code>str</code><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'中文'</span>.encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"><span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span>.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"><span class=\"string\">'中文'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>要计算str包含多少个<strong>字符</strong>，可以用<code>len()</code>函数,要查看字节数可结合encode</li>\n<li>Python中，采用的格式化方式和C语言是一致的，用<code>%</code>实现，举例如下：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'%2d-%02d'</span> % (<span class=\"number\">3</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"string\">' 3-01'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h3><ul>\n<li><code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号:</li>\n<li><p>如果你已经把<code>my_abs()</code>的函数定义保存为<code>abstest.py</code>文件了，那么，可以在该文件的当前目录下启动Python解释器，用f<code>rom abstest import my_abs</code>来导入<code>my_abs()</code>函数，注意<code>abstest</code>是文件名（不含<code>.py</code>扩展名）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_abs</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>import</code>用来导入包，如<code>import math</code>语句表示导入math包</p>\n</li>\n<li><p>函数可以快返回<em>多个值</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span><span class=\"params\">(x, y, step, angle=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">    nx = x + step * math.cos(angle)</span><br><span class=\"line\">    ny = y - step * math.sin(angle)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nx, ny</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以传入默认参数，类似php,注意默认参数要为<strong>不可变对象</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">power</span><span class=\"params\">(x, n=<span class=\"number\">2</span>)</span>:</span></span><br><span class=\"line\">    s = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        n = n - <span class=\"number\">1</span></span><br><span class=\"line\">        s = s * x</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>*args</code>是可变参数，<code>args</code>接收的是一个<code>tuple</code>；<code>**kw</code>是关键字参数，<code>kw</code>接收的是一个dict。</p>\n<blockquote>\n<p><strong>可变参数</strong>既可以直接传入<code>func(1,2,3)</code>，又可以先组装list或tuple，再通过<code>*args</code>传入：<code>func(*(1, 2, 3))</code>；<br><strong>关键字参</strong>数既可以直接传入：<code>func(a=1,b=2)</code>，又可以先组装<code>dict</code>，再通过<code>**kw</code>传入：<code>func(**{&#39;a&#39;: 1, &#39;b&#39;: 2})</code>。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>高级特性</strong></p>\n<p>切片（Slice）  </p>\n<ul>\n<li><strong><code>L[0:3]</code></strong>表示，从索引0开始取，直到索引3为止，但不包括索引3</li>\n<li><strong><code>L[-2,0]</code></strong>表示倒数</li>\n<li><code>list</code>,<code>tuple</code>,字符串者可以切片</li>\n</ul>\n<p>列表生成式</p>\n<ul>\n<li><p>要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[x * x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">11</span>)]</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>, <span class=\"number\">100</span>]</span><br><span class=\"line\"><span class=\"comment\">#全排列</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[m + n <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> <span class=\"string\">'ABC'</span> <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"string\">'XYZ'</span>]</span><br><span class=\"line\">[<span class=\"string\">'AX'</span>, <span class=\"string\">'AY'</span>, <span class=\"string\">'AZ'</span>, <span class=\"string\">'BX'</span>, <span class=\"string\">'BY'</span>, <span class=\"string\">'BZ'</span>, <span class=\"string\">'CX'</span>, <span class=\"string\">'CY'</span>, <span class=\"string\">'CZ'</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>isinstance</code>函数可以判断一个变量是不是字符串，如 <code>isinstance(x, str)</code></p>\n</li>\n</ul>\n<p><strong>安装第三方模块</strong><br>必须先知道该库的名称，可以在官网或者pypi上搜索,例如<code>pip install Pillow</code> 处理图片</p>\n<p><strong>面向对象的编程</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span> <span class=\"comment\">#表示Student类继承objec类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, score)</span>:</span> <span class=\"comment\">#实例化类方法，第一个参数永远是self，表示实例自己</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.score = score</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_score</span><span class=\"params\">(self)</span>:</span> //第一个参数必需是self，调用时不用传入</span><br><span class=\"line\">        print(<span class=\"string\">'%s: %s'</span> % (self.name, self.score))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bart = Student(<span class=\"string\">'Bart Simpson'</span>, <span class=\"number\">59</span>)</span><br><span class=\"line\">lisa = Student(<span class=\"string\">'Lisa Simpson'</span>, <span class=\"number\">87</span>)</span><br><span class=\"line\">bart.print_score()</span><br><span class=\"line\">lisa.print_score()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>class后面紧接着是类名，即Student，类名通常是大写开头的单词，紧接着是<code>(object)</code>，表示该类是从哪个类<strong>继承</strong>下来的</li>\n<li><code>__init__</code> 方法用来创建实例,第一个参数永远是<strong><code>self</code></strong>，表示创建的实例本身，注意是两个下划线<code>&quot;__&quot;</code></li>\n<li>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>，并且，调用时，不用传递该参数</li>\n</ul>\n</blockquote>\n<ul>\n<li>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（<code>private</code>），只有内部可以访问，外部不能访问</li>\n<li>在Python中，变量名类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是<code>private</code>变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</li>\n</ul>\n<hr>\n<h2 id=\"三方模块\"><a href=\"#三方模块\" class=\"headerlink\" title=\"三方模块\"></a>三方模块</h2><h3 id=\"pip\"><a href=\"#pip\" class=\"headerlink\" title=\"pip\"></a>pip</h3><p><strong>修pip改镜像</strong><br>在unix和macos，创建配置文件路径为：<code>$HOME/.pip/pip.conf</code><br>在windows上，创建配置文件路径为：<code>%HOME%\\pip\\pip.ini</code><br>在建立的pip配置文件内加入：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[global]</span></span><br><span class=\"line\"><span class=\"attr\">index-url</span> = https://pypi.doubanio.com/simple #这里使用的是豆瓣的镜像站点</span><br></pre></td></tr></table></figure>\n<h3 id=\"网页下载器\"><a href=\"#网页下载器\" class=\"headerlink\" title=\"网页下载器\"></a>网页下载器</h3><ul>\n<li>urllib 官方 <code>import urllib.request</code> <code>import http.cookiejar</code></li>\n<li>request 第三方<blockquote>\n<p><a href=\"http://blog.csdn.net/keenweiwei/article/details/9041307\" title=\"python 3.3 摸拟登录 小例\" target=\"_blank\" rel=\"noopener\">python 3.3 摸拟登录 小例</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"网页解析器\"><a href=\"#网页解析器\" class=\"headerlink\" title=\"网页解析器\"></a>网页解析器</h3><ul>\n<li><code>beautiful Soup</code>第三方插件<blockquote>\n<p>下载 <a href=\"http://wwww.crummy.com/software/BeautifulSoup/\" target=\"_blank\" rel=\"noopener\">http://wwww.crummy.com/software/BeautifulSoup/</a></p>\n<ul>\n<li>安装: <code>pip install beautifulsoup4</code></li>\n<li>安装lxml解析器(可选)， <code>pip install lxml</code></li>\n<li>测试: <code>import bs4</code></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>pip安装的时候总是超时，可以建个文件 <code>~/.pip/pip.conf</code>, 内容如下<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[global]</span></span><br><span class=\"line\"><span class=\"attr\">index-url</span> = http://pypi.v2ex.com/simple</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<ul>\n<li><a href=\"http://www.cnblogs.com/zdz8207/p/python_learn_note_17.html\" title=\"python3.4学习笔记&#40;十七&#41; 网络爬虫使用Beautifulsoup4抓取内容\" target=\"_blank\" rel=\"noopener\">python3.4学习笔记(十七) 网络爬虫使用Beautifulsoup4抓取内容</a></li>\n</ul>\n</blockquote>\n<h3 id=\"Progressbar\"><a href=\"#Progressbar\" class=\"headerlink\" title=\"Progressbar\"></a>Progressbar</h3><p>参考</p>\n<blockquote>\n<p><a href=\"http://python.jobbole.com/83976/\" target=\"_blank\" rel=\"noopener\">http://python.jobbole.com/83976/</a></p>\n</blockquote>\n<p>clone下来<code>https://github.com/coagulant/progressbar-python3.git</code>运行</p>\n<pre><code>git clone https://github.com/coagulant/progressbar-python3.git\npython setup.py install\n</code></pre><h3 id=\"安装Pillow\"><a href=\"#安装Pillow\" class=\"headerlink\" title=\"安装Pillow\"></a>安装Pillow</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install Pillow</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装win32crypt\"><a href=\"#安装win32crypt\" class=\"headerlink\" title=\"安装win32crypt\"></a>安装win32crypt</h3><p>下载路径<br><a href=\"https://pypi.python.org/pypi/pywin32\" target=\"_blank\" rel=\"noopener\">https://pypi.python.org/pypi/pywin32</a><br><a href=\"https://sourceforge.net/projects/pywin32/files/pywin32/\" target=\"_blank\" rel=\"noopener\">https://sourceforge.net/projects/pywin32/files/pywin32/</a></p>"},{"title":"动态代理及原理思考","date":"2018-03-11T14:39:53.000Z","_content":"\n\n## 动态代理基础\n动态代理是在程序运行时动态创建一个代理类，实现的过程和静态代理一致，只是它是由反射实现的， 是AOP的基础\n\n动态代理类不会继承被代理类的接口，而是实现`InvocationHandler` ，例如:\n\n```java\nclass OwnerInvocationHandler implements InvocationHandler {\n    private PersonBean personBean;\n\n    OwnerInvocationHandler(PersonBean personBean){\n        this.personBean = personBean;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        try{\n            if(method.getName().startsWith(\"get\")){\n                return method.invoke(personBean,args);\n            }else if(method.getName().equals(\"setHotOrNotRating\")){\n                throw new IllegalAccessException();\n            }else if(method.getName().startsWith(\"set\")){\n                return method.invoke(personBean,args);\n            }\n        }catch (InvalidParameterException e){\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n我们关注的就只是invoke方法和被传入的被代理对象personBean\n<!--more-->\n创建代理类实例\n\n```java\nPersonBean person = new PersonBeanImpl();\n(PersonBean) Proxy.newProxyInstance(person.getClass().getClassLoader(),\n                person.getClass().getInterfaces(),\n                new OwnerInvocationHandler(person))\n```\n可以看到代理类是用反射实现的\n当然，也可以把创建过程写到动态代理类中\n\n```java\npublic static PersonBean newProxyInstance(PersonBean  person){\n\treturn\t(PersonBean) Proxy.newProxyInstance(person.getClass().getClassLoader(),\n                person.getClass().getInterfaces(),\n                new OwnerInvocationHandler(person))\n}\n```\n\n## `Retrofit`中动态类的实现\n\n撇开动态代理模式不谈，可以看到，Proxy可以生成生成一个继承特定接口的类，而一个继承了该接口的实现类也不是必要的。\n\n这时联想到`Retrofit`，它也是使用`Proxy`生成的\n\n```java\npublic interface GitHub {\n    @GET(\"/repos/{owner}/{repo}/contributors\")\n    Call<List<Contributor>> contributors(\n        @Path(\"owner\") String owner,\n        @Path(\"repo\") String repo);\n  }\n```\n\n```java\nRetrofit retrofit = new Retrofit.Builder()\n    .baseUrl(API_URL)\n    .addConverterFactory(GsonConverterFactory.create())\n    .build();\n\n// Create an instance of our GitHub API interface.\nGitHub github = retrofit.create(GitHub.class);\n```\n`retrofit.create`的实现\n```java\n public <T> T create(final Class<T> service) {\n    Utils.validateServiceInterface(service);\n    if (validateEagerly) {\n      eagerlyValidateMethods(service);\n    }\n    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service },\n        new InvocationHandler() {\n          private final Platform platform = Platform.get();\n\n          @Override public Object invoke(Object proxy, Method method, Object... args)\n              throws Throwable {\n            // If the method is a method from Object then defer to normal invocation.\n            if (method.getDeclaringClass() == Object.class) {\n              return method.invoke(this, args);\n            }\n            if (platform.isDefaultMethod(method)) {\n              return platform.invokeDefaultMethod(method, service, proxy, args);\n            }\n            ServiceMethod serviceMethod = loadServiceMethod(method);\n            OkHttpCall okHttpCall = new OkHttpCall<>(serviceMethod, args);\n            return serviceMethod.callAdapter.adapt(okHttpCall);\n          }\n        });\n  }\n```\n通过`retrofit.create`创建的对象，在执行相应的方法时都会经过这个内部类的`invoke`方法，再通过`ServiceMethod` 进行相关的请求。\n其实仔细想就明白了，每个网络请求其实并不关心叫什么名子，它只需要知道请求的url和参数就可以接着进行统一的网络请求就可以，所以看起来我们在定义接口的时候每个请求都定义了一个方法，但实际上这些方法没必要每个都实现。\n而这个`ServiceMethod` 内部不用看就知道肯定是会通过`method`来读取每个接口上的注解，以便知道该进行什么样的网络请求\n\n\n**动态代理类实现原理分析：**\n可以看到，通过`Proxy.newProxyInstance`生成了一个继承通用接口的实例，调用它的方法时就会调用动态代理类`InvocationHandler`的`invoke`方法，那么这个类是实现的呢\n\n```java\npublic static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)\n        throws IllegalArgumentException\n    {\n        Objects.requireNonNull(h);\n\n        final Class<?>[] intfs = interfaces.clone();\n        //这里生成了一个继承通用接口的类\n        Class<?> cl = getProxyClass0(loader, intfs);\n        try {\n             //可以发现这个类也有一个构造方法是传入InvocationHandler的\n            final Constructor<?> cons = cl.getConstructor(constructorParams);\n            final InvocationHandler ih = h;\n            if (!Modifier.isPublic(cl.getModifiers())) {\n                // Android-changed: Removed AccessController.doPrivileged\n                cons.setAccessible(true);\n            }\n            return cons.newInstance(new Object[]{h});\n        } catch (IllegalAccessException|InstantiationException e) {\n            throw new InternalError(e.toString(), e);\n        } catch (InvocationTargetException e) {\n            Throwable t = e.getCause();\n            if (t instanceof RuntimeException) {\n                throw (RuntimeException) t;\n            } else {\n                throw new InternalError(t.toString(), t);\n            }\n        } catch (NoSuchMethodException e) {\n            throw new InternalError(e.toString(), e);\n        }\n    }\n```\n通过`cl.getConstructor(constructorParams)`可以看到创建的动态类是有构造方法是传入了`InvocationHandler`的\n生成这个类是应该是在`getProxyClass0`里面\n\n```java\n    private static final WeakCache<ClassLoader, Class<?>[], Class<?>>\n        proxyClassCache = new WeakCache<>(new KeyFactory(), new ProxyClassFactory());\nprivate static Class<?> getProxyClass0(ClassLoader loader,\n                                           Class<?>... interfaces) {\n        return proxyClassCache.get(loader, interfaces);\n    }\n```\n`proxyClassCache`很明显只是一个缓存用的对象，正直生成的地方应该就是`ProxyClassFactory`\n这个`ProxyClassFactory`内部收集完必要的信息后调用一个`native`方法生成并加载到内存的\n根据网上的资料，可以通过以下方法把这个类给弄出来\n\n```java\n\t\tbyte[] classFile = ProxyGenerator.generateProxyClass(\"$Proxy0\", PersonBean.class.getInterfaces());\n        String path = \"G:/javacode/javase/Test/bin/proxy/StuProxy.class\";\n        try(FileOutputStream fos = new FileOutputStream(path)) {\n            fos.write(classFile);\n            fos.flush();\n            System.out.println(\"代理类class文件写入成功\");\n        } catch (Exception e) {\n           System.out.println(\"写文件错误\");\n        }\n```","source":"_posts/动态代理及原理思考.md","raw":"---\ntitle: 动态代理及原理思考\ndate: 2018-03-11 22:39:53\ntags: [Retrofit, 设计模式]\n---\n\n\n## 动态代理基础\n动态代理是在程序运行时动态创建一个代理类，实现的过程和静态代理一致，只是它是由反射实现的， 是AOP的基础\n\n动态代理类不会继承被代理类的接口，而是实现`InvocationHandler` ，例如:\n\n```java\nclass OwnerInvocationHandler implements InvocationHandler {\n    private PersonBean personBean;\n\n    OwnerInvocationHandler(PersonBean personBean){\n        this.personBean = personBean;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        try{\n            if(method.getName().startsWith(\"get\")){\n                return method.invoke(personBean,args);\n            }else if(method.getName().equals(\"setHotOrNotRating\")){\n                throw new IllegalAccessException();\n            }else if(method.getName().startsWith(\"set\")){\n                return method.invoke(personBean,args);\n            }\n        }catch (InvalidParameterException e){\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n我们关注的就只是invoke方法和被传入的被代理对象personBean\n<!--more-->\n创建代理类实例\n\n```java\nPersonBean person = new PersonBeanImpl();\n(PersonBean) Proxy.newProxyInstance(person.getClass().getClassLoader(),\n                person.getClass().getInterfaces(),\n                new OwnerInvocationHandler(person))\n```\n可以看到代理类是用反射实现的\n当然，也可以把创建过程写到动态代理类中\n\n```java\npublic static PersonBean newProxyInstance(PersonBean  person){\n\treturn\t(PersonBean) Proxy.newProxyInstance(person.getClass().getClassLoader(),\n                person.getClass().getInterfaces(),\n                new OwnerInvocationHandler(person))\n}\n```\n\n## `Retrofit`中动态类的实现\n\n撇开动态代理模式不谈，可以看到，Proxy可以生成生成一个继承特定接口的类，而一个继承了该接口的实现类也不是必要的。\n\n这时联想到`Retrofit`，它也是使用`Proxy`生成的\n\n```java\npublic interface GitHub {\n    @GET(\"/repos/{owner}/{repo}/contributors\")\n    Call<List<Contributor>> contributors(\n        @Path(\"owner\") String owner,\n        @Path(\"repo\") String repo);\n  }\n```\n\n```java\nRetrofit retrofit = new Retrofit.Builder()\n    .baseUrl(API_URL)\n    .addConverterFactory(GsonConverterFactory.create())\n    .build();\n\n// Create an instance of our GitHub API interface.\nGitHub github = retrofit.create(GitHub.class);\n```\n`retrofit.create`的实现\n```java\n public <T> T create(final Class<T> service) {\n    Utils.validateServiceInterface(service);\n    if (validateEagerly) {\n      eagerlyValidateMethods(service);\n    }\n    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service },\n        new InvocationHandler() {\n          private final Platform platform = Platform.get();\n\n          @Override public Object invoke(Object proxy, Method method, Object... args)\n              throws Throwable {\n            // If the method is a method from Object then defer to normal invocation.\n            if (method.getDeclaringClass() == Object.class) {\n              return method.invoke(this, args);\n            }\n            if (platform.isDefaultMethod(method)) {\n              return platform.invokeDefaultMethod(method, service, proxy, args);\n            }\n            ServiceMethod serviceMethod = loadServiceMethod(method);\n            OkHttpCall okHttpCall = new OkHttpCall<>(serviceMethod, args);\n            return serviceMethod.callAdapter.adapt(okHttpCall);\n          }\n        });\n  }\n```\n通过`retrofit.create`创建的对象，在执行相应的方法时都会经过这个内部类的`invoke`方法，再通过`ServiceMethod` 进行相关的请求。\n其实仔细想就明白了，每个网络请求其实并不关心叫什么名子，它只需要知道请求的url和参数就可以接着进行统一的网络请求就可以，所以看起来我们在定义接口的时候每个请求都定义了一个方法，但实际上这些方法没必要每个都实现。\n而这个`ServiceMethod` 内部不用看就知道肯定是会通过`method`来读取每个接口上的注解，以便知道该进行什么样的网络请求\n\n\n**动态代理类实现原理分析：**\n可以看到，通过`Proxy.newProxyInstance`生成了一个继承通用接口的实例，调用它的方法时就会调用动态代理类`InvocationHandler`的`invoke`方法，那么这个类是实现的呢\n\n```java\npublic static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)\n        throws IllegalArgumentException\n    {\n        Objects.requireNonNull(h);\n\n        final Class<?>[] intfs = interfaces.clone();\n        //这里生成了一个继承通用接口的类\n        Class<?> cl = getProxyClass0(loader, intfs);\n        try {\n             //可以发现这个类也有一个构造方法是传入InvocationHandler的\n            final Constructor<?> cons = cl.getConstructor(constructorParams);\n            final InvocationHandler ih = h;\n            if (!Modifier.isPublic(cl.getModifiers())) {\n                // Android-changed: Removed AccessController.doPrivileged\n                cons.setAccessible(true);\n            }\n            return cons.newInstance(new Object[]{h});\n        } catch (IllegalAccessException|InstantiationException e) {\n            throw new InternalError(e.toString(), e);\n        } catch (InvocationTargetException e) {\n            Throwable t = e.getCause();\n            if (t instanceof RuntimeException) {\n                throw (RuntimeException) t;\n            } else {\n                throw new InternalError(t.toString(), t);\n            }\n        } catch (NoSuchMethodException e) {\n            throw new InternalError(e.toString(), e);\n        }\n    }\n```\n通过`cl.getConstructor(constructorParams)`可以看到创建的动态类是有构造方法是传入了`InvocationHandler`的\n生成这个类是应该是在`getProxyClass0`里面\n\n```java\n    private static final WeakCache<ClassLoader, Class<?>[], Class<?>>\n        proxyClassCache = new WeakCache<>(new KeyFactory(), new ProxyClassFactory());\nprivate static Class<?> getProxyClass0(ClassLoader loader,\n                                           Class<?>... interfaces) {\n        return proxyClassCache.get(loader, interfaces);\n    }\n```\n`proxyClassCache`很明显只是一个缓存用的对象，正直生成的地方应该就是`ProxyClassFactory`\n这个`ProxyClassFactory`内部收集完必要的信息后调用一个`native`方法生成并加载到内存的\n根据网上的资料，可以通过以下方法把这个类给弄出来\n\n```java\n\t\tbyte[] classFile = ProxyGenerator.generateProxyClass(\"$Proxy0\", PersonBean.class.getInterfaces());\n        String path = \"G:/javacode/javase/Test/bin/proxy/StuProxy.class\";\n        try(FileOutputStream fos = new FileOutputStream(path)) {\n            fos.write(classFile);\n            fos.flush();\n            System.out.println(\"代理类class文件写入成功\");\n        } catch (Exception e) {\n           System.out.println(\"写文件错误\");\n        }\n```","slug":"动态代理及原理思考","published":1,"updated":"2018-03-27T14:06:24.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyq0ff0i000rzwv7hpvp6xlp","content":"<h2 id=\"动态代理基础\"><a href=\"#动态代理基础\" class=\"headerlink\" title=\"动态代理基础\"></a>动态代理基础</h2><p>动态代理是在程序运行时动态创建一个代理类，实现的过程和静态代理一致，只是它是由反射实现的， 是AOP的基础</p>\n<p>动态代理类不会继承被代理类的接口，而是实现<code>InvocationHandler</code> ，例如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OwnerInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PersonBean personBean;</span><br><span class=\"line\"></span><br><span class=\"line\">    OwnerInvocationHandler(PersonBean personBean)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.personBean = personBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(method.getName().startsWith(<span class=\"string\">\"get\"</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> method.invoke(personBean,args);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(method.getName().equals(<span class=\"string\">\"setHotOrNotRating\"</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalAccessException();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(method.getName().startsWith(<span class=\"string\">\"set\"</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> method.invoke(personBean,args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (InvalidParameterException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们关注的就只是invoke方法和被传入的被代理对象personBean<br><a id=\"more\"></a><br>创建代理类实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PersonBean person = <span class=\"keyword\">new</span> PersonBeanImpl();</span><br><span class=\"line\">(PersonBean) Proxy.newProxyInstance(person.getClass().getClassLoader(),</span><br><span class=\"line\">                person.getClass().getInterfaces(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> OwnerInvocationHandler(person))</span><br></pre></td></tr></table></figure>\n<p>可以看到代理类是用反射实现的<br>当然，也可以把创建过程写到动态代理类中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PersonBean <span class=\"title\">newProxyInstance</span><span class=\"params\">(PersonBean  person)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>\t(PersonBean) Proxy.newProxyInstance(person.getClass().getClassLoader(),</span><br><span class=\"line\">                person.getClass().getInterfaces(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> OwnerInvocationHandler(person))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Retrofit中动态类的实现\"><a href=\"#Retrofit中动态类的实现\" class=\"headerlink\" title=\"Retrofit中动态类的实现\"></a><code>Retrofit</code>中动态类的实现</h2><p>撇开动态代理模式不谈，可以看到，Proxy可以生成生成一个继承特定接口的类，而一个继承了该接口的实现类也不是必要的。</p>\n<p>这时联想到<code>Retrofit</code>，它也是使用<code>Proxy</code>生成的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">GitHub</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET</span>(<span class=\"string\">\"/repos/&#123;owner&#125;/&#123;repo&#125;/contributors\"</span>)</span><br><span class=\"line\">    Call&lt;List&lt;Contributor&gt;&gt; contributors(</span><br><span class=\"line\">        <span class=\"meta\">@Path</span>(<span class=\"string\">\"owner\"</span>) String owner,</span><br><span class=\"line\">        <span class=\"meta\">@Path</span>(<span class=\"string\">\"repo\"</span>) String repo);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</span><br><span class=\"line\">    .baseUrl(API_URL)</span><br><span class=\"line\">    .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">    .build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create an instance of our GitHub API interface.</span></span><br><span class=\"line\">GitHub github = retrofit.create(GitHub.class);</span><br></pre></td></tr></table></figure>\n<p><code>retrofit.create</code>的实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">final</span> Class&lt;T&gt; service)</span> </span>&#123;</span><br><span class=\"line\">   Utils.validateServiceInterface(service);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (validateEagerly) &#123;</span><br><span class=\"line\">     eagerlyValidateMethods(service);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), <span class=\"keyword\">new</span> Class&lt;?&gt;[] &#123; service &#125;,</span><br><span class=\"line\">       <span class=\"keyword\">new</span> InvocationHandler() &#123;</span><br><span class=\"line\">         <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Platform platform = Platform.get();</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object... args)</span></span></span><br><span class=\"line\"><span class=\"function\">             <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">           <span class=\"comment\">// If the method is a method from Object then defer to normal invocation.</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (method.getDeclaringClass() == Object.class) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> method.invoke(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (platform.isDefaultMethod(method)) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> platform.invokeDefaultMethod(method, service, proxy, args);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           ServiceMethod serviceMethod = loadServiceMethod(method);</span><br><span class=\"line\">           OkHttpCall okHttpCall = <span class=\"keyword\">new</span> OkHttpCall&lt;&gt;(serviceMethod, args);</span><br><span class=\"line\">           <span class=\"keyword\">return</span> serviceMethod.callAdapter.adapt(okHttpCall);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过<code>retrofit.create</code>创建的对象，在执行相应的方法时都会经过这个内部类的<code>invoke</code>方法，再通过<code>ServiceMethod</code> 进行相关的请求。<br>其实仔细想就明白了，每个网络请求其实并不关心叫什么名子，它只需要知道请求的url和参数就可以接着进行统一的网络请求就可以，所以看起来我们在定义接口的时候每个请求都定义了一个方法，但实际上这些方法没必要每个都实现。<br>而这个<code>ServiceMethod</code> 内部不用看就知道肯定是会通过<code>method</code>来读取每个接口上的注解，以便知道该进行什么样的网络请求</p>\n<p><strong>动态代理类实现原理分析：</strong><br>可以看到，通过<code>Proxy.newProxyInstance</code>生成了一个继承通用接口的实例，调用它的方法时就会调用动态代理类<code>InvocationHandler</code>的<code>invoke</code>方法，那么这个类是实现的呢</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                          InvocationHandler h)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> IllegalArgumentException</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(h);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class=\"line\">        <span class=\"comment\">//这里生成了一个继承通用接口的类</span></span><br><span class=\"line\">        Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             <span class=\"comment\">//可以发现这个类也有一个构造方法是传入InvocationHandler的</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> InvocationHandler ih = h;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Android-changed: Removed AccessController.doPrivileged</span></span><br><span class=\"line\">                cons.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cons.newInstance(<span class=\"keyword\">new</span> Object[]&#123;h&#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e.toString(), e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">            Throwable t = e.getCause();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t <span class=\"keyword\">instanceof</span> RuntimeException) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> (RuntimeException) t;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(t.toString(), t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e.toString(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>通过<code>cl.getConstructor(constructorParams)</code>可以看到创建的动态类是有构造方法是传入了<code>InvocationHandler</code>的<br>生成这个类是应该是在<code>getProxyClass0</code>里面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> WeakCache&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;</span><br><span class=\"line\">        proxyClassCache = <span class=\"keyword\">new</span> WeakCache&lt;&gt;(<span class=\"keyword\">new</span> KeyFactory(), <span class=\"keyword\">new</span> ProxyClassFactory());</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Class&lt;?&gt; getProxyClass0(ClassLoader loader,</span><br><span class=\"line\">                                           Class&lt;?&gt;... interfaces) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> proxyClassCache.get(loader, interfaces);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>proxyClassCache</code>很明显只是一个缓存用的对象，正直生成的地方应该就是<code>ProxyClassFactory</code><br>这个<code>ProxyClassFactory</code>内部收集完必要的信息后调用一个<code>native</code>方法生成并加载到内存的<br>根据网上的资料，可以通过以下方法把这个类给弄出来</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] classFile = ProxyGenerator.generateProxyClass(<span class=\"string\">\"$Proxy0\"</span>, PersonBean.class.getInterfaces());</span><br><span class=\"line\">      String path = <span class=\"string\">\"G:/javacode/javase/Test/bin/proxy/StuProxy.class\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span>(FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(path)) &#123;</span><br><span class=\"line\">          fos.write(classFile);</span><br><span class=\"line\">          fos.flush();</span><br><span class=\"line\">          System.out.println(<span class=\"string\">\"代理类class文件写入成功\"</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"写文件错误\"</span>);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"动态代理基础\"><a href=\"#动态代理基础\" class=\"headerlink\" title=\"动态代理基础\"></a>动态代理基础</h2><p>动态代理是在程序运行时动态创建一个代理类，实现的过程和静态代理一致，只是它是由反射实现的， 是AOP的基础</p>\n<p>动态代理类不会继承被代理类的接口，而是实现<code>InvocationHandler</code> ，例如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OwnerInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PersonBean personBean;</span><br><span class=\"line\"></span><br><span class=\"line\">    OwnerInvocationHandler(PersonBean personBean)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.personBean = personBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(method.getName().startsWith(<span class=\"string\">\"get\"</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> method.invoke(personBean,args);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(method.getName().equals(<span class=\"string\">\"setHotOrNotRating\"</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalAccessException();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(method.getName().startsWith(<span class=\"string\">\"set\"</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> method.invoke(personBean,args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (InvalidParameterException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们关注的就只是invoke方法和被传入的被代理对象personBean<br>","more":"<br>创建代理类实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PersonBean person = <span class=\"keyword\">new</span> PersonBeanImpl();</span><br><span class=\"line\">(PersonBean) Proxy.newProxyInstance(person.getClass().getClassLoader(),</span><br><span class=\"line\">                person.getClass().getInterfaces(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> OwnerInvocationHandler(person))</span><br></pre></td></tr></table></figure>\n<p>可以看到代理类是用反射实现的<br>当然，也可以把创建过程写到动态代理类中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PersonBean <span class=\"title\">newProxyInstance</span><span class=\"params\">(PersonBean  person)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>\t(PersonBean) Proxy.newProxyInstance(person.getClass().getClassLoader(),</span><br><span class=\"line\">                person.getClass().getInterfaces(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> OwnerInvocationHandler(person))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Retrofit中动态类的实现\"><a href=\"#Retrofit中动态类的实现\" class=\"headerlink\" title=\"Retrofit中动态类的实现\"></a><code>Retrofit</code>中动态类的实现</h2><p>撇开动态代理模式不谈，可以看到，Proxy可以生成生成一个继承特定接口的类，而一个继承了该接口的实现类也不是必要的。</p>\n<p>这时联想到<code>Retrofit</code>，它也是使用<code>Proxy</code>生成的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">GitHub</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET</span>(<span class=\"string\">\"/repos/&#123;owner&#125;/&#123;repo&#125;/contributors\"</span>)</span><br><span class=\"line\">    Call&lt;List&lt;Contributor&gt;&gt; contributors(</span><br><span class=\"line\">        <span class=\"meta\">@Path</span>(<span class=\"string\">\"owner\"</span>) String owner,</span><br><span class=\"line\">        <span class=\"meta\">@Path</span>(<span class=\"string\">\"repo\"</span>) String repo);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder()</span><br><span class=\"line\">    .baseUrl(API_URL)</span><br><span class=\"line\">    .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">    .build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create an instance of our GitHub API interface.</span></span><br><span class=\"line\">GitHub github = retrofit.create(GitHub.class);</span><br></pre></td></tr></table></figure>\n<p><code>retrofit.create</code>的实现<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">final</span> Class&lt;T&gt; service)</span> </span>&#123;</span><br><span class=\"line\">   Utils.validateServiceInterface(service);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (validateEagerly) &#123;</span><br><span class=\"line\">     eagerlyValidateMethods(service);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), <span class=\"keyword\">new</span> Class&lt;?&gt;[] &#123; service &#125;,</span><br><span class=\"line\">       <span class=\"keyword\">new</span> InvocationHandler() &#123;</span><br><span class=\"line\">         <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Platform platform = Platform.get();</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object... args)</span></span></span><br><span class=\"line\"><span class=\"function\">             <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">           <span class=\"comment\">// If the method is a method from Object then defer to normal invocation.</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (method.getDeclaringClass() == Object.class) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> method.invoke(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (platform.isDefaultMethod(method)) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> platform.invokeDefaultMethod(method, service, proxy, args);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           ServiceMethod serviceMethod = loadServiceMethod(method);</span><br><span class=\"line\">           OkHttpCall okHttpCall = <span class=\"keyword\">new</span> OkHttpCall&lt;&gt;(serviceMethod, args);</span><br><span class=\"line\">           <span class=\"keyword\">return</span> serviceMethod.callAdapter.adapt(okHttpCall);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过<code>retrofit.create</code>创建的对象，在执行相应的方法时都会经过这个内部类的<code>invoke</code>方法，再通过<code>ServiceMethod</code> 进行相关的请求。<br>其实仔细想就明白了，每个网络请求其实并不关心叫什么名子，它只需要知道请求的url和参数就可以接着进行统一的网络请求就可以，所以看起来我们在定义接口的时候每个请求都定义了一个方法，但实际上这些方法没必要每个都实现。<br>而这个<code>ServiceMethod</code> 内部不用看就知道肯定是会通过<code>method</code>来读取每个接口上的注解，以便知道该进行什么样的网络请求</p>\n<p><strong>动态代理类实现原理分析：</strong><br>可以看到，通过<code>Proxy.newProxyInstance</code>生成了一个继承通用接口的实例，调用它的方法时就会调用动态代理类<code>InvocationHandler</code>的<code>invoke</code>方法，那么这个类是实现的呢</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                          InvocationHandler h)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> IllegalArgumentException</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(h);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class=\"line\">        <span class=\"comment\">//这里生成了一个继承通用接口的类</span></span><br><span class=\"line\">        Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             <span class=\"comment\">//可以发现这个类也有一个构造方法是传入InvocationHandler的</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> InvocationHandler ih = h;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Android-changed: Removed AccessController.doPrivileged</span></span><br><span class=\"line\">                cons.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cons.newInstance(<span class=\"keyword\">new</span> Object[]&#123;h&#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e.toString(), e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">            Throwable t = e.getCause();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t <span class=\"keyword\">instanceof</span> RuntimeException) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> (RuntimeException) t;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(t.toString(), t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e.toString(), e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>通过<code>cl.getConstructor(constructorParams)</code>可以看到创建的动态类是有构造方法是传入了<code>InvocationHandler</code>的<br>生成这个类是应该是在<code>getProxyClass0</code>里面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> WeakCache&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;</span><br><span class=\"line\">        proxyClassCache = <span class=\"keyword\">new</span> WeakCache&lt;&gt;(<span class=\"keyword\">new</span> KeyFactory(), <span class=\"keyword\">new</span> ProxyClassFactory());</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Class&lt;?&gt; getProxyClass0(ClassLoader loader,</span><br><span class=\"line\">                                           Class&lt;?&gt;... interfaces) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> proxyClassCache.get(loader, interfaces);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>proxyClassCache</code>很明显只是一个缓存用的对象，正直生成的地方应该就是<code>ProxyClassFactory</code><br>这个<code>ProxyClassFactory</code>内部收集完必要的信息后调用一个<code>native</code>方法生成并加载到内存的<br>根据网上的资料，可以通过以下方法把这个类给弄出来</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] classFile = ProxyGenerator.generateProxyClass(<span class=\"string\">\"$Proxy0\"</span>, PersonBean.class.getInterfaces());</span><br><span class=\"line\">      String path = <span class=\"string\">\"G:/javacode/javase/Test/bin/proxy/StuProxy.class\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span>(FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(path)) &#123;</span><br><span class=\"line\">          fos.write(classFile);</span><br><span class=\"line\">          fos.flush();</span><br><span class=\"line\">          System.out.println(<span class=\"string\">\"代理类class文件写入成功\"</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"写文件错误\"</span>);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>"},{"title":"在 Windows 平台上打造出你的 Linux 开发环境","date":"2018-03-04T15:08:33.000Z","_content":"\n## 资料：\n- [在 Windows 平台上打造出你的 Linux 开发环境][1]\n- [Cmder简单使用小结][2]\n- [Win下必备利器之Cmder][3]\n\n\n## Cmder\n官网地址: http://cmder.net/\ncmder有两个版本，mini版和full版\nmini版本，就几M大小，这个也就用来替代windows的cmd\nfull版本比较大，100多M，模拟了一些常用linux命令（比如ls、cat、more、cp、mv、rm、find、grep等），自带git,而且自带vim。（如果已经安装了git for windows可以只使用mini版，但是要把git的src/bin添加到path中去）\n<!--more-->\n### 快捷键\n\n- `start .`  或者`e.` 打开当前路径所在的文件夹\n- `Alt+H` ：显示所有快速键清单\n\n### 自定义aliases\n\n打开Cmder目录下的`config`文件夹，里面的aliases文件就是我们可以配置的别名文件，只需将里面ls命令的别名按下列方式修改就可以在ls命令下显示中文。\n\n例如：\n```\nll=ls -la --show-control-chars -F --color $*\nla=ls -a --show-control-chars -F --color $*\n```\n\n### 启动Cmder\n\n因为她是即压即用的存在，所以点击Cmder.exe即可运行。很显然这般打开她，不怎么快捷，即便用Listary高效搜索到她，然后点击;我们可以这样做:\n\n- 把 cmder 加到环境变量\n可以把`Cmder.exe`存放的目录添加到系统环境变量；加完之后,`Win+r`一下输入cmder,即可。\n\n- 添加 cmder 到右键菜单\n在某个文件夹中打开终端, 这个是一个(超级)痛点需求, 实际上上一步的把 cmder 加到环境变量就是为此服务的, 在管理员权限的终端输入以下语句即可:\n\n```cmd\nCmder.exe /REGISTER ALL\n```\n\n- 添加命令(配合listary)\n在选项-命令中，添加一个命令，关键字填`cmder`,路径填`cmder.exe`(需要添加到环境变量中)，参数填`/START %path%`,这样在任意地方输入`cmder`就能在当前路径打开`cmder`了\n\n### 添加右键\n\n可以关注这个gist。在Cmder根目录新建一个init.bat，输入以下代码：\n```bat\n@echo off\nSET CMDER_ROOT=%~dp0\nreg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\" /ve /d \"Cmder Here\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\" /v \"Icon\" /d \"\\\"%CMDER_ROOT%cmder.exe\\\"\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\" /v \"Extended\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\\command\" /ve /d \"\\\"%CMDER_ROOT%cmder.exe\\\" \\\"%%V\\\"\" /f\npause\n```\n\n以管理员身份运行init.bat即可。删除的话再在根目录新建一个uninit.bat，依然是以管理员身份运行。代码如下：\n```\n@echo off\nReg delete \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\" /f\npause\n```\n\n### 解决文字重叠问题\n\n`Win + Ait + P` 唤出设置界面 `> mian > font > monospce`,去掉那勾勾即可\n\n### 修改命令提示符号·λ·\n\nCmder预设的命列列提示符号是 λ ;如果用着不习惯，可以将这个字元改成Mac / Linux环境下常见的 $ 符号，具体操作如下：\n\n编辑Cmder安装目录下的vendor\\init.bat批处理文件(min版本15行)，把：\n```\n@prompt $E[1;32;40m$P$S{git}{hg}$S$_$E[1;30;40m {lamb} $S$E[0m\n```\n修改成以下即可：\n```\n@prompt $E[1;32;40m$P$S{git}{hg}$S$_$E[1;30;40m $$ $S$E[0m\n```\n这个亲测在`cmder.exe`可以，但在PowerShell.exe需要另行设置:\n\n打开文件`config/cmder.lua`（prompt.lua也有版本是这个），将第二行中的 λ 修改为Linux下常用的 $ 即可；亲测可行(2016-01-13)。\n\n\n## Chocolatey软件包管理系统\n\n`Chocolatey`的哲学就是完全用命令行来安装应用程序，它更像一个包管理工具（背后使用 Nuget ）\n安装chocolatey , 运行如下命令即可：\n\n    @powershell -NoProfile -ExecutionPolicy unrestricted -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\n\n可能需要被墙了，需要挂代理\n安装软件命令 choco install softwareName, 短写是 cinst softwareName\n可安装的应用程序，可以参见其 Package列表\n以下是window下开发常用的开发环境应用:\n```\nchoco install autohotkey.portable    #安装 AutoHotkey (Portable)\nchoco install nodejs.install  #安装 node\nchoco install git.install     #安装 git\nchoco install ruby            #安装 ruby\nchoco install python          #安装 python\nchoco install jdk8            #安装 JDK8\nchoco install googlechrome    #安装 Chrome\nchoco install google-chrome-x64 #Google Chrome (64-bit only) \nchoco install firefox         #安装 firefox\nchoco install notepadplusplus.install #安装 notepad++\nchoco install Atom                    #安装 Atom\nchoco install SublimeText3            #安装 SublimeText3\nchoco install wget\n```\n\n  [1]: http://www.oschina.net/news/46712/develop-on-windows-as-if-it-was-unix \"在 Windows 平台上打造出你的 Linux 开发环境\"\n  [2]: https://github.com/Just1n/Posts/blob/master/Cmder简单使用小结.md \"Cmder简单使用小结\"\n  [3]: http://www.cnblogs.com/jadeboy/p/5132423.html \"Win下必备利器之Cmder\"\n  [4]: http://cmder.net/","source":"_posts/在-Windows-平台上打造出你的-Linux-开发环境.md","raw":"---\ntitle: 在 Windows 平台上打造出你的 Linux 开发环境\ndate: 2018-03-04 23:08:33\ntags: windows\n---\n\n## 资料：\n- [在 Windows 平台上打造出你的 Linux 开发环境][1]\n- [Cmder简单使用小结][2]\n- [Win下必备利器之Cmder][3]\n\n\n## Cmder\n官网地址: http://cmder.net/\ncmder有两个版本，mini版和full版\nmini版本，就几M大小，这个也就用来替代windows的cmd\nfull版本比较大，100多M，模拟了一些常用linux命令（比如ls、cat、more、cp、mv、rm、find、grep等），自带git,而且自带vim。（如果已经安装了git for windows可以只使用mini版，但是要把git的src/bin添加到path中去）\n<!--more-->\n### 快捷键\n\n- `start .`  或者`e.` 打开当前路径所在的文件夹\n- `Alt+H` ：显示所有快速键清单\n\n### 自定义aliases\n\n打开Cmder目录下的`config`文件夹，里面的aliases文件就是我们可以配置的别名文件，只需将里面ls命令的别名按下列方式修改就可以在ls命令下显示中文。\n\n例如：\n```\nll=ls -la --show-control-chars -F --color $*\nla=ls -a --show-control-chars -F --color $*\n```\n\n### 启动Cmder\n\n因为她是即压即用的存在，所以点击Cmder.exe即可运行。很显然这般打开她，不怎么快捷，即便用Listary高效搜索到她，然后点击;我们可以这样做:\n\n- 把 cmder 加到环境变量\n可以把`Cmder.exe`存放的目录添加到系统环境变量；加完之后,`Win+r`一下输入cmder,即可。\n\n- 添加 cmder 到右键菜单\n在某个文件夹中打开终端, 这个是一个(超级)痛点需求, 实际上上一步的把 cmder 加到环境变量就是为此服务的, 在管理员权限的终端输入以下语句即可:\n\n```cmd\nCmder.exe /REGISTER ALL\n```\n\n- 添加命令(配合listary)\n在选项-命令中，添加一个命令，关键字填`cmder`,路径填`cmder.exe`(需要添加到环境变量中)，参数填`/START %path%`,这样在任意地方输入`cmder`就能在当前路径打开`cmder`了\n\n### 添加右键\n\n可以关注这个gist。在Cmder根目录新建一个init.bat，输入以下代码：\n```bat\n@echo off\nSET CMDER_ROOT=%~dp0\nreg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\" /ve /d \"Cmder Here\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\" /v \"Icon\" /d \"\\\"%CMDER_ROOT%cmder.exe\\\"\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\" /v \"Extended\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\\command\" /ve /d \"\\\"%CMDER_ROOT%cmder.exe\\\" \\\"%%V\\\"\" /f\npause\n```\n\n以管理员身份运行init.bat即可。删除的话再在根目录新建一个uninit.bat，依然是以管理员身份运行。代码如下：\n```\n@echo off\nReg delete \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\" /f\npause\n```\n\n### 解决文字重叠问题\n\n`Win + Ait + P` 唤出设置界面 `> mian > font > monospce`,去掉那勾勾即可\n\n### 修改命令提示符号·λ·\n\nCmder预设的命列列提示符号是 λ ;如果用着不习惯，可以将这个字元改成Mac / Linux环境下常见的 $ 符号，具体操作如下：\n\n编辑Cmder安装目录下的vendor\\init.bat批处理文件(min版本15行)，把：\n```\n@prompt $E[1;32;40m$P$S{git}{hg}$S$_$E[1;30;40m {lamb} $S$E[0m\n```\n修改成以下即可：\n```\n@prompt $E[1;32;40m$P$S{git}{hg}$S$_$E[1;30;40m $$ $S$E[0m\n```\n这个亲测在`cmder.exe`可以，但在PowerShell.exe需要另行设置:\n\n打开文件`config/cmder.lua`（prompt.lua也有版本是这个），将第二行中的 λ 修改为Linux下常用的 $ 即可；亲测可行(2016-01-13)。\n\n\n## Chocolatey软件包管理系统\n\n`Chocolatey`的哲学就是完全用命令行来安装应用程序，它更像一个包管理工具（背后使用 Nuget ）\n安装chocolatey , 运行如下命令即可：\n\n    @powershell -NoProfile -ExecutionPolicy unrestricted -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\n\n可能需要被墙了，需要挂代理\n安装软件命令 choco install softwareName, 短写是 cinst softwareName\n可安装的应用程序，可以参见其 Package列表\n以下是window下开发常用的开发环境应用:\n```\nchoco install autohotkey.portable    #安装 AutoHotkey (Portable)\nchoco install nodejs.install  #安装 node\nchoco install git.install     #安装 git\nchoco install ruby            #安装 ruby\nchoco install python          #安装 python\nchoco install jdk8            #安装 JDK8\nchoco install googlechrome    #安装 Chrome\nchoco install google-chrome-x64 #Google Chrome (64-bit only) \nchoco install firefox         #安装 firefox\nchoco install notepadplusplus.install #安装 notepad++\nchoco install Atom                    #安装 Atom\nchoco install SublimeText3            #安装 SublimeText3\nchoco install wget\n```\n\n  [1]: http://www.oschina.net/news/46712/develop-on-windows-as-if-it-was-unix \"在 Windows 平台上打造出你的 Linux 开发环境\"\n  [2]: https://github.com/Just1n/Posts/blob/master/Cmder简单使用小结.md \"Cmder简单使用小结\"\n  [3]: http://www.cnblogs.com/jadeboy/p/5132423.html \"Win下必备利器之Cmder\"\n  [4]: http://cmder.net/","slug":"在-Windows-平台上打造出你的-Linux-开发环境","published":1,"updated":"2018-03-27T14:06:24.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyq0ff0k000tzwv72dyk6gk5","content":"<h2 id=\"资料：\"><a href=\"#资料：\" class=\"headerlink\" title=\"资料：\"></a>资料：</h2><ul>\n<li><a href=\"http://www.oschina.net/news/46712/develop-on-windows-as-if-it-was-unix\" title=\"在 Windows 平台上打造出你的 Linux 开发环境\" target=\"_blank\" rel=\"noopener\">在 Windows 平台上打造出你的 Linux 开发环境</a></li>\n<li><a href=\"https://github.com/Just1n/Posts/blob/master/Cmder简单使用小结.md\" title=\"Cmder简单使用小结\" target=\"_blank\" rel=\"noopener\">Cmder简单使用小结</a></li>\n<li><a href=\"http://www.cnblogs.com/jadeboy/p/5132423.html\" title=\"Win下必备利器之Cmder\" target=\"_blank\" rel=\"noopener\">Win下必备利器之Cmder</a></li>\n</ul>\n<h2 id=\"Cmder\"><a href=\"#Cmder\" class=\"headerlink\" title=\"Cmder\"></a>Cmder</h2><p>官网地址: <a href=\"http://cmder.net/\" target=\"_blank\" rel=\"noopener\">http://cmder.net/</a><br>cmder有两个版本，mini版和full版<br>mini版本，就几M大小，这个也就用来替代windows的cmd<br>full版本比较大，100多M，模拟了一些常用linux命令（比如ls、cat、more、cp、mv、rm、find、grep等），自带git,而且自带vim。（如果已经安装了git for windows可以只使用mini版，但是要把git的src/bin添加到path中去）<br><a id=\"more\"></a></p>\n<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><ul>\n<li><code>start .</code>  或者<code>e.</code> 打开当前路径所在的文件夹</li>\n<li><code>Alt+H</code> ：显示所有快速键清单</li>\n</ul>\n<h3 id=\"自定义aliases\"><a href=\"#自定义aliases\" class=\"headerlink\" title=\"自定义aliases\"></a>自定义aliases</h3><p>打开Cmder目录下的<code>config</code>文件夹，里面的aliases文件就是我们可以配置的别名文件，只需将里面ls命令的别名按下列方式修改就可以在ls命令下显示中文。</p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll=ls -la --show-control-chars -F --color $*</span><br><span class=\"line\">la=ls -a --show-control-chars -F --color $*</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动Cmder\"><a href=\"#启动Cmder\" class=\"headerlink\" title=\"启动Cmder\"></a>启动Cmder</h3><p>因为她是即压即用的存在，所以点击Cmder.exe即可运行。很显然这般打开她，不怎么快捷，即便用Listary高效搜索到她，然后点击;我们可以这样做:</p>\n<ul>\n<li><p>把 cmder 加到环境变量<br>可以把<code>Cmder.exe</code>存放的目录添加到系统环境变量；加完之后,<code>Win+r</code>一下输入cmder,即可。</p>\n</li>\n<li><p>添加 cmder 到右键菜单<br>在某个文件夹中打开终端, 这个是一个(超级)痛点需求, 实际上上一步的把 cmder 加到环境变量就是为此服务的, 在管理员权限的终端输入以下语句即可:</p>\n</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cmder.exe /REGISTER ALL</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加命令(配合listary)<br>在选项-命令中，添加一个命令，关键字填<code>cmder</code>,路径填<code>cmder.exe</code>(需要添加到环境变量中)，参数填<code>/START %path%</code>,这样在任意地方输入<code>cmder</code>就能在当前路径打开<code>cmder</code>了</li>\n</ul>\n<h3 id=\"添加右键\"><a href=\"#添加右键\" class=\"headerlink\" title=\"添加右键\"></a>添加右键</h3><p>可以关注这个gist。在Cmder根目录新建一个init.bat，输入以下代码：<br><figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">SET</span> CMDER_ROOT=%~dp0</span><br><span class=\"line\">reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\" /ve /d \"Cmder Here\" /f</span><br><span class=\"line\">reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\" /v \"Icon\" /d \"\\\"<span class=\"variable\">%CMDER_ROOT%</span>cmder.exe\\\"\" /f</span><br><span class=\"line\">reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\" /v \"Extended\" /f</span><br><span class=\"line\">reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\\command\" /ve /d \"\\\"<span class=\"variable\">%CMDER_ROOT%</span>cmder.exe\\\" \\\"<span class=\"variable\">%%V</span>\\\"\" /f</span><br><span class=\"line\"><span class=\"built_in\">pause</span></span><br></pre></td></tr></table></figure></p>\n<p>以管理员身份运行init.bat即可。删除的话再在根目录新建一个uninit.bat，依然是以管理员身份运行。代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">Reg delete &quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder&quot; /f</span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解决文字重叠问题\"><a href=\"#解决文字重叠问题\" class=\"headerlink\" title=\"解决文字重叠问题\"></a>解决文字重叠问题</h3><p><code>Win + Ait + P</code> 唤出设置界面 <code>&gt; mian &gt; font &gt; monospce</code>,去掉那勾勾即可</p>\n<h3 id=\"修改命令提示符号·λ·\"><a href=\"#修改命令提示符号·λ·\" class=\"headerlink\" title=\"修改命令提示符号·λ·\"></a>修改命令提示符号·λ·</h3><p>Cmder预设的命列列提示符号是 λ ;如果用着不习惯，可以将这个字元改成Mac / Linux环境下常见的 $ 符号，具体操作如下：</p>\n<p>编辑Cmder安装目录下的vendor\\init.bat批处理文件(min版本15行)，把：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@prompt $E[1;32;40m$P$S&#123;git&#125;&#123;hg&#125;$S$_$E[1;30;40m &#123;lamb&#125; $S$E[0m</span><br></pre></td></tr></table></figure></p>\n<p>修改成以下即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@prompt $E[1;32;40m$P$S&#123;git&#125;&#123;hg&#125;$S$_$E[1;30;40m $$ $S$E[0m</span><br></pre></td></tr></table></figure></p>\n<p>这个亲测在<code>cmder.exe</code>可以，但在PowerShell.exe需要另行设置:</p>\n<p>打开文件<code>config/cmder.lua</code>（prompt.lua也有版本是这个），将第二行中的 λ 修改为Linux下常用的 $ 即可；亲测可行(2016-01-13)。</p>\n<h2 id=\"Chocolatey软件包管理系统\"><a href=\"#Chocolatey软件包管理系统\" class=\"headerlink\" title=\"Chocolatey软件包管理系统\"></a>Chocolatey软件包管理系统</h2><p><code>Chocolatey</code>的哲学就是完全用命令行来安装应用程序，它更像一个包管理工具（背后使用 Nuget ）<br>安装chocolatey , 运行如下命令即可：</p>\n<pre><code>@powershell -NoProfile -ExecutionPolicy unrestricted -Command &quot;iex ((new-object net.webclient).DownloadString(&apos;https://chocolatey.org/install.ps1&apos;))&quot; &amp;&amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\n</code></pre><p>可能需要被墙了，需要挂代理<br>安装软件命令 choco install softwareName, 短写是 cinst softwareName<br>可安装的应用程序，可以参见其 Package列表<br>以下是window下开发常用的开发环境应用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install autohotkey.portable    #安装 AutoHotkey (Portable)</span><br><span class=\"line\">choco install nodejs.install  #安装 node</span><br><span class=\"line\">choco install git.install     #安装 git</span><br><span class=\"line\">choco install ruby            #安装 ruby</span><br><span class=\"line\">choco install python          #安装 python</span><br><span class=\"line\">choco install jdk8            #安装 JDK8</span><br><span class=\"line\">choco install googlechrome    #安装 Chrome</span><br><span class=\"line\">choco install google-chrome-x64 #Google Chrome (64-bit only) </span><br><span class=\"line\">choco install firefox         #安装 firefox</span><br><span class=\"line\">choco install notepadplusplus.install #安装 notepad++</span><br><span class=\"line\">choco install Atom                    #安装 Atom</span><br><span class=\"line\">choco install SublimeText3            #安装 SublimeText3</span><br><span class=\"line\">choco install wget</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"资料：\"><a href=\"#资料：\" class=\"headerlink\" title=\"资料：\"></a>资料：</h2><ul>\n<li><a href=\"http://www.oschina.net/news/46712/develop-on-windows-as-if-it-was-unix\" title=\"在 Windows 平台上打造出你的 Linux 开发环境\" target=\"_blank\" rel=\"noopener\">在 Windows 平台上打造出你的 Linux 开发环境</a></li>\n<li><a href=\"https://github.com/Just1n/Posts/blob/master/Cmder简单使用小结.md\" title=\"Cmder简单使用小结\" target=\"_blank\" rel=\"noopener\">Cmder简单使用小结</a></li>\n<li><a href=\"http://www.cnblogs.com/jadeboy/p/5132423.html\" title=\"Win下必备利器之Cmder\" target=\"_blank\" rel=\"noopener\">Win下必备利器之Cmder</a></li>\n</ul>\n<h2 id=\"Cmder\"><a href=\"#Cmder\" class=\"headerlink\" title=\"Cmder\"></a>Cmder</h2><p>官网地址: <a href=\"http://cmder.net/\" target=\"_blank\" rel=\"noopener\">http://cmder.net/</a><br>cmder有两个版本，mini版和full版<br>mini版本，就几M大小，这个也就用来替代windows的cmd<br>full版本比较大，100多M，模拟了一些常用linux命令（比如ls、cat、more、cp、mv、rm、find、grep等），自带git,而且自带vim。（如果已经安装了git for windows可以只使用mini版，但是要把git的src/bin添加到path中去）<br>","more":"</p>\n<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><ul>\n<li><code>start .</code>  或者<code>e.</code> 打开当前路径所在的文件夹</li>\n<li><code>Alt+H</code> ：显示所有快速键清单</li>\n</ul>\n<h3 id=\"自定义aliases\"><a href=\"#自定义aliases\" class=\"headerlink\" title=\"自定义aliases\"></a>自定义aliases</h3><p>打开Cmder目录下的<code>config</code>文件夹，里面的aliases文件就是我们可以配置的别名文件，只需将里面ls命令的别名按下列方式修改就可以在ls命令下显示中文。</p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll=ls -la --show-control-chars -F --color $*</span><br><span class=\"line\">la=ls -a --show-control-chars -F --color $*</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动Cmder\"><a href=\"#启动Cmder\" class=\"headerlink\" title=\"启动Cmder\"></a>启动Cmder</h3><p>因为她是即压即用的存在，所以点击Cmder.exe即可运行。很显然这般打开她，不怎么快捷，即便用Listary高效搜索到她，然后点击;我们可以这样做:</p>\n<ul>\n<li><p>把 cmder 加到环境变量<br>可以把<code>Cmder.exe</code>存放的目录添加到系统环境变量；加完之后,<code>Win+r</code>一下输入cmder,即可。</p>\n</li>\n<li><p>添加 cmder 到右键菜单<br>在某个文件夹中打开终端, 这个是一个(超级)痛点需求, 实际上上一步的把 cmder 加到环境变量就是为此服务的, 在管理员权限的终端输入以下语句即可:</p>\n</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cmder.exe /REGISTER ALL</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加命令(配合listary)<br>在选项-命令中，添加一个命令，关键字填<code>cmder</code>,路径填<code>cmder.exe</code>(需要添加到环境变量中)，参数填<code>/START %path%</code>,这样在任意地方输入<code>cmder</code>就能在当前路径打开<code>cmder</code>了</li>\n</ul>\n<h3 id=\"添加右键\"><a href=\"#添加右键\" class=\"headerlink\" title=\"添加右键\"></a>添加右键</h3><p>可以关注这个gist。在Cmder根目录新建一个init.bat，输入以下代码：<br><figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">SET</span> CMDER_ROOT=%~dp0</span><br><span class=\"line\">reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\" /ve /d \"Cmder Here\" /f</span><br><span class=\"line\">reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\" /v \"Icon\" /d \"\\\"<span class=\"variable\">%CMDER_ROOT%</span>cmder.exe\\\"\" /f</span><br><span class=\"line\">reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\" /v \"Extended\" /f</span><br><span class=\"line\">reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder\\command\" /ve /d \"\\\"<span class=\"variable\">%CMDER_ROOT%</span>cmder.exe\\\" \\\"<span class=\"variable\">%%V</span>\\\"\" /f</span><br><span class=\"line\"><span class=\"built_in\">pause</span></span><br></pre></td></tr></table></figure></p>\n<p>以管理员身份运行init.bat即可。删除的话再在根目录新建一个uninit.bat，依然是以管理员身份运行。代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">Reg delete &quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Directory\\Background\\shell\\Cmder&quot; /f</span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解决文字重叠问题\"><a href=\"#解决文字重叠问题\" class=\"headerlink\" title=\"解决文字重叠问题\"></a>解决文字重叠问题</h3><p><code>Win + Ait + P</code> 唤出设置界面 <code>&gt; mian &gt; font &gt; monospce</code>,去掉那勾勾即可</p>\n<h3 id=\"修改命令提示符号·λ·\"><a href=\"#修改命令提示符号·λ·\" class=\"headerlink\" title=\"修改命令提示符号·λ·\"></a>修改命令提示符号·λ·</h3><p>Cmder预设的命列列提示符号是 λ ;如果用着不习惯，可以将这个字元改成Mac / Linux环境下常见的 $ 符号，具体操作如下：</p>\n<p>编辑Cmder安装目录下的vendor\\init.bat批处理文件(min版本15行)，把：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@prompt $E[1;32;40m$P$S&#123;git&#125;&#123;hg&#125;$S$_$E[1;30;40m &#123;lamb&#125; $S$E[0m</span><br></pre></td></tr></table></figure></p>\n<p>修改成以下即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@prompt $E[1;32;40m$P$S&#123;git&#125;&#123;hg&#125;$S$_$E[1;30;40m $$ $S$E[0m</span><br></pre></td></tr></table></figure></p>\n<p>这个亲测在<code>cmder.exe</code>可以，但在PowerShell.exe需要另行设置:</p>\n<p>打开文件<code>config/cmder.lua</code>（prompt.lua也有版本是这个），将第二行中的 λ 修改为Linux下常用的 $ 即可；亲测可行(2016-01-13)。</p>\n<h2 id=\"Chocolatey软件包管理系统\"><a href=\"#Chocolatey软件包管理系统\" class=\"headerlink\" title=\"Chocolatey软件包管理系统\"></a>Chocolatey软件包管理系统</h2><p><code>Chocolatey</code>的哲学就是完全用命令行来安装应用程序，它更像一个包管理工具（背后使用 Nuget ）<br>安装chocolatey , 运行如下命令即可：</p>\n<pre><code>@powershell -NoProfile -ExecutionPolicy unrestricted -Command &quot;iex ((new-object net.webclient).DownloadString(&apos;https://chocolatey.org/install.ps1&apos;))&quot; &amp;&amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\n</code></pre><p>可能需要被墙了，需要挂代理<br>安装软件命令 choco install softwareName, 短写是 cinst softwareName<br>可安装的应用程序，可以参见其 Package列表<br>以下是window下开发常用的开发环境应用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install autohotkey.portable    #安装 AutoHotkey (Portable)</span><br><span class=\"line\">choco install nodejs.install  #安装 node</span><br><span class=\"line\">choco install git.install     #安装 git</span><br><span class=\"line\">choco install ruby            #安装 ruby</span><br><span class=\"line\">choco install python          #安装 python</span><br><span class=\"line\">choco install jdk8            #安装 JDK8</span><br><span class=\"line\">choco install googlechrome    #安装 Chrome</span><br><span class=\"line\">choco install google-chrome-x64 #Google Chrome (64-bit only) </span><br><span class=\"line\">choco install firefox         #安装 firefox</span><br><span class=\"line\">choco install notepadplusplus.install #安装 notepad++</span><br><span class=\"line\">choco install Atom                    #安装 Atom</span><br><span class=\"line\">choco install SublimeText3            #安装 SublimeText3</span><br><span class=\"line\">choco install wget</span><br></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjyq0fez80000zwv7gq6l5d12","tag_id":"cjyq0fezo0003zwv7viuvmagw","_id":"cjyq0fezw0008zwv71ulpj5sk"},{"post_id":"cjyq0fezz000azwv7ff7x7jw6","tag_id":"cjyq0fezo0003zwv7viuvmagw","_id":"cjyq0ff05000dzwv7clsfei8j"},{"post_id":"cjyq0ff02000czwv7feogrsrw","tag_id":"cjyq0fezo0003zwv7viuvmagw","_id":"cjyq0ff08000gzwv7vdhpfi7m"},{"post_id":"cjyq0fezk0002zwv7vuh7q8hi","tag_id":"cjyq0fezv0007zwv7jporf6df","_id":"cjyq0ff0a000izwv7rwkvm4pf"},{"post_id":"cjyq0fezk0002zwv7vuh7q8hi","tag_id":"cjyq0fezo0003zwv7viuvmagw","_id":"cjyq0ff0e000lzwv774f3y5nz"},{"post_id":"cjyq0ff05000ezwv747du4vok","tag_id":"cjyq0fezv0007zwv7jporf6df","_id":"cjyq0ff0g000nzwv76w6v6jzp"},{"post_id":"cjyq0fezq0004zwv77uzjuk2i","tag_id":"cjyq0fezo0003zwv7viuvmagw","_id":"cjyq0ff0i000qzwv7syh2h6gb"},{"post_id":"cjyq0ff0b000jzwv70nu0cx99","tag_id":"cjyq0fezo0003zwv7viuvmagw","_id":"cjyq0ff0k000szwv78m42ij4d"},{"post_id":"cjyq0ff0e000mzwv7gow2ip27","tag_id":"cjyq0fezv0007zwv7jporf6df","_id":"cjyq0ff0m000uzwv7uakyqzqq"},{"post_id":"cjyq0fezu0006zwv7s3w8jt19","tag_id":"cjyq0ff0d000kzwv7ox53fs41","_id":"cjyq0ff0n000wzwv7omkdpgvx"},{"post_id":"cjyq0fezw0009zwv7w8owatix","tag_id":"cjyq0ff0h000pzwv72alznkuj","_id":"cjyq0ff0o000xzwv7om1otsiq"},{"post_id":"cjyq0ff08000hzwv7jt8xmpdw","tag_id":"cjyq0ff0m000vzwv7l07huntz","_id":"cjyq0ff0p000zzwv7rioyzwx5"},{"post_id":"cjyq0ff0g000ozwv75nbyjdmf","tag_id":"cjyq0ff0o000yzwv74oi8p08g","_id":"cjyq0ff0q0011zwv79in5cvgc"},{"post_id":"cjyq0ff0i000rzwv7hpvp6xlp","tag_id":"cjyq0ff0p0010zwv7opr0ffvz","_id":"cjyq0ff0s0014zwv7s6gdqtno"},{"post_id":"cjyq0ff0i000rzwv7hpvp6xlp","tag_id":"cjyq0ff0r0012zwv7ia6icb3o","_id":"cjyq0ff0t0015zwv7a7i8zxog"},{"post_id":"cjyq0ff0k000tzwv72dyk6gk5","tag_id":"cjyq0ff0s0013zwv7jujq49fc","_id":"cjyq0ff0u0016zwv72lkhdmve"}],"Tag":[{"name":"Android","_id":"cjyq0fezo0003zwv7viuvmagw"},{"name":"Gradle","_id":"cjyq0fezv0007zwv7jporf6df"},{"name":"hexo","_id":"cjyq0ff0d000kzwv7ox53fs41"},{"name":"Git","_id":"cjyq0ff0h000pzwv72alznkuj"},{"name":"算法","_id":"cjyq0ff0m000vzwv7l07huntz"},{"name":"python","_id":"cjyq0ff0o000yzwv74oi8p08g"},{"name":"Retrofit","_id":"cjyq0ff0p0010zwv7opr0ffvz"},{"name":"设计模式","_id":"cjyq0ff0r0012zwv7ia6icb3o"},{"name":"windows","_id":"cjyq0ff0s0013zwv7jujq49fc"}]}}